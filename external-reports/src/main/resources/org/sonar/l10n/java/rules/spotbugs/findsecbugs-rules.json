[
  {
    "key": "ANDROID_BROADCAST",
    "name": "Security - Broadcast (Android)",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    Broadcast intents can be listen by any application with the appropriate permission. It is suggested to avoid transmitting\n    sensitive information when possible.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nIntent i = new Intent();\ni.setAction(\"com.insecure.action.UserConnected\");\ni.putExtra(\"username\", user);\ni.putExtra(\"email\", email);\ni.putExtra(\"session\", newSessionId);\n\nthis.sendBroadcast(v1);\n</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (if possible):</b><br/>\n<pre>\nIntent i = new Intent();\ni.setAction(\"com.secure.action.UserConnected\");\n\nsendBroadcast(v1);\n</pre>\n</p>\n<br/>\n<p>\n    <b>Configuration (receiver)<sup>[1] Source: StackOverflow</sup>:</b><br/>\n<pre>\n&lt;manifest ...&gt;\n\n    &lt;!-- Permission declaration --&gt;\n    &lt;permission android:name=\"my.app.PERMISSION\" /&gt;\n\n    &lt;receiver\n        android:name=\"my.app.BroadcastReceiver\"\n        android:permission=\"my.app.PERMISSION\"&gt; &lt;!-- Permission enforcement --&gt;\n        &lt;intent-filter>\n            &lt;action android:name=\"com.secure.action.UserConnected\" /&gt;\n        &lt;/intent-filter&gt;\n    &lt;/receiver&gt;\n\n    ...\n&lt;/manifest>\n</pre>\n</p>\n<p>\n    <b>Configuration (sender)<sup>[1] Source: StackOverflow</sup>:</b><br/>\n<pre>\n&lt;manifest&gt;\n    &lt;!-- We declare we own the permission to send broadcast to the above receiver --&gt;\n    &lt;uses-permission android:name=\"my.app.PERMISSION\"/&gt;\n\n    &lt;!-- With the following configuration, both the sender and the receiver apps need to be signed by the same developer certificate. --&gt;\n    &lt;permission android:name=\"my.app.PERMISSION\" android:protectionLevel=\"signature\"/&gt;\n&lt;/manifest&gt;\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD03-J.+Do+not+broadcast+sensitive+information+using+an+implicit+intent\">CERT: DRD03-J. Do not broadcast sensitive information using an implicit intent</a><br/>\n    <a href=\"http://developer.android.com/reference/android/content/BroadcastReceiver.html#Security\">Android Official Doc: BroadcastReceiver (Security)</a><br/>\n    <a href=\"http://developer.android.com/guide/topics/manifest/receiver-element.html\">Android Official Doc: Receiver configuration (see <code>android:permission</code>)</a><br/>\n    <sup>[1]</sup> <a href=\"http://stackoverflow.com/a/21513368/89769\">StackOverflow: How to set permissions in broadcast sender and receiver in android</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/925.html\">CWE-925: Improper Verification of Intent by Broadcast Receiver</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/927.html\">CWE-927: Use of Implicit Intent for Sensitive Communication</a>\n</p>",
    "tags": [
      "android",
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ANDROID_EXTERNAL_FILE_ACCESS",
    "name": "Security - External file access (Android)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    The application write data to external storage (potentially SD card). There are multiple security implication to this\n    action. First, file store on SD card will be accessible to the application having the\n    <a href=\"http://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE\"><code>READ_EXTERNAL_STORAGE</code></a> permission.\n    Also, if the data persisted contains confidential information about the user, encryption would be needed.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nfile file = new File(getExternalFilesDir(TARGET_TYPE), filename);\nfos = new FileOutputStream(file);\nfos.write(confidentialData.getBytes());\nfos.flush();\n</pre>\n</p>\n<p>\n    <b>Better alternative:</b><br/>\n<pre>\nfos = openFileOutput(filename, Context.MODE_PRIVATE);\nfos.write(string.getBytes());\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://developer.android.com/training/articles/security-tips.html#ExternalStorage\">Android Official Doc: Security Tips</a><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD00-J.+Do+not+store+sensitive+information+on+external+storage+%28SD+card%29+unless+encrypted+first\">CERT: DRD00-J: Do not store sensitive information on external storage [...]</a><br/>\n    <a href=\"http://developer.android.com/guide/topics/data/data-storage.html#filesExternal\">Android Official Doc: Using the External Storage</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/312.html\">CWE-312: Cleartext Storage of Sensitive Information</a>\n</p>",
    "tags": [
      "android",
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ANDROID_GEOLOCATION",
    "name": "Security - WebView with geolocation activated (Android)",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    It is suggested to ask the user for a confirmation about obtaining its geolocation.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nwebView.setWebChromeClient(new WebChromeClient() {\n    @Override\n    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\n        callback.invoke(origin, true, false);\n    }\n});\n</pre>\n</p>\n<p>\n    <b>Suggested code:</b><br/>\n\n    Limit the sampling of geolocation and ask the user for confirmation.\n<pre>\nwebView.setWebChromeClient(new WebChromeClient() {\n    @Override\n    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\n        callback.invoke(origin, true, false);\n\n        //Ask the user for confirmation\n    }\n});\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD15-J.+Consider+privacy+concerns+when+using+Geolocation+API\">CERT: DRD15-J. Consider privacy concerns when using Geolocation API</a><br/>\n    <a href=\"http://en.wikipedia.org/wiki/W3C_Geolocation_API\">Wikipedia: W3C Geolocation API</a><br/>\n    <a href=\"http://dev.w3.org/geo/api/spec-source.html\">W3C: Geolocation Specification</a><br/>\n</p>",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ANDROID_WEB_VIEW_JAVASCRIPT",
    "name": "Security - WebView with JavaScript enabled (Android)",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    Enabling JavaScript for the WebView means that it is now susceptible to XSS. The page render should be inspected\n    for potential reflected XSS, stored XSS and DOM XSS.<br/>\n<pre>\nWebView myWebView = (WebView) findViewById(R.id.webView);\nWebSettings webSettings = myWebView.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n</pre>\n</p>\n\n<p>\n    <b>Code at risk:</b><br/>\nEnabling JavaScript is not a bad practice. It just means that the backend code need to be audited for potential XSS.\nThe XSS can also be introduce client-side with DOM XSS.\n<pre>\nfunction updateDescription(newDescription) {\n    $(\"#userDescription\").html(\"&lt;p&gt;\"+newDescription+\"&lt;/p&gt;\");\n}\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://www.technotalkative.com/issue-using-setjavascriptenabled-can-introduce-xss-vulnerabilities-application-review-carefully/\">Issue: Using setJavaScriptEnabled can introduce XSS vulnerabilities</a><br/>\n    <a href=\"http://developer.android.com/guide/webapps/webview.html#UsingJavaScript\">Android Official Doc: WebView</a><br/>\n    <a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n    <a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a>\n</p>",
    "tags": [
      "android",
      "cwe",
      "owasp-a3",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACE",
    "name": "Security - WebView with JavaScript interface (Android)",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    The use of JavaScript Interface could expose the WebView to risky API. If an XSS is triggered in the WebView, the class\n    could be called by the malicious JavaScript code.\n</p>\n\n<p>\n    <b>Code at risk:</b><br/>\n    <pre>\nWebView myWebView = (WebView) findViewById(R.id.webView);\n\nmyWebView.addJavascriptInterface(new FileWriteUtil(this), \"fileWriteUtil\");\n\nWebSettings webSettings = myWebView.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n\n[...]\nclass FileWriteUtil {\n    Context mContext;\n\n    FileOpenUtil(Context c) {\n        mContext = c;\n    }\n\n    public void writeToFile(String data, String filename, String tag) {\n        [...]\n    }\n}\n    </pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29\">Android Official Doc: WebView.addJavascriptInterface()</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/749.html\">CWE-749: Exposed Dangerous Method or Function</a>\n</p>",
    "tags": [
      "android",
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ANDROID_WORLD_WRITABLE",
    "name": "Security - World writable file (Android)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    The file written in this context is using the creation mode <code>MODE_WORLD_READABLE</code>. It might not be the\n    expected behavior to exposed the content being written.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nfos = openFileOutput(filename, MODE_WORLD_READABLE);\nfos.write(userInfo.getBytes());\n</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (using MODE_PRIVATE):</b><br/>\n<pre>\nfos = openFileOutput(filename, MODE_PRIVATE);\n</pre>\n</p>\n<p>\n    <b>Solution (using local SQLite Database):</b><br/>\n\nUsing a local SQLite database is probably the best solution to store structured data. Make sure the database file is not\ncreate on external storage. See references below for implementation guidelines.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD11-J.+Ensure+that+sensitive+data+is+kept+secure\">CERT: DRD11-J. Ensure that sensitive data is kept secure</a><br/>\n    <a href=\"http://developer.android.com/training/articles/security-tips.html#InternalStorage\">Android Official Doc: Security Tips</a><br/>\n    <a href=\"http://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE\">Android Official Doc: Context.MODE_PRIVATE</a><br/>\n    <a href=\"http://www.vogella.com/tutorials/AndroidSQLite/article.html#databasetutorial_database\">vogella.com: Android SQLite database and content provider - Tutorial</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/312.html\">CWE-312: Cleartext Storage of Sensitive Information</a>\n</p>",
    "tags": [
      "android",
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AWS_QUERY_INJECTION",
    "name": "Security - AWS Query Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nConstructing SimpleDB queries containing user input can allow an attacker to view unauthorized records.<br/>\nThe following example dynamically constructs and executes a SimpleDB select() query allowing the user to specify the productCategory. The attacker can modify the query, bypass the required authentication for customerID and view records matching any customer.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>...\nString customerID = getAuthenticatedCustomerID(customerName, customerCredentials);\nString productCategory = request.getParameter(\"productCategory\");\n...\nAmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);\nString query = \"select * from invoices where productCategory = '\"\n            + productCategory + \"' and customerID = '\"\n            + customerID + \"' order by '\"\n            + sortColumn + \"' asc\";\nSelectResult sdbResult = sdbc.select(new SelectRequest(query));\n</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nThis issue is analogical to SQL Injection. Sanitize user input before using it in a SimpleDB query.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/943.html\">CWE-943: Improper Neutralization of Special Elements in Data Query Logic</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BAD_HEXA_CONVERSION",
    "name": "Security - Bad hexadecimal concatenation",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>When converting a byte array containing a hash signature to a human readable string, a conversion mistake can be made if \nthe array is read byte by byte. The following sample illustrates the use of Integer.toHexString() which will trim any leading zeroes\nfrom each byte of the computed hash value.\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] resultBytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder stringBuilder = new StringBuilder();\nfor(byte b :resultBytes) {\n    stringBuilder.append( Integer.toHexString( b & 0xFF ) );\n}\n\nreturn stringBuilder.toString();</pre>\n</p>\n<p>\nThis mistake weakens the hash value computed since it introduces more collisions. \nFor example, the hash values \"0x0679\" and \"0x6709\" would both output as \"679\" for the above function.\n</p>\n\n<p>\nIn this situation, the use of toHexString() should be replaced with String.format() as follows:\n<pre>stringBuilder.append( String.format( \"%02X\", b ) );</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/704.html\">CWE-704: Incorrect Type Conversion or Cast</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BEAN_PROPERTY_INJECTION",
    "name": "Security - JavaBeans Property Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nAn attacker can set arbitrary bean properties that can compromise system integrity. Bean population functions allow to set a bean property or a nested property. An attacker can leverage this functionality to access special bean properties like class.classLoader that will allow him to override system properties and potentially execute arbitrary code.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>MyBean bean = ...;\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid using user controlled values to populate Bean property names.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/15.html\">CWE-15: External Control of System or Configuration Setting</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BLOWFISH_KEY_SIZE",
    "name": "Security - Blowfish usage with short key",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nThe Blowfish cipher supports keysizes from 32 bits to 448 bits. A small key size makes the ciphertext vulnerable to brute force attacks.\nAt least 128 bits of entropy should be used when generating the key if use of Blowfish is required.\n</p>\n<p>\nIf the algorithm can be changed, the AES block cipher should be used instead.\n</p>\n\n<p><b>Vulnerable Code:</b><br/>\n<pre>KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(64);</pre>\n</p>\n\n<p><b>Solution:</b><br/>\n<pre>KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(128);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Blowfish_(cipher)\">Blowfish (cipher)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CIPHER_INTEGRITY",
    "name": "Security - Cipher with no integrity",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the \n    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.\n</p>\n<p>\n    The solution is to used a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the \n    existing cipher is prone to error <sup><a href=\"http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/\">[1]</a></sup>. Specifically,\n    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic\n    functions on the data.\n</p>\n<p>The following modes are vulnerable because they don't provide a HMAC:<br/>\n    - CBC<br/>\n    - OFB<br/>\n    - CTR<br/>\n    - ECB<br/><br/>\n    The following snippets code are some examples of vulnerable code.<br/><br/>\n    <b>Code at risk:</b><br/>\n    <i>AES in CBC mode</i><br/>\n\n    <pre>Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n    <br/>\n    <i>Triple DES with ECB mode</i><br/>\n\n<pre>Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\nIn the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n    <a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n    <a href=\"http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/\">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/353.html\">CWE-353: Missing Support for Integrity Check</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "COMMAND_INJECTION",
    "name": "Security - Potential Command Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>import java.lang.Runtime;\n\nRuntime r = Runtime.getRuntime();\nr.exec(\"/bin/sh -c some_tool\" + input);</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Command_Injection\">OWASP: Command Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/78.html\">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "COOKIE_PERSISTENT",
    "name": "Security - Persistent Cookie Usage",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nStoring sensitive data in a persistent cookie for an extended period of time can lead to a breach of confidentiality or account compromise. \n</p>\n<p>\n    <b>Explanation:</b><br/>\nIf private information is stored in persistent cookies, attackers have a larger time window in which to steal this data - especially since persistent cookies are often set to expire in the distant future. Persistent cookies are generally stored in a text file on the client and an attacker with access to the victim's machine can steal this information.<br/>\nPersistent cookies are often used to profile users as they interact with a site. Depending on what is done with this tracking data, it is possible to use persistent cookies to violate users' privacy.\n</p>\n<p>\n    <b>Vulnerable Code:</b> The following code sets a cookie to expire in 1 year.<br/>\n<pre>[...]\nCookie cookie = new Cookie(\"email\", email);\ncookie.setMaxAge(60*60*24*365);\n[...]</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n<ul>\n    <li>Use persistent cookies only if necessary and limit their maximum age.</li>\n    <li>Don't use persistent cookies for sensitive data.</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/Cookie.html#setMaxAge%28int%29\">Class Cookie setMaxAge documentation</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/539.html\">CWE-539: Information Exposure Through Persistent Cookies</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "COOKIE_USAGE",
    "name": "Security - Potentially sensitive data in a cookie",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>The information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session\nand referenced by the user's session cookie. See HttpSession (HttpServletRequest.getSession())</p>\n<p>Custom cookies can be used for information that needs to live longer than and is independent of a specific session.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/315.html\">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CRLF_INJECTION_LOGS",
    "name": "Security - Potential CRLF Injection for logs",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n</p>\n<br/>\n<p>\n<b>Code at risk:</b><br/>\n<pre>String val = request.getParameter(\"user\");\nString metadata = request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n</pre>\n\nA malicious user could send the metadata parameter with the value: <code>\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"</code>.\n</p>\n\n<b>Solution:</b><br/>\n<p>\nYou can manually sanitize each parameter.\n<pre>\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n</pre>\n</p>\n\n<p>\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href=\"https://logback.qos.ch/manual/layouts.html#replace\">using the replace function</a>.\n<pre>\n&lt;pattern&gt;%-5level - %replace(%msg){'[\\r\\n]', ''}%n&lt;/pattern&gt;\n</pre>\n</p>\n\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/117.html\">CWE-117: Improper Output Neutralization for Logs</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/93.html\">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>\n    <a href=\"https://logback.qos.ch/manual/layouts.html#replace\">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CUSTOM_MESSAGE_DIGEST",
    "name": "Security - Message digest is custom",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>Implementing a custom MessageDigest is error-prone.</p>\n<p><a href=\"http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\">NIST</a> recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256.</p>\n<blockquote>\n    \"<b>SHA-1 for digital signature generation:</b><br/>\n    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.\n    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>\n    <b>SHA-1 for digital signature verification:</b><br/>\n    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>\n    [...]<br/>\n    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>MyProprietaryMessageDigest extends MessageDigest {\n    @Override\n    protected byte[] engineDigest() {\n        [...]\n        //Creativity is a bad idea\n        return [...];\n    }\n}</pre>\n</p>\n<p>\n<p>Upgrade your implementation to use one of the approved algorithms. Use an algorithm that is sufficiently strong for your specific security needs.</p>\n<p>\n    <b>Example Solution:</b><br/>\n<pre>MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\nsha256Digest.update(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\">NIST Approved Hashing Algorithms</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DEFAULT_HTTP_CLIENT",
    "name": "Security - DefaultHttpClient with default constructor is not compatible with TLS 1.2",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>\n    HttpClient client = new DefaultHttpClient();\n</pre>\n</p>\n<p>\n<p><b>Solution:</b><br/>\n\nUpgrade your implementation to use one of the recommended constructs and configure https.protocols JVM option to include TLSv1.2:</p>\n\n<p>\n<ul>\n  <li>Use <a href=\"http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/SystemDefaultHttpClient.html\">SystemDefaultHttpClient</a> instead</li>\n<p>\n    <b>Sample Code:</b><br/>\n<pre>\n    HttpClient client = new SystemDefaultHttpClient();\n</pre>\n</p>\n  <li>Create an HttpClient based on SSLSocketFactory - get an SSLScoketFactory instance with <a href=\"https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLSocketFactory.html#getSystemSocketFactory()\">getSystemSocketFactory()</a> and use this instance for HttpClient creation</li>\n  <li>Create an HttpClient based on SSLConnectionSocketFactory - get an instance with <a href=\"https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLConnectionSocketFactory.html#getSystemSocketFactory()\">getSystemSocketFactory()</a> and use this instance for HttpClient creation</li>\n  <li>Use HttpClientBuilder - call <a href=\"http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html#useSystemProperties()\">useSystemProperties()</a> before calling build()</li>\n<p>\n    <b>Sample Code:</b><br/>\n<pre>\n    HttpClient client = HttpClientBuilder.create().useSystemProperties().build();\n</pre>\n</p>\n  <li>HttpClients - call <a href=\"https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClients.html#createSystem()\">createSystem()</a> to create an instance</li>\n<p>\n    <b>Sample Code:</b><br/>\n<pre>\n    HttpClient client = HttpClients.createSystem();\n</pre>\n</p>\n</ul>\n</p>\n<br/>\n\n<p>\n<b>References</b><br/>\n<a href=\"https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https\">Diagnosing TLS, SSL, and HTTPS</a>\n</p>",
    "tags": [
      "cryptography",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DESERIALIZATION_GADGET",
    "name": "Security - This class could be used as deserialization gadget",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\nDeserialization gadget are class that could be used by an attacker to take advantage of a remote API using Native Serialization.\nThis class is either adding custom behavior to deserialization with the readObject method (Serializable) or can be called\n from a serialized object (InvocationHandler).\n</p>\n<p>\nThis detector is intended to be used mostly by researcher. The real issue is using deserialization for remote operation.\nRemoving gadget is an hardening practice to reduce the risk of being exploited.\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502: Deserialization of Untrusted Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a><br/>\n<a href=\"http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8\">Serialization and Deserialization </a><br/>\n<a href=\"https://github.com/frohoff/ysoserial\">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>\n[1] <a href=\"https://gist.github.com/coekie/a27cc406fc9f3dc7a70d\">Example of Denial of Service using the class java.util.HashSet</a><br/>\n[2] <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590\">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>\n[3] <a href=\"https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize\">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DES_USAGE",
    "name": "Security - DES/DESede is insecure",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nDES and DESede (3DES) are not considered strong ciphers for modern applications. Currently, NIST recommends the \nusage of AES block ciphers instead of DES/3DES.\n</p>\n<p>\n    <b>Example weak code:</b>\n<pre>Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Example solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://www.nist.gov/itl/fips/060205_des.cfm\">NIST Withdraws Outdated Data Encryption Standard</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ECB_MODE",
    "name": "Security - ECB mode is insecure",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Codebook (ECB) mode, \nwhich does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So, \nfor example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept \nand replay the data.</p>\n<p>\nTo fix this, something like Galois/Counter Mode (GCM) should be used instead.\n</p>\n<p>\n<b>Code at risk:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/ECB/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n<a href=\"http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29\">Wikipedia: Block cipher modes of operation</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\">NIST: Recommendation for Block Cipher Modes of Operation</a>\n</p>",
    "tags": [
      "cryptography",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EL_INJECTION",
    "name": "Security - Potential code injection when using Expression Language (EL)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>public void evaluateExpression(String expression) {\n    FacesContext context = FacesContext.getCurrentInstance();\n    ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n    ELContext elContext = context.getELContext();\n    ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);\n    return (String) vex.getValue(elContext);\n}</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://blog.mindedsecurity.com/2015/11/reliable-os-shell-with-el-expression.html\">Minded Security: Abusing EL for executing OS commands</a><br/>\n    <a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html\">The Java EE 6 Tutorial: Expression Language</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n    <a href=\"https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf\">Minded Security: Expression Language Injection</a><br/>\n    <a href=\"http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/\">Dan Amodio's blog: Remote Code with Expression Language Injection</a><br/>\n    <a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ESAPI_ENCRYPTOR",
    "name": "Security - Use of ESAPI Encryptor",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    The ESAPI has a small history of vulnerabilities within the cryptography component. Here is a quick validation list to\n    make sure the Authenticated Encryption is working as expected.\n</p>\n<p><b>1. Library Version</b></p>\n<p>\n    This issue is corrected in ESAPI version 2.1.0. Versions <= 2.0.1 are vulnerable to a MAC bypass (CVE-2013-5679).<br/>\n</p>\n<p>\n    For Maven users, the plugin <a href=\"http://mojo.codehaus.org/versions-maven-plugin/\">versions</a> can be called using the\n    following command. The effective version of ESAPI will be available in the output.<br/>\n    <pre>$ mvn versions:display-dependency-updates</pre>\n    <br/>Output:<br/>\n    <pre>\n[...]\n[INFO] The following dependencies in Dependencies have newer versions:\n[INFO]   org.slf4j:slf4j-api ................................... 1.6.4 -> 1.7.7\n[INFO]   org.owasp.esapi:esapi ................................. 2.0.1 -> 2.1.0\n[...]\n    </pre>\n</p>\n<p>\n    or by looking at the configuration directly.<br/>\n    <pre>\n&lt;dependency&gt;\n    &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;\n    &lt;artifactId&gt;esapi&lt;/artifactId&gt;\n    &lt;version&gt;2.1.0&lt;/version&gt;\n&lt;/dependency&gt;</pre>\n</p>\n<p>\n    For Ant users, the jar used should be <a href=\"http://repo1.maven.org/maven2/org/owasp/esapi/esapi/2.1.0/esapi-2.1.0.jar\">esapi-2.1.0.jar</a>.\n</p>\n<p><b>2. Configuration:</b></p>\n    <p>\n    The library version 2.1.0 is still vulnerable to key size being changed in the ciphertext definition (CVE-2013-5960). Some precautions need to be taken.<br/>\n    <br/>\n    <div><b>The cryptographic configuration of ESAPI can also be vulnerable if any of these elements are present:</b><br/>\n    <b>Insecure configuration:</b><br/>\n    <pre>\nEncryptor.CipherText.useMAC=false\n\nEncryptor.EncryptionAlgorithm=AES\nEncryptor.CipherTransformation=AES/CBC/PKCS5Padding\n\nEncryptor.cipher_modes.additional_allowed=CBC</pre>\n    </div>\n</p>\n<p>\n    <div>\n    <b>Secure configuration:</b><br/>\n    <pre>\n#Needed\nEncryptor.CipherText.useMAC=true\n\n#Needed to have a solid auth. encryption\nEncryptor.EncryptionAlgorithm=AES\nEncryptor.CipherTransformation=AES/GCM/NoPadding\n\n#CBC mode should be removed to avoid padding oracle\nEncryptor.cipher_modes.additional_allowed=</pre>\n    </div>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://owasp-esapi-java.googlecode.com/svn/trunk/documentation/ESAPI-security-bulletin1.pdf\">ESAPI Security bulletin 1 (CVE-2013-5679)</a><br/>\n    <a href=\"http://nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-5679\">Vulnerability Summary for CVE-2013-5679</a><br/>\n    <a href=\"http://www.synacktiv.com/ressources/synacktiv_owasp_esapi_hmac_bypass.pdf\">Synactiv: Bypassing HMAC validation in OWASP ESAPI symmetric encryption</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/310.html\">CWE-310: Cryptographic Issues</a><br/>\n    <a href=\"http://lists.owasp.org/pipermail/esapi-dev/2015-March/002533.html\">ESAPI-dev mailing list: Status of CVE-2013-5960</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EXTERNAL_CONFIG_CONTROL",
    "name": "Security - Potential external control of configuration",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    Allowing external control of system settings can disrupt service or cause an application\n    to behave in unexpected, and potentially malicious ways. \n    An attacker could cause an error by providing a nonexistent catalog name\n    or connect to an unauthorized portion of the database.\n</p>\n<br/>\n<p>\n<b>Code at risk:</b><br/>\n<pre>conn.setCatalog(request.getParameter(\"catalog\"));</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/15.html\">CWE-15: External Control of System or Configuration Setting</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FILE_UPLOAD_FILENAME",
    "name": "Security - Tainted filename read",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>The filename provided by the FileUpload API can be tampered with by the client to reference unauthorized files.</p>\n<p>For example:</p>\n<ul>\n<li><code>\"../../../config/overide_file\"</code></li>\n<li><code>\"shell.jsp\\u0000expected.gif\"</code></li>\n</ul>\n<p>Therefore, such values should not be passed directly to the filesystem API. If acceptable, the application should generate its \nown file names and use those. Otherwise, the provided filename should be properly validated to ensure it's properly structured, \ncontains no unauthorized path characters (e.g., / \\), and refers to an authorized file.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blogs.securiteam.com/index.php/archives/1268\">Securiteam: File upload security recommendations</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC-33: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>\n</p>",
    "tags": [
      "cwe",
      "owasp-a4",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FORMAT_STRING_MANIPULATION",
    "name": "Security - Format String Manipulation",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\nAllowing user input to control format parameters could enable an attacker to cause exceptions to be thrown or leak information.<br/>\nAttackers may be able to modify the format string argument, such that an exception is thrown. If this exception is left uncaught, it may crash the application. Alternatively, if sensitive information is used within the unused arguments, attackers may change the format string to reveal this information.<br/>\nThe example code below lets the user specify the decimal points to which it shows the balance. The user can in fact specify anything causing an exception to be thrown which could lead to application failure. Even more critical within this example, if an attacker can specify the user input \"2f %3$s %4$.2\", the format string would be \"The customer: %s %s has the balance %4$.2f %3$s %4$.2\". This would then lead to the sensitive accountNo to be included within the resulting string.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>Formatter formatter = new Formatter(Locale.US);\nString format = \"The customer: %s %s has the balance %4$.\" + userInput + \"f\";\nformatter.format(format, firstName, lastName, accountNo, balance);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid using user controlled values in the format string argument.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/134.html\">CWE-134: Use of Externally-Controlled Format String</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HARD_CODE_KEY",
    "name": "Security - Hard Coded Key",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nCryptographic keys should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is\ncertainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.\n(Hard coded passwords are reported separately by <i>Hard Coded Password</i> pattern)\n</p>\n<p>\n<p><b>Vulnerable Code:</b><br/>\n\n<pre>byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};\nSecretKeySpec spec = new SecretKeySpec(key, \"AES\");\nCipher aes = Cipher.getInstance(\"AES\");\naes.init(Cipher.ENCRYPT_MODE, spec);\nreturn aesCipher.doFinal(secretData);</pre> \n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/321.html\">CWE-321: Use of Hard-coded Cryptographic Key</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HARD_CODE_PASSWORD",
    "name": "Security - Hard Coded Password",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nPasswords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is\ncertainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.\n(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)\n</p>\n<p>\n<p><b>Vulnerable Code:</b><br/>\n\n<pre>private String SECRET_PASSWORD = \"letMeIn!\";\n\nProperties props = new Properties();\nprops.put(Context.SECURITY_CREDENTIALS, \"p@ssw0rd\");</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/259.html\">CWE-259: Use of Hard-coded Password</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HAZELCAST_SYMMETRIC_ENCRYPTION",
    "name": "Security - Hazelcast symmetric encryption",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The network communications for Hazelcast is configured to use a symmetric cipher (probably DES or blowfish).</p>\n<p>Those ciphers alone do not provide integrity or secure authentication. The use of asymmetric encryption is preferred.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://docs.hazelcast.org/docs/3.5/manual/html/encryption.html\">Hazelcast Documentation: Encryption</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HTTPONLY_COOKIE",
    "name": "Security - Cookie without the HttpOnly flag",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nA new cookie is created without the <code>HttpOnly</code> flag set.\nThe <code>HttpOnly</code> flag is a directive to the browser to make sure that the cookie can not be red by\nmalicious script. When a user is the target of a \"Cross-Site Scripting\", the attacker would benefit greatly from getting\nthe session id for example.\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nCookie cookie = new Cookie(\"email\",userName);\nresponse.addCookie(cookie);\n</pre>\n</p>\n\n<p>\n<b>Solution (Specific configuration):</b><br/>\n<pre>\nCookie cookie = new Cookie(\"email\",userName);\ncookie.setSecure(true);\ncookie.setHttpOnly(true); //HttpOnly flag\n</pre>\n</p>\n\n<p>\n<b>Solution (Servlet 3.0 configuration):</b><br/>\n<pre>\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" version=\"3.0\"&gt;\n[...]\n&lt;session-config&gt;\n &lt;cookie-config&gt;\n  &lt;http-only&gt;true&lt;/http-only&gt;\n  &lt;secure&gt;true&lt;/secure&gt;\n &lt;/cookie-config&gt;\n&lt;/session-config&gt;\n&lt;/web-app&gt;\n</pre>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://blog.codinghorror.com/protecting-your-cookies-httponly/\">Coding Horror blog: Protecting Your Cookies: HttpOnly</a><br/>\n<a href=\"https://www.owasp.org/index.php/HttpOnly\">OWASP: HttpOnly</a><br/>\n<a href=\"https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag\">Rapid7: Missing HttpOnly Flag From Cookie</a>\n</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "HTTP_PARAMETER_POLLUTION",
    "name": "Security - HTTP Parameter Pollution",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nConcatenating unvalidated user input into a URL can allow an attacker to override the value of a request parameter. Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform either client-side or server-side attacks.<br/>\nIn the following example the programmer has not considered the possibility that an attacker could provide a lang such as en&user_id=1, which would enable him to change the user_id at will.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>String lang = request.getParameter(\"lang\");\nGetMethod get = new GetMethod(\"http://www.host.com\");\nget.setQueryString(\"lang=\" + lang + \"&user_id=\" + user_id);\nget.execute();</pre>\n<p>\n    <b>Solution:</b><br/>\nSanitize user input before using it in HTTP parameters.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://capec.mitre.org/data/definitions/460.html\">CAPEC-460: HTTP Parameter Pollution (HPP)</a>\n</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "HTTP_RESPONSE_SPLITTING",
    "name": "Security - Potential HTTP Response Splitting",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\n    When an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream\n    that is interpreted as two different HTTP responses (instead of one).\n    An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.\n    According to OWASP, the issue has been fixed in virtually all modern Java EE application servers, but it is still better to validate the input.\n    If you are concerned about this risk, you should test on the platform of concern to see\n    if the underlying platform allows for CR or LF characters to be injected into headers.\n    This weakness is reported with lower priority than SQL injection etc.,\n    if you are using a vulnerable platform, please check low-priority warnings too.\n</p>\n<br/>\n<p>\n<b>Code at risk:</b><br/>\n<pre>String author = request.getParameter(AUTHOR_PARAMETER);\n// ...\nCookie cookie = new Cookie(\"author\", author);\nresponse.addCookie(cookie);</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.owasp.org/index.php/HTTP_Response_Splitting\">OWASP: HTTP Response Splitting</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/113.html\">CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</a>\n    <a href=\"http://cwe.mitre.org/data/definitions/93.html\">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "INSECURE_COOKIE",
    "name": "Security - Cookie without the secure flag",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nA new cookie is created without the <code>Secure</code> flag set.\nThe <code>Secure</code> flag is a directive to the browser to make sure that the cookie is not sent for insecure\ncommunication (<code>http://</code>).\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nCookie cookie = new Cookie(\"userName\",userName);\nresponse.addCookie(cookie);\n</pre>\n</p>\n\n<p>\n<b>Solution (Specific configuration):</b><br/>\n<pre>\nCookie cookie = new Cookie(\"userName\",userName);\ncookie.setSecure(true); // Secure flag\ncookie.setHttpOnly(true);\n</pre>\n</p>\n\n<p>\n<b>Solution (Servlet 3.0 configuration):</b><br/>\n<pre>\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" version=\"3.0\"&gt;\n[...]\n&lt;session-config&gt;\n &lt;cookie-config&gt;\n  &lt;http-only&gt;true&lt;/http-only&gt;\n  &lt;secure&gt;true&lt;/secure&gt;\n &lt;/cookie-config&gt;\n&lt;/session-config&gt;\n&lt;/web-app&gt;\n</pre>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/315.html\">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/311.html\">CWE-311: Missing Encryption of Sensitive Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/SecureFlag\">OWASP: Secure Flag</a><br/>\n<a href=\"https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag\">Rapid7: Missing Secure Flag From SSL Cookie</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "INSECURE_SMTP_SSL",
    "name": "Security - Insecure SMTP SSL connection",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nServer identity verification is disabled when making SSL connections. Some email libraries that enable SSL connections do not verify the server certificate by default. This is equivalent to trusting all certificates. When trying to connect to the server, this application would readily accept a certificate issued to \"hackedserver.com\". The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>...\nEmail email = new SimpleEmail();\nemail.setHostName(\"smtp.servermail.com\");\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true);\nemail.setFrom(\"user@gmail.com\");\nemail.setSubject(\"TestMail\");\nemail.setMsg(\"This is a test mail ... :-)\");\nemail.addTo(\"foo@bar.com\");\nemail.send();\n...</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nPlease add the following check to verify the server cerfiticate:\n<pre>email.setSSLCheckServerIdentity(true);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/297.html\">CWE-297: Improper Validation of Certificate with Host Mismatch</a><br/>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "JACKSON_UNSAFE_DESERIALIZATION",
    "name": "Security - Unsafe Jackson deserialization configuration",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>When the Jackson databind library is used incorrectly the deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows the trigger of malicious operation.\n\n<p>\n<b>Solutions:</b><br/>\n<p>\nExplicitly define what types and subtypes you want to be available when using polymorphism through JsonTypeInfo.Id.NAME.\nAlso, never call ObjectMapper.<strong>enableDefaultTyping</strong> (and then readValue a type that holds a Object or Serializable or Comparable or a known deserialization type).\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic class Example {\n    static class ABean {\n        public int id;\n        public Object obj;\n    }\n\n    static class AnotherBean {\n        @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS) // or JsonTypeInfo.Id.MINIMAL_CLASS\n        public Object obj;\n    }\n\n    public void example(String json) throws JsonMappingException {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.enableDefaultTyping();\n         mapper.readValue(json, ABean.class);\n    }\n\n    public void exampleTwo(String json) throws JsonMappingException {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.readValue(json, AnotherBean.class);\n    }\n\n}\n</pre>\n</p>\n\n<p>\n<b>References</b><br/>\n<a href=\"https://github.com/FasterXML/jackson-databind/issues/1599\">Jackson Deserializer security vulnerability</a><br>\n<a href=\"https://github.com/mbechler/marshalsec\">Java Unmarshaller Security - Turning your data into code execution</a><br>\n</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "JAXRS_ENDPOINT",
    "name": "Security - Found JAX-RS REST endpoint",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>This method is part of a REST Web Service (JSR311).</p>\n<p>\n<b>The security of this web service should be analyzed. For example:</b>\n<ul>\n<li>Authentication, if enforced, should be tested.</li>\n<li>Access control, if enforced, should be tested.</li>\n<li>The inputs should be tracked for potential vulnerabilities.</li>\n<li>The communication should ideally be over SSL.</li>\n<li>If the service supports writes (e.g., via POST), its vulnerability to CSRF should be investigated.<sup>[1]</sup></li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet\">OWASP: REST Assessment Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\">OWASP: REST Security Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet\">OWASP: Web Service Security Cheat Sheet</a><br/>\n1. <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "JAXWS_ENDPOINT",
    "name": "Security - Found JAX-WS SOAP endpoint",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>This method is part of a SOAP Web Service (JSR224).</p>\n<p>\n<b>The security of this web service should be analyzed. For example:</b>\n<ul>\n<li>Authentication, if enforced, should be tested.</li>\n<li>Access control, if enforced, should be tested.</li>\n<li>The inputs should be tracked for potential vulnerabilities.</li>\n<li>The communication should ideally be over SSL.</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet\">OWASP: Web Service Security Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LDAP_ANONYMOUS",
    "name": "Security - Anonymous LDAP bind",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nWithout proper access control, executing an LDAP statement that contains a user-controlled value can allow an attacker to abuse poorly configured LDAP environment. All LDAP queries executed against ctx will be performed without authentication and access control. An attacker may be able to manipulate one of these queries in an unexpected way to gain access to records that would otherwise be protected by the directory's access control mechanism.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>...\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\");\nDirContext ctx = new InitialDirContext(env);\n...</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<br/>\nConsider other modes of authentication to LDAP and ensure proper access control mechanism.\n\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html\">Ldap Authentication Mechanisms</a><br/>\n</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "LDAP_ENTRY_POISONING",
    "name": "Security - LDAP Entry Poisoning",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nJNDI API support the binding of serialize object in LDAP directories. If certain attributes are presented, the deserialization\nof object will be made in the application querying the directory (See Black Hat USA 2016 white paper for details).\nObject deserialization should be threated as risky operation that can lead to remote code execution.\n</p>\n<p>\nThe exploitation of the vulnerability will be possible if the attacker has an entry point in an LDAP base query, by adding\nattributes to an existing LDAP entry or by configuring the application to use a malicious LDAP server.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>\nDirContext ctx = new InitialDirContext();\n//[...]\n\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, //Enable object deserialization if bound in directory\n            deref));\n</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<pre>\nDirContext ctx = new InitialDirContext();\n//[...]\n\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false, //Disable\n            deref));\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">Black Hat USA 2016: A Journey From JNDI/LDAP Manipulation to Remote Code Execution Dream Land</a>\n(<a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf\">slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=Y8a5nB-vy78\">video</a>) by Alvaro Mu&#xF1;oz and Oleksandr Mirosh<br/>\n<a href=\"https://community.hpe.com/t5/Security-Research/Introducing-JNDI-Injection-and-LDAP-Entry-Poisoning/ba-p/6885118\">HP Enterprise: Introducing JNDI Injection and LDAP Entry Poisoning</a> by Alvaro Mu&#xF1;oz<br/>\n<a href=\"http://blog.trendmicro.com/trendlabs-security-intelligence/new-headaches-how-the-pawn-storm-zero-day-evaded-javas-click-to-play-protection/\">TrendMicro: How The Pawn Storm Zero-Day Evaded Java's Click-to-Play Protection</a> by Jack Tang\n</p>",
    "tags": [
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LDAP_INJECTION",
    "name": "Security - Potential LDAP Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nJust like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn't have prepared statement interfaces like SQL.\nTherefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n    <pre>NamingEnumeration&lt;SearchResult&gt; answers = context.search(\"dc=People,dc=example,dc=com\",\n        \"(uid=\" + username + \")\", ctrls);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246947/LDAP%20Injection\">WASC-29: LDAP Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/90.html\">CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</a><br/>\n<a href=\"http://www.veracode.com/security/ldap-injection\">LDAP Injection Guide: Learn How to Detect LDAP Injections and Improve LDAP Security</a>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MALICIOUS_XSLT",
    "name": "Security - A malicious XSLT could be provided",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    \"XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents\".<sup>[1]</sup><br/>\n    It is possible to attach malicious behavior to those stylesheets. Therefore, if an attacker can control the content or the source of the\n    stylesheet, he might be able to trigger remote code execution.<sup>[2]</sup>\n</p>\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nSource xslt = new StreamSource(new FileInputStream(inputUserFile)); //Dangerous source to validate\n\nTransformer transformer = TransformerFactory.newInstance().newTransformer(xslt);\n\nSource text = new StreamSource(new FileInputStream(\"/data_2_process.xml\"));\ntransformer.transform(text, new StreamResult(...));\n</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\n<p>\nThe solution would be to make sure the stylesheet is loaded from a safe sources and make sure that vulnerabilities such as\nPath traversal <sup>[3][4]</sup> are not possible.\n</p>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://en.wikipedia.org/wiki/XSLT\">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>\n<a href=\"https://prezi.com/y_fuybfudgnd/offensive-xslt/\">Offensive XSLT</a> by Nicolas Gregoire<br/>\n[2] <a href=\"http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html\">From XSLT code execution to Meterpreter shells</a> by Nicolas Gregoire<br/>\n<a href=\"http://xhe.myxwiki.org/xwiki/bin/view/Main/\">XSLT Hacking Encyclopedia</a> by Nicolas Gregoire<br/>\n<a href=\"http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/\">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>\n<a href=\"https://www.w3.org/TR/xslt\">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>\n[3] <a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n[4] <a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n</p>",
    "tags": [
      "injection",
      "owasp-a1",
      "owasp-a4",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NULL_CIPHER",
    "name": "Security - NullCipher is insecure",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nThe NullCipher is rarely used intentionally in production applications. It implements the Cipher interface by returning ciphertext \nidentical to the supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>Cipher doNothingCihper = new NullCipher();\n[...]\n//The ciphertext produced will be identical to the plaintext.\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    Avoid using the NullCipher. Its accidental use can introduce a significant confidentiality risk.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OBJECT_DESERIALIZATION",
    "name": "Security - Object deserialization is used in {1}",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows\n    the trigger of malicious operation.\n</p>\n<p>\n    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are\n    known to trigger Denial of Service<sup>[1]</sup>.\n</p>\n<p>\n    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might\n    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {\n\n    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {\n        return (UserData) in.readObject();\n    }\n}\n</pre>\n</p>\n\n<p>\n<b>Solutions:</b><br/>\n<p>\nAvoid deserializing object provided by remote users.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502: Deserialization of Untrusted Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a><br/>\n<a href=\"http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8\">Serialization and Deserialization </a><br/>\n<a href=\"https://github.com/frohoff/ysoserial\">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>\n[1] <a href=\"https://gist.github.com/coekie/a27cc406fc9f3dc7a70d\">Example of Denial of Service using the class java.util.HashSet</a><br/>\n[2] <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590\">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>\n[3] <a href=\"https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize\">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OGNL_INJECTION",
    "name": "Security - Potential code injection when using OGNL expression",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void getUserProperty(String property) {\n  [...]\n  //The first argument is the dynamic expression.\n  return ognlUtil.getValue(\"user.\"+property, ctx, root, String.class);\n}\n</pre>\n</p>\n<p><b>Solution:</b></p>\n<p>\nIn general, method evaluating OGNL expression should not received user input. It is intented to be used in static configurations and JSP.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://community.saas.hpe.com/t5/Security-Research/Struts-2-OGNL-Expression-Injections/ba-p/288881\">HP Enterprise: Struts 2 OGNL Expression Injections by Alvaro Mu&Atilde;&plusmn;oz</a><br/>\n    <a href=\"https://blog.gdssecurity.com/labs/2017/3/27/an-analysis-of-cve-2017-5638.html\">Gotham Digital Science: An Analysis Of CVE-2017-5638</a><br/>\n    <a href=\"http://struts.apache.org/docs/s2-016.html\">Apache Struts2: Vulnerability S2-016</a><br/>\n    <a href=\"https://struts.apache.org/docs/ognl.html\">Apache Struts 2 Documentation: OGNL</a><br/>\n</p>",
    "tags": [
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PADDING_ORACLE",
    "name": "Security - Cipher is susceptible to Padding Oracle",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the\n    message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between\n    valid and invalid padding is usually revealed through distinct error messages being returned for each condition.\n</p>\n<p>\n    <b>Code at risk:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://www.infobytesec.com/down/paddingoracle_openjam.pdf\">Padding Oracles for the masses (by Matias Soler)</a><br/>\n    <a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n    <a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n    <a href=\"http://capec.mitre.org/data/definitions/463.html\">CAPEC: Padding Oracle Crypto Attack</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/696.html\">CWE-696: Incorrect Behavior Order</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PATH_TRAVERSAL_IN",
    "name": "Security - Potential Path Traversal (file read)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter. \nIf an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>\n<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled\nby the user. If that is the case, the reported instance is a false positive.</p>\n<br/>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>@GET\n@Path(\"/images/{image}\")\n@Produces(\"images/*\")\npublic Response getImage(@javax.ws.rs.PathParam(\"image\") String image) {\n    File file = new File(\"resources/images/\", image); //Weak point\n\n    if (!file.exists()) {\n        return Response.status(Status.NOT_FOUND).build();\n    }\n\n    return Response.ok().entity(new FileInputStream(file)).build();\n}</pre>\n</p>\n<br/>\n\n<p>\n    <b>Solution:</b><br/>\n<pre>import org.apache.commons.io.FilenameUtils;\n\n@GET\n@Path(\"/images/{image}\")\n@Produces(\"images/*\")\npublic Response getImage(@javax.ws.rs.PathParam(\"image\") String image) {\n    File file = new File(\"resources/images/\", FilenameUtils.getName(image)); //Fix\n\n    if (!file.exists()) {\n        return Response.status(Status.NOT_FOUND).build();\n    }\n\n    return Response.ok().entity(new FileInputStream(file)).build();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>\n</p>",
    "tags": [
      "cwe",
      "owasp-a4",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PATH_TRAVERSAL_OUT",
    "name": "Security - Potential Path Traversal (file write)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter. \nIf an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>\n<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled\nby the user. If that is the case, the reported instance is a false positive.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC-33: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>\n</p>",
    "tags": [
      "cwe",
      "owasp-a4",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PERMISSIVE_CORS",
    "name": "Security - Overly permissive CORS policy",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nPrior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for JavaScript to access the contents of a Web page, both the JavaScript and the Web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible for JavaScript to access data across domains if a new HTTP header called Access-Control-Allow-Origin is defined. With this header, a Web server defines which other domains are allowed to access its domain using cross-origin requests. However, caution should be taken when defining the header because an overly permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>response.addHeader(\"Access-Control-Allow-Origin\", \"*\");</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<br/>\nAvoid using * as the value of the Access-Control-Allow-Origin header, which indicates that the application's data is accessible to JavaScript running on any domain.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.w3.org/TR/cors/\">W3C Cross-Origin Resource Sharing</a><br/>\n<a href=\"http://enable-cors.org/\">Enable Cross-Origin Resource Sharing</a><br/>\n</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "PLAY_UNVALIDATED_REDIRECT",
    "name": "Security - Unvalidated Redirect (Play Framework)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied\n    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.\n</p>\n<p>\n    <b>Scenario</b><br/>\n    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>\n    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>\n    3. The user enters his credentials.<br/>\n    4. The evil site steals the user's credentials and redirects him to the original website.<br/>\n    <br/>\n    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to\n    an authentication page is very common.\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>def login(redirectUrl:String) = Action {\n    [...]\n    Redirect(url)\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don't accept redirection destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>Accept only relative paths</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse\">WASC-38: URL Redirector Abuse</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards\">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>\n<a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/601.html\">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>\n</p>",
    "tags": [
      "cwe",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PREDICTABLE_RANDOM",
    "name": "Security - Predictable pseudorandom number generator",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>\n<ul>\n<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>\n<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the change password form</li>\n<li>any other secret value</li>\n</ul>\n<p>\nA quick fix could be to replace the use of <b>java.util.Random</b> with something stronger, such as <b>java.security.SecureRandom</b>.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\n<pre>String generateSecretToken() {\n    Random r = new Random();\n    return Long.toHexString(r.nextLong());\n}</pre>\n</p>\n<p>\n<b>Solution:</b>\n<pre>import org.apache.commons.codec.binary.Hex;\n\nString generateSecretToken() {\n    SecureRandom secRandom = new SecureRandom();\n\n    byte[] result = new byte[32];\n    secRandom.nextBytes(result);\n    return Hex.encodeHexString(result);\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html\">Cracking Random Number Generators - Part 1 (http://jazzy.id.au)</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers\">CERT: MSC02-J. Generate strong random numbers</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/330.html\">CWE-330: Use of Insufficiently Random Values</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html\">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "REDOS",
    "name": "Security - Regex DOS (ReDOS)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    Regular expressions (regexs) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines \n    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.\n<p>\n    For example, for the regex: <b>^(a+)+$</b>, the input \"<code>aaaaaaaaaaaaaaaaX</code>\" will cause the regex engine to analyze 65536 \ndifferent paths.<sup>[1] Example taken from OWASP references</sup></p>\n<p>\nTherefore, it is possible that a single request may cause a large amount of computation on the server side. \nThe problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the \nRegex due to the + (or a *) inside the parenthesis, and the + (or a *) outside the parenthesis. The way this is written, either + could \nconsume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be \nrewritten as: <b>^a+$</b>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original \nregex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://www.jroller.com/sebastianKuebeck/entry/detecting_and_preventing_redos_vulnerabilities\">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>\n<sup>[1]</sup> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">OWASP: Regular expression Denial of Service</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/400.html\">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RSA_KEY_SIZE",
    "name": "Security - RSA usage with short key",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    The NIST recommends the use of <u>2048 bits and higher</u> keys for the RSA algorithm.\n</p>\n<blockquote>\n    \"Digital Signature Verification | RSA: 1024 &le; len(n) &lt; 2048 | Legacy-use\"<br/>\n    \"Digital Signature Verification | RSA: len(n) &ge; 2048 | Acceptable\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a>\n</blockquote>\n\n<p><b>Vulnerable Code:</b><br/>\n<pre>\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyGen.initialize(512);\n</pre>\n</p>\n\n<p><b>Solution:</b><br/>\nThe KeyPairGenerator creation should be as follows with at least 2048 bit key size.<br/>\n<pre>\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyGen.initialize(2048);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/key_management.html\">NIST: Latest publication on key management</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a><br/>\n<a href=\"http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/how-large-a-key-should-be-used.htm\">RSA Laboratories: 3.1.5 How large a key should be used in the RSA cryptosystem?</a><br/>\n<a href=\"http://en.wikipedia.org/wiki/Key_size#Asymmetric%5Falgorithm%5Fkey%5Flengths\">Wikipedia: Asymmetric algorithm key lengths</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a><br/>\n<a href=\"http://www.keylength.com/en/compare/\">Keylength.com (BlueKrypt): Aggregate key length recommendations.</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RSA_NO_PADDING",
    "name": "Security - RSA with no padding is insecure",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nThe software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\n<pre>Cipher.getInstance(\"RSA/NONE/NoPadding\")</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nThe code should be replaced with:<br/>\n<pre>Cipher.getInstance(\"RSA/ECB/OAEPWithMD5AndMGF1Padding\")</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/780.html\">CWE-780: Use of RSA Algorithm without OAEP</a><br/>\n<a href=\"http://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/\">Root Labs: Why RSA encryption padding is critical</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SCRIPT_ENGINE_INJECTION",
    "name": "Security - Potential code injection when using Script Engine",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    Dymanic code is being evaluate. A careful analysis of the code construction should be made. Malicious code execution\n    could lead to data leakage or operating system compromised.\n</p>\n<p>\n    If the evaluation of user code is intended, a proper sandboxing should be applied (see references).\n</p>\n\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void runCustomTrigger(String script) {\n    ScriptEngineManager factory = new ScriptEngineManager();\n    ScriptEngine engine = factory.getEngineByName(\"JavaScript\");\n\n    engine.eval(script); //Bad things can happen here.\n}</pre>\n</p>\n\n<p><b>Solution:</b></p>\n<p>\nSafe evaluation of Javascript code using \"Cloudbees Rhino Sandbox\" library.<br/>\n<pre>\npublic void runCustomTrigger(String script) {\n    SandboxContextFactory contextFactory = new SandboxContextFactory();\n    Context context = contextFactory.makeContext();\n    contextFactory.enterContext(context);\n    try {\n        ScriptableObject prototype = context.initStandardObjects();\n        prototype.setParentScope(null);\n        Scriptable scope = context.newObject(prototype);\n        scope.setPrototype(prototype);\n\n        context.evaluateString(scope,script, null, -1, null);\n    } finally {\n        context.exit();\n    }\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://github.com/cloudbees/rhino-sandbox\">Cloudbees Rhino Sandbox</a>: Utility to create sandbox with Rhino (block access to all classes)<br/>\n<a href=\"http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/\">CodeUtopia.net: Sandboxing Rhino in Java</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n<a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SEAM_LOG_INJECTION",
    "name": "Security - Potential code injection in Seam logging call",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    Seam Logging API support an expression language to introduce bean property to log messages. The expression language can\n    also be the source to unwanted code execution.\n</p>\n<p>\n    In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>public void logUser(User user) {\n    log.info(\"Current logged in user : \" + user.getUsername());\n    //...\n}</pre>\n</p>\n<p><b>Solution:</b></p>\n<p>\n<pre>public void logUser(User user) {\n    log.info(\"Current logged in user : #0\", user.getUsername());\n    //...\n}</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://issues.jboss.org/browse/JBSEAM-5130\">JBSEAM-5130: Issue documenting the risk</a><br/>\n    <a href=\"https://docs.jboss.org/seam/2.3.1.Final/reference/html_single/#d0e4185\">JBoss Seam: Logging (Official documentation)</a><br/>\n    <a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html\">The Java EE 6 Tutorial: Expression Language</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_CONTENT_TYPE",
    "name": "Security - Untrusted Content-Type header",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\nThe HTTP header Content-Type can be controlled by the client. As such, its value should not be used in any security critical decisions.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_HEADER",
    "name": "Security - HTTP headers untrusted",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>Request headers can easily be altered by the requesting user. In general, no assumption should be made that \nthe request came from a regular browser without modification by an attacker. As such, it is recommended that you \nnot trust this value in any security decisions you make with respect to a request.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_HEADER_REFERER",
    "name": "Security - Untrusted Referer header",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\nBehavior:\n<ul>\n<li>Any value can be assigned to this header if the request is coming from a malicious user.</li>\n<li>The \"Referer\" will not be present if the request was initiated from another origin that is secure (https).</li>\n</ul>\n</p>\n<p>\nRecommendations:\n<ul>\n<li>No access control should be based on the value of this header.</li>\n<li>No CSRF protection should be based only on this value (<a href=\"http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14\">because it is optional</a>).</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_HEADER_USER_AGENT",
    "name": "Security - Untrusted User-Agent header",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>The header \"User-Agent\" can easily be spoofed by the client. Adopting different behaviors based on the User-Agent (for\ncrawler UA) is not recommended.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_PARAMETER",
    "name": "Security - Untrusted servlet parameter",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>The Servlet can read GET and POST parameters from various methods. The value obtained should be considered unsafe.\nYou may need to validate or sanitize those values before passing them to sensitive APIs such as:</p>\n<ul>\n<li>SQL query (May lead to SQL injection)</li>\n<li>File opening (May lead to path traversal)</li>\n<li>Command execution (Potential Command injection)</li>\n<li>HTML construction (Potential XSS)</li>\n<li>etc...</li>\n</ul>\n\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_QUERY_STRING",
    "name": "Security - Untrusted query string",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>The query string is the concatenation of the GET parameter names and values. Parameters other than those intended can\nbe passed in.</p>\n<p>For the URL request <code>/app/servlet.htm?a=1&b=2</code>, the query string extract will be <code>a=1&b=2</code></p>\n<p>Just as is true for individual parameter values retrieved via methods like <code>HttpServletRequest.getParameter()</code>, \nthe value obtained from <code>HttpServletRequest.getQueryString()</code> should be considered unsafe.\nYou may need to validate or sanitize anything pulled from the query string before passing it to sensitive APIs. \n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_SERVER_NAME",
    "name": "Security - Untrusted Hostname header",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>The hostname header can be controlled by the client. As such, its value should not be used in any security critical decisions. \nBoth <code>ServletRequest.getServerName()</code> and <code>HttpServletRequest.getHeader(\"Host\")</code> have the same \nbehavior which is to extract the <code>Host</code> header.</p>\n<pre>\nGET /testpage HTTP/1.1\nHost: www.example.com\n[...]</pre>\n<p>\nThe web container serving your application may redirect requests to your application by default. This would allow\na malicious user to place any value in the Host header. It is recommended that you do not trust this value in any security\ndecisions you make with respect to a request.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SERVLET_SESSION_ID",
    "name": "Security - Untrusted session cookie value",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\nThe method <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRequestedSessionId()\"><code>HttpServletRequest.getRequestedSessionId()</code></a>\ntypically returns the value of the cookie <code>JSESSIONID</code>. This value is normally only accessed by the session management logic and not normal developer code.\n</p>\n<p>\nThe value passed to the client is generally an alphanumeric value (e.g., <code>JSESSIONID=jp6q31lq2myn</code>). However, the value can be altered by the client. \nThe following HTTP request illustrates the potential modification.\n<pre>\nGET /somePage HTTP/1.1\nHost: yourwebsite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Any value of the user&#39;s choice!!??'''&quot;&gt;\n</pre>\n</p>\n<p>As such, the JSESSIONID should only be used to see if its value matches an existing session ID. If it does not, the user should be \nconsidered an unauthenticated user. In addition, the session ID value should never be logged. If it is, then the log file could contain \nvalid active session IDs, allowing an insider to hijack any sessions whose IDs have been logged and are still active.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet\">OWASP: Session Management Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SPEL_INJECTION",
    "name": "Security - Potential code injection when using Spring Expression",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void parseExpressionInterface(Person personObj,String property) {\n\n        ExpressionParser parser = new SpelExpressionParser();\n\n        //Unsafe if the input is control by the user..\n        Expression exp = parser.parseExpression(property+\" == 'Albert'\");\n\n        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);\n        boolean result = exp.getValue(testContext, Boolean.class);\n[...]</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n    <a href=\"http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html\">Spring Expression Language (SpEL) - Official Documentation</a><br/>\n    <a href=\"https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf\">Minded Security: Expression Language Injection</a><br/>\n    <a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SPRING_CSRF_PROTECTION_DISABLED",
    "name": "Security - Spring CSRF protection disabled",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>Disabling Spring Security's CSRF protection is unsafe for standard web applications.</p>\n<p>A valid use case for disabling this protection would be a service exposing state-changing operations\nthat is guaranteed to be used only by non-browser clients.</p>\n<p>\n    <b>Insecure configuration:</b><br/>\n<pre>@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf().disable();\n    }\n}</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#when-to-use-csrf-protection\">Spring Security Official Documentation: When to use CSRF protection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
    "name": "Security - Spring CSRF unrestricted RequestMapping",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>Methods annotated with <code>RequestMapping</code> are by default mapped to all the HTTP request methods.\nHowever, Spring Security's CSRF protection is not enabled by default\nfor the HTTP request methods <code>GET</code>, <code>HEAD</code>, <code>TRACE</code>, and <code>OPTIONS</code>\n(as this could cause the tokens to be leaked).\nTherefore, state-changing methods annotated with <code>RequestMapping</code> and not narrowing the mapping\nto the HTTP request methods <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, or <code>PATCH</code>\nare vulnerable to CSRF attacks.</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>@Controller\npublic class UnsafeController {\n\n    @RequestMapping(\"/path\")\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n    <b>Solution (Spring Framework 4.3 and later):</b><br/>\n<pre>@Controller\npublic class SafeController {\n\n    /**\n     * For methods without side-effects use @GetMapping.\n     */\n    @GetMapping(\"/path\")\n    public String readData() {\n        // No state-changing operations performed within this method.\n        return \"\";\n    }\n\n    /**\n     * For state-changing methods use either @PostMapping, @PutMapping, @DeleteMapping, or @PatchMapping.\n     */\n    @PostMapping(\"/path\")\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n    <b>Solution (Before Spring Framework 4.3):</b><br/>\n<pre>@Controller\npublic class SafeController {\n\n    /**\n     * For methods without side-effects use either\n     * RequestMethod.GET, RequestMethod.HEAD, RequestMethod.TRACE, or RequestMethod.OPTIONS.\n     */\n    @RequestMapping(value = \"/path\", method = RequestMethod.GET)\n    public String readData() {\n        // No state-changing operations performed within this method.\n        return \"\";\n    }\n\n    /**\n     * For state-changing methods use either\n     * RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, or RequestMethod.PATCH.\n     */\n    @RequestMapping(value = \"/path\", method = RequestMethod.POST)\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official Documentation: Use proper HTTP verbs (CSRF protection)</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SPRING_ENDPOINT",
    "name": "Security - Found Spring endpoint",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely.\nThis class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "SPRING_FILE_DISCLOSURE",
    "name": "Security - Spring File Disclosure",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nConstructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>\nAn attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting \"http://example.com/?returnURL=WEB-INF/applicationContext.xml\" would display the application's applicationContext.xml file. The attacker would be able to locate and download the applicationContext.xml referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>... \nString returnURL = request.getParameter(\"returnURL\");\nreturn new ModelAndView(returnURL); \n...</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid constructing server-side redirects using user controlled input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/552.html\">CWE-552: Files or Directories Accessible to External Parties</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SPRING_UNVALIDATED_REDIRECT",
    "name": "Security - Spring Unvalidated Redirect",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied\n    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.\n</p>\n<p>\n    <b>Scenario</b><br/>\n    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>\n    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>\n    3. The user enters his credentials.<br/>\n    4. The evil site steals the user's credentials and redirects him to the original website.<br/>\n    <br/>\n    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to\n    an authentication page is very common.\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>@RequestMapping(\"/redirect\")\npublic String redirect(@RequestParam(\"url\") String url) {\n    [...]\n    return \"redirect:\" + url;\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don't accept redirection destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>Accept only relative paths</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse\">WASC-38: URL Redirector Abuse</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards\">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>\n<a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/601.html\">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>\n</p>",
    "tags": [
      "cwe",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION",
    "name": "Security - Potential SQL Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\nAlternatively to prepare statements, each parameter can be escaped manually.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\ncreateQuery(\"select * from User where id = '\"+inputId+\"'\");\n</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n\n    <pre>\nimport org.owasp.esapi.Encoder;\n\ncreateQuery(\"select * from User where id = '\"+Encoder.encodeForSQL(inputId)+\"'\");\n</pre>\n</p>\n<br/>\n<p>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION_ANDROID",
    "name": "Security - Potential Android SQL Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>String query = \"SELECT * FROM  messages WHERE uid= '\"+userInput+\"'\" ;\nCursor cursor = this.getReadableDatabase().rawQuery(query,null);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>String query = \"SELECT * FROM  messages WHERE uid= ?\" ;\nCursor cursor = this.getReadableDatabase().rawQuery(query,new String[] {userInput});</pre>\n</p>\n<br/>\n\n<b>References (Android SQLite)</b><br/>\n<a href=\"http://www.informit.com/articles/article.aspx?p=2268753&seqNum=5\">InformIT.com: Practical Advice for Building Secure Android Databases in SQLite</a><br/>\n<a href=\"https://www.packtpub.com/books/content/knowing-sql-injection-attacks-and-securing-our-android-applications-them\">Packtpub.com: Knowing the SQL-injection attacks and securing our Android applications from them</a><br/>\n<a href=\"https://books.google.ca/books?id=SXlMAQAAQBAJ&lpg=PR1&pg=PA64#v=onepage&q&f=false\">Android Database Support (Enterprise Android: Programming Android Database Applications for the Enterprise)</a><br/>\n<a href=\"https://stackoverflow.com/a/29797229/89769\">Safe example of Insert, Select, Update and Delete queryies provided by Suragch</a><br/>\n\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "android",
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION_HIBERNATE",
    "name": "Security - Potential SQL/HQL Injection (Hibernate)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\nAlternatively to prepare statements, Hibernate Criteria can be used.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\nSession session = sessionFactory.openSession();\nQuery q = session.createQuery(\"select t from UserEntity t where id = \" + input);\nq.execute();</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>\nSession session = sessionFactory.openSession();\nQuery q = session.createQuery(\"select t from UserEntity t where id = :userId\");\nq.setString(\"userId\",input);\nq.execute();</pre>\n</p>\n<p>\n    <b>Solution for dynamic queries (with Hibernate Criteria):</b><br/>\n    <pre>\nSession session = sessionFactory.openSession();\nQuery q = session.createCriteria(UserEntity.class)\n    .add( Restrictions.like(\"id\", input) )\n    .list();\nq.execute();</pre>\n</p>\n<br/>\n<p>\n<b>References (Hibernate)</b><br/>\n<a href=\"https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querycriteria.html\">Hibernate Documentation: Query Criteria</a><br/>\n<a href=\"https://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Query.html\">Hibernate Javadoc: Query Object</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/02/hql-for-pentesters.html\">HQL for pentesters</a>: Guideline to test if the suspected code is exploitable.<br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION_JDBC",
    "name": "Security - Potential JDBC Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>Connection conn = [...];\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(\"update COFFEES set SALES = \"+nbSales+\" where COF_NAME = '\"+coffeeName+\"'\");</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>Connection conn = [...];\nconn.prepareStatement(\"update COFFEES set SALES = ? where COF_NAME = ?\");\nupdateSales.setInt(1, nbSales);\nupdateSales.setString(2, coffeeName);</pre>\n</p>\n<br/>\n\n<b>References (JDBC)</b><br/>\n<a href=\"http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION_JDO",
    "name": "Security - Potential SQL/JDOQL Injection (JDO)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\nPersistenceManager pm = getPM();\n\nQuery q = pm.newQuery(\"select * from Users where name = \" + input);\nq.execute();</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>\nPersistenceManager pm = getPM();\n\nQuery q = pm.newQuery(\"select * from Users where name = nameParam\");\nq.declareParameters(\"String nameParam\");\nq.execute(input);</pre>\n</p>\n<br/>\n<p>\n<b>References (JDO)</b><br/>\n<a href=\"https://db.apache.org/jdo/object_retrieval.html\">JDO: Object Retrieval</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION_JPA",
    "name": "Security - Potential SQL/JPQL Injection (JPA)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\nEntityManager pm = getEM();\n\nTypedQuery&lt;UserEntity&gt; q = em.createQuery(\n    String.format(\"select * from Users where name = %s\", username),\n    UserEntity.class);\n\nUserEntity res = q.getSingleResult();</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>\nTypedQuery&lt;UserEntity&gt; q = em.createQuery(\n    \"select * from Users where name = usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res = q.getSingleResult();</pre>\n</p>\n<br/>\n<p>\n<b>References (JPA)</b><br/>\n<a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\">The Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION_SPRING_JDBC",
    "name": "Security - Potential JDBC Injection (Spring JDBC)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>JdbcTemplate jdbc = new JdbcTemplate();\nint count = jdbc.queryForObject(\"select count(*) from Users where name = '\"+paramName+\"'\", Integer.class);\n</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>JdbcTemplate jdbc = new JdbcTemplate();\nint count = jdbc.queryForObject(\"select count(*) from Users where name = ?\", Integer.class, paramName);</pre>\n</p>\n<br/>\n\n<b>References (Spring JDBC)</b><br/>\n<a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/jdbc.html\">Spring Official Documentation: Data access with JDBC</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQL_INJECTION_TURBINE",
    "name": "Security - Potential SQL Injection with Turbine",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\nTurbine API provide a DSL to build query with Java code.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\nList&lt;Record&gt; BasePeer.executeQuery( \"select * from Customer where id=\" + inputId );\n</pre>\n</p>\n<p>\n    <b>Solution (using Criteria DSL):</b><br/>\n\n    <pre>\nCriteria c = new Criteria();\nc.add( CustomerPeer.ID, inputId );\n\nList&lt;Customer&gt; customers = CustomerPeer.doSelect( c );\n</pre>\n\n    <b>Solution (using specialized method):</b><br/>\n\n<pre>\nCustomer customer = CustomerPeer.retrieveByPK( new NumberKey( inputId ) );\n</pre>\n\n    <b>Solution (using OWASP Encoder):</b><br/>\n\n    <pre>\nimport org.owasp.esapi.Encoder;\n\nBasePeer.executeQuery(\"select * from Customer where id = '\"+Encoder.encodeForSQL(inputId)+\"'\");\n</pre>\n</p>\n<br/>\n<p>\n<b>References (Turbine)</b><br/>\n<a href=\"https://turbine.apache.org/turbine/turbine-2.1/howto/criteria-howto.html\">Turbine Documentation: Criteria Howto</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SSL_CONTEXT",
    "name": "Security - Weak SSLContext",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>\n    SSLContext.getInstance(\"SSL\");\n</pre>\n</p>\n<p>\n<p><b>Solution:</b><br/>\n\nUpgrade your implementation to the following, and configure https.protocols JVM option to include TLSv1.2:</p>\n<pre>\n    SSLContext.getInstance(\"TLS\");\n</pre>\n<p>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https\">Diagnosing TLS, SSL, and HTTPS</a>\n</p>",
    "tags": [
      "cryptography",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "STATIC_IV",
    "name": "Security - Static IV",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    Initialization vector must be regenerated for each message to be encrypted.\n</p>\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nprivate static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};\n\npublic void encrypt(String message) throws Exception {\n\n    IvParameterSpec ivSpec = new IvParameterSpec(IV);\n[...]\n</pre>\n<p><b>Solution:</b></p>\n<p>\n<pre>\npublic void encrypt(String message) throws Exception {\n\n    byte[] iv = new byte[16];\n    new SecureRandom().nextBytes(iv);\n\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n[...]\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Initialization_vector\">Wikipedia: Initialization vector</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/329.html\">CWE-329: Not Using a Random IV with CBC Mode</a><br/>\n<a href=\"https://defuse.ca/cbcmodeiv.htm\">Encryption - CBC Mode IV: Secret or Not?</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "STRUTS1_ENDPOINT",
    "name": "Security - Found Struts 1 endpoint",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>This class is a Struts 1 Action.</p>\n<p>Once a request is routed to this controller, a Form object will automatically be instantiated that contains the HTTP parameters. \nThe use of these parameters should be reviewed to make sure they are used safely.</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "STRUTS2_ENDPOINT",
    "name": "Security - Found Struts 2 endpoint",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>In Struts 2, the endpoints are Plain Old Java Objects (POJOs) which means no Interface/Class needs to be implemented/extended.</p>\n<p>When a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn't include those values. \nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "STRUTS_FILE_DISCLOSURE",
    "name": "Security - Struts File Disclosure",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nConstructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>\nAn attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting \"http://example.com/?returnURL=WEB-INF/applicationContext.xml\" would display the application's applicationContext.xml file. The attacker would be able to locate and download the applicationContext.xml referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>... \nString returnURL = request.getParameter(\"returnURL\"); \nReturn new ActionForward(returnURL); \n...</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid constructing server-side redirects using user controlled input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/552.html\">CWE-552: Files or Directories Accessible to External Parties</a><br/>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "STRUTS_FORM_VALIDATION",
    "name": "Security - Struts Form without input validation",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>\nForm inputs should have minimal input validation. Preventive validation helps provide defense in depth against a variety of risks.\n</p>\n<p>\nValidation can be introduce by implementing a <code>validate</code> method.\n<pre>\npublic class RegistrationForm extends ValidatorForm {\n\n    private String name;\n    private String email;\n\n    [...]\n\n    public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {\n        //Validation code for name and email parameters passed in via the HttpRequest goes here\n    }\n}\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/106.html\">CWE-106: Struts: Plug-in Framework not in Use</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TAPESTRY_ENDPOINT",
    "name": "Security - Found Tapestry page",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>A Tapestry endpoint was discovered at application startup. Tapestry apps are structured with a backing Java class and a corresponding \nTapestry Markup Language page (a .tml file) for each page. When a request is received, the GET/POST parameters are mapped to specific \ninputs in the backing Java class. The mapping is either done with fieldName:</p>\n<pre><code>\n    [...]\n    protected String input;\n    [...]\n</code></pre>\n<p>or the definition of an explicit annotation:\n</p>\n<pre><code>\n    [...]\n    @org.apache.tapestry5.annotations.Parameter\n    protected String parameter1;\n\n    @org.apache.tapestry5.annotations.Component(id = \"password\")\n    private PasswordField passwordField;\n    [...]\n</code></pre>\n<p>The page is mapped to the view <code>[/resources/package/PageName].tml.</code></p>\n<p>Each Tapestry page in this application should be researched to make sure all inputs that are automatically \nmapped in this way are properly validated before they are used.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://tapestry.apache.org/\">Apache Tapestry Home Page</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TEMPLATE_INJECTION_FREEMARKER",
    "name": "Security - Potential template injection with Freemarker",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nFreemarker template engine is powerful. It is possible to add logic including condition statements, loops and external calls.\nIt is not design to be sandbox to templating operations. A malicious user in control of a template can run malicious code\non the server-side. Freemarker templates should be seen as scripts.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>Template template = cfg.getTemplate(inputTemplate);\n[...]\ntemplate.process(data, swOut);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<br/>\nAvoid letting end users manipulate templates with Freemarker. If you need to expose template editing to your users,\nprefer logic-less template engines such as Handlebars or Moustache (See references).\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blog.portswigger.net/2015/08/server-side-template-injection.html\">PortSwigger: Server-Side Template Injection </a><br/>\n<a href=\"https://jknack.github.io/handlebars.java/\">Handlebars.java</a><br/>\n</p>",
    "tags": [
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TEMPLATE_INJECTION_VELOCITY",
    "name": "Security - Potential template injection with Velocity",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nVelocity template engine is powerful. It is possible to add logic including condition statements, loops and external calls.\nIt is not design to be sandbox to templating operations. A malicious user in control of a template can run malicious code\non the server-side. Velocity templates should be seen as scripts.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>[...]\n\nVelocity.evaluate(context, swOut, \"test\", userInput);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<br/>\nAvoid letting end users manipulate templates with Velocity. If you need to expose template editing to your users,\nprefer logic-less template engines such as Handlebars or Moustache (See references).\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blog.portswigger.net/2015/08/server-side-template-injection.html\">PortSwigger: Server-Side Template Injection </a><br/>\n<a href=\"https://jknack.github.io/handlebars.java/\">Handlebars.java</a><br/>\n</p>",
    "tags": [
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TRUST_BOUNDARY_VIOLATION",
    "name": "Security - Trust Boundary Violation",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    \"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted.\n    On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data\n    to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a\n    program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the\n    same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.\" <sup>[1]</sup>\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic void doSomething(HttpServletRequest req, String activateProperty) {\n    //..\n\n    req.getSession().setAttribute(activateProperty,\"true\");\n\n}\n</pre>\n<br/>\n<pre>\npublic void loginEvent(HttpServletRequest req, String userSubmitted) {\n    //..\n\n    req.getSession().setAttribute(\"user\",userSubmitted);\n}\n</pre>\n</p>\n\n<p>\n<b>Solution:</b><br/>\n<p>\nThe solution would be to add validation prior setting a new session attribute. When possible, prefer data from\nsafe location rather than using direct user input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://cwe.mitre.org/data/definitions/501.html\">CWE-501: Trust Boundary Violation</a><br/>\n<a href=\"https://www.owasp.org/index.php/Trust_Boundary_Violation\">OWASP : Trust Boundary Violation</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UNENCRYPTED_SERVER_SOCKET",
    "name": "Security - Unencrypted Server Socket",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nThe communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\nPlain server socket (Cleartext communication):\n<pre>ServerSocket soc = new ServerSocket(1234);</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nSSL Server Socket (Secure communication):\n<pre>ServerSocket soc = SSLServerSocketFactory.getDefault().createServerSocket(1234);</pre>\n</p>\n<p>Beyond using an SSL server socket, you need to make sure your use of SSLServerSocketFactory does all the appropriate certificate validation checks to\nmake sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how\nto do this correctly.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2010-A9\">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>\n<a href=\"https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\">OWASP: Transport Layer Protection Cheat Sheet</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/319.html\">CWE-319: Cleartext Transmission of Sensitive Information</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UNENCRYPTED_SOCKET",
    "name": "Security - Unencrypted Socket",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nThe communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\nPlain socket (Cleartext communication):\n<pre>Socket soc = new Socket(\"www.google.com\",80);</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nSSL Socket (Secure communication):\n<pre>Socket soc = SSLSocketFactory.getDefault().createSocket(\"www.google.com\", 443);</pre>\n</p>\n<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to\nmake sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how\nto do this correctly.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2010-A9\">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>\n<a href=\"https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\">OWASP: Transport Layer Protection Cheat Sheet</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/319.html\">CWE-319: Cleartext Transmission of Sensitive Information</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UNVALIDATED_REDIRECT",
    "name": "Security - Unvalidated Redirect",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\n    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied\n    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.\n</p>\n<p>\n    <b>Scenario</b><br/>\n    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>\n    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>\n    3. The user enters his credentials.<br/>\n    4. The evil site steals the user's credentials and redirects him to the original website.<br/>\n    <br/>\n    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to\n    an authentication page is very common.\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    [...]\n    resp.sendRedirect(req.getParameter(\"redirectUrl\"));\n    [...]\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don't accept redirection destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>Accept only relative paths</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse\">WASC-38: URL Redirector Abuse</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards\">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>\n<a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/601.html\">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>\n</p>",
    "tags": [
      "cwe",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "URL_REWRITING",
    "name": "Security - URL rewriting method",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nThe implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>\nURL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>\n<ul>\n    <li>Log files,</li>\n    <li>The browser history,</li>\n    <li>By copy-and-pasting it into an e-mail or posting,</li>\n    <li>The HTTP Referrer.</li>\n</ul>\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>out.println(\"Click &lt;a href=\" + \n                res.encodeURL(HttpUtils.getRequestURL(req).toString()) + \n                \"&gt;here&lt;/a&gt;\");</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>\n</p>",
    "tags": [],
    "constantDebtMinutes": 5
  },
  {
    "key": "WEAK_FILENAMEUTILS",
    "name": "Security - FilenameUtils not filtering null bytes",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>Some FilenameUtils' methods don't filter NULL bytes (<code>0x00</code>).</p>\n<p>If a null byte is injected into a filename, if this filename is passed to the underlying OS, the file retrieved will be the\nname of the file that is specified prior to the NULL byte, since at the OS level, all strings are terminated by a null byte even\nthough Java itself doesn't care about null bytes or treat them special. This OS behavior can be used to bypass filename validation \nthat looks at the end of the filename (e.g., endswith \".log\") to make sure its a safe file to access.</p>\n<p>To fix this, two things are recommended:\n<ul>\n<li>Upgrade to Java 7 update 40 or later, or Java 8+ since  \n<a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8014846\">NULL byte injection in filenames is fixed in those versions</a>.</li>\n<li>Strongly validate any filenames provided by untrusted users to make sure they are valid (i.e., don't contain null, don't include path characters, etc.)</li>\n</ul>\n<p>If you know you are using a modern version of Java immune to NULL byte injection, you can probably disable this rule.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection\">WASC-28: Null Byte Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/158.html\">CWE-158: Improper Neutralization of Null Byte or NUL Character</a>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WEAK_HOSTNAME_VERIFIER",
    "name": "Security - HostnameVerifier that accept any signed certificates",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>A <code>HostnameVerifier</code> that accept any host are often use because of certificate reuse on many hosts.\nAs a consequence, this is vulnerable to\n<a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-middle attacks</a>\nsince the client will trust any certificate.\n</p>\n<p>\nA TrustManager allowing specific certificates (based on a truststore for example) should be built.\nWildcard certificates should be created for reused on multiples subdomains.\nDetailed information for a proper implementation is available at:\n<a href=\"http://stackoverflow.com/a/6378872/89769\">[1]</a>\n<a href=\"http://stackoverflow.com/a/5493452/89769\">[2]</a>\n</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>public class AllHosts implements HostnameVerifier {\n    public boolean verify(final String hostname, final SSLSession session) {\n        return true;\n    }\n}</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (TrustMangager based on a keystore):</b><br/>\n<pre>KeyStore ks = //Load keystore containing the certificates trusted\n\nSSLContext sc = SSLContext.getInstance(\"TLS\");\n\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\ntmf.init(ks);\n\nsc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WEAK_MESSAGE_DIGEST_MD5",
    "name": "Security - MD2, MD4 and MD5 are weak hash functions",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>\n\n<blockquote>\n    \"The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions\n    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a\n    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using\n    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]\"<br/>\n    - <a href=\"https://en.wikipedia.org/wiki/MD5#Security\">Wikipedia: MD5 - Security</a>\n</blockquote>\n\n<blockquote>\n    \"<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<blockquote>\n    \"The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time\n    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known\n    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,\n    it becomes harder to apply the dictionary or brute force attacks.\"<br/>\n- <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation  p.12</a>\n</blockquote>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>MessageDigest md5Digest = MessageDigest.getInstance(\"MD5\");\n    md5Digest.update(password.getBytes());\n    byte[] hashValue = md5Digest.digest();</pre>\n    <br/>\n    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (Using bouncy castle):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());\n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096);\n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();\n}</pre>\n    <br/>\n    <b>Solution (Java 8 and later):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    return f.generateSecret(spec).getEncoded();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n[1] <a href=\"http://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf\">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>\n[2] <a href=\"http://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf\">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>\n<a href=\"https://en.wikipedia.org/wiki/MD5\">Wikipedia: MD5</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation</a><br/>\n<a href=\"http://stackoverflow.com/questions/22580853/reliable-implementation-of-pbkdf2-hmac-sha256-for-java\">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WEAK_MESSAGE_DIGEST_SHA1",
    "name": "Security - SHA-1 is a weak hash function",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other\nuses. <b>PBKDF2</b> should be used to hash password for example.</p>\n\n<blockquote>\n    \"<b>SHA-1 for digital signature generation:</b><br/>\n    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.\n    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>\n    <b>SHA-1 for digital signature verification:</b><br/>\n    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>\n    [...]<br/>\n    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<blockquote>\n    \"The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time\n    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known\n    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,\n    it becomes harder to apply the dictionary or brute force attacks.\"<br/>\n- <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation  p.12</a>\n\n</blockquote>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>MessageDigest sha1Digest = MessageDigest.getInstance(\"SHA1\");\n    sha1Digest.update(password.getBytes());\n    byte[] hashValue = sha1Digest.digest();</pre>\n    <br/>\n    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (Using bouncy castle):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());\n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096);\n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();\n}</pre>\n    <br/>\n    <b>Solution (Java 8 and later):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    return f.generateSecret(spec).getEncoded();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know\">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>\n<a href=\"https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html\">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation</a><br/>\n<a href=\"http://stackoverflow.com/questions/22580853/reliable-implementation-of-pbkdf2-hmac-sha256-for-java\">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WEAK_TRUST_MANAGER",
    "name": "Security - TrustManager that accept any certificates",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root\n<a href=\"http://en.wikipedia.org/wiki/Certificate_authority\">certificate authority</a>. As a consequence, this is vulnerable to\n<a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-middle attacks</a>\nsince the client will trust any certificate.\n</p>\n<p>\nA TrustManager allowing specific certificates (based on a truststore for example) should be built.\nDetailed information for a proper implementation is available at:\n<a href=\"http://stackoverflow.com/a/6378872/89769\">[1]</a> \n<a href=\"http://stackoverflow.com/a/5493452/89769\">[2]</a>\n</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>class TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (TrustMangager based on a keystore):</b><br/>\n<pre>KeyStore ks = //Load keystore containing the certificates trusted\n\nSSLContext sc = SSLContext.getInstance(\"TLS\");\n\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\ntmf.init(ks);\n\nsc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a>\n</p>",
    "tags": [
      "cryptography",
      "cwe",
      "owasp-a6",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WICKET_ENDPOINT",
    "name": "Security - Found Wicket WebPage",
    "type": "VULNERABILITY",
    "severity": "INFO",
    "description": "<p>This class represents a Wicket WebPage. Input is automatically read from a PageParameters instance passed to the constructor. \nThe current page is mapped to the view [/package/WebPageName].html.</p>\n<p>Each Wicket page in this application should be researched to make sure all inputs that are automatically \nmapped in this way are properly validated before they are used.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://wicket.apache.org/\">Apache Wicket Home Page</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XML_DECODER",
    "name": "Security - XMLDecoder usage",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\n    XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution.\n    This is possible because XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods,\n    but in practice, any method can be called.\n</p>\n<p>\n    <b>Malicious XML example:</b>\n</p>\n<pre>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;java version=\"1.4.0\" class=\"java.beans.XMLDecoder\"&gt;\n  &lt;object class=\"java.io.PrintWriter\"&gt;\n    &lt;string>/tmp/Hacked.txt&lt;/string&gt;\n    &lt;void method=\"println\"&gt;\n      &lt;string>Hello World!&lt;/string&gt;\n    &lt;/void&gt;\n    &lt;void method=\"close\"/&gt;\n  &lt;/object&gt;\n&lt;/java&gt;\n</pre>\n<p>\nThe XML code above will cause the creation of a file with the content \"Hello World!\".\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>XMLDecoder d = new XMLDecoder(in);\ntry {\n    Object result = d.readObject();\n}\n[...]</pre>\n</p>\n<p>\n<b>Solution:</b></br/>\nThe solution is to avoid using XMLDecoder to parse content from an untrusted source.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html\">Dinis Cruz Blog: Using XMLDecoder to execute server-side Java Code on an Restlet application</a><br/>\n<a href=\"https://securityblog.redhat.com/2014/01/23/java-deserialization-flaws-part-2-xml-deserialization/\">RedHat blog : Java deserialization flaws: Part 2, XML deserialization</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XPATH_INJECTION",
    "name": "Security - Potential XPath Injection",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<p>\nXPath injection risks are similar to SQL injection. If the XPath query contains untrusted user input, the complete datasource\ncould be exposed. This could allow an attacker to access unauthorized data or maliciously modify the target XML.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-39: XPath Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/643.html\">CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250\">CERT: IDS09-J. Prevent XPath Injection (archive)</a><br/>\n<a href=\"http://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf\">Black Hat Europe 2012: Hacking XPath 2.0</a><br/>\n<a href=\"http://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html\">Balisage: XQuery Injection</a>\n</p>",
    "tags": [
      "cwe",
      "injection",
      "owasp-a1",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XSS_REQUEST_WRAPPER",
    "name": "Security - XSSRequestWrapper is a weak XSS protection",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nAn implementation of <code>HttpServletRequestWrapper</code> called <code>XSSRequestWrapper</code> was published through\nvarious blog sites. <sup><a href=\"http://java.dzone.com/articles/stronger-anti-cross-site\">[1]</a></sup>\n<sup><a href=\"http://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html\">[2]</a></sup>\n</p>\n<p>\nThe filtering is weak for a few reasons:\n<ul>\n<li>It covers only parameters not headers and side-channel inputs</li>\n<li>The replace chain can be bypassed easily (see example below)</li>\n<li>It's a black list of very specific bad patterns (rather than a white list of good/valid input)</li>\n</ul>\n</p>\n<p>\n<b>Example of bypass:</b><br/>\n</p>\n<pre>&lt;scrivbscript:pt&gt;alert(1)&lt;/scrivbscript:pt&gt;</pre>\n<p>\nThe previous input will be transformed into <b><code>\"&lt;script&gt;alert(1)&lt;/script&gt;\"</code></b>.\nThe removal of <code>\"vbscript:\"</code> is after the replacement of <code>\"&lt;script&gt;.*&lt;/script&gt;\"</code>.\n</p>\n<p>\nFor stronger protection, choose a solution that encodes characters automatically in the <b><u>view</u></b> (template, jsp, ...) following\nthe XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a>\n</p>",
    "tags": [
      "cwe",
      "owasp-a3",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XSS_SERVLET",
    "name": "Security - Potential XSS in Servlet",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>\nA potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String input1 = req.getParameter(\"input1\");\n    [...]\n    resp.getWriter().write(input1);\n}</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String input1 = req.getParameter(\"input1\");\n    [...]\n    resp.getWriter().write(Encode.forHtml(input1));\n}</pre>\n</p>\n<p>\nThe best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider: \nHTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,\nwhich explains these defenses in significant detail.\n</p>\n<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing \n'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>\n<a href=\"https://code.google.com/p/owasp-java-encoder/\">OWASP Java Encoder</a><br/>\n</p>",
    "tags": [
      "cwe",
      "owasp-a3",
      "wasc"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XXE_DOCUMENT",
    "name": "Security - XML parsing vulnerable to XXE (DocumentBuilder)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nDocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nDocumentBuilder db = dbf.newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nDocumentBuilder db = dbf.newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces2-j/features.html\">Xerces2 complete features list</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XXE_SAXPARSER",
    "name": "Security - XML parsing vulnerable to XXE (SAXParser)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nSAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nSAXParserFactory spf = SAXParserFactory.newInstance();\nspf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nSAXParser parser = spf.newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nSAXParserFactory spf = SAXParserFactory.newInstance();\nspf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nSAXParser parser = spf.newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces-j/features.html\">Xerces complete features list</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XXE_XMLREADER",
    "name": "Security - XML parsing vulnerable to XXE (XMLReader)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setContentHandler(customHandler);\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one property or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nreader.setContentHandler(customHandler);\n\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nreader.setContentHandler(customHandler);\n\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces-j/features.html\">Xerces complete features list</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "XXE_XMLSTREAMREADER",
    "name": "Security - XML parsing vulnerable to XXE (XMLStreamReader)",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>public void parseXML(InputStream input) throws XMLStreamException {\n\n    XMLInputFactory factory = XMLInputFactory.newFactory();\n    XMLStreamReader reader = factory.createXMLStreamReader(input);\n    [...]\n}</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one property or both.\n</p>\n\n<p><b>Solution disabling External Entities:</b></p>\n<p>\n<pre>public void parseXML(InputStream input) throws XMLStreamException {\n\n    XMLInputFactory factory = XMLInputFactory.newFactory();\n    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\n    XMLStreamReader reader = factory.createXMLStreamReader(input);\n    [...]\n}</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\n<pre>public void parseXML(InputStream input) throws XMLStreamException {\n\n    XMLInputFactory factory = XMLInputFactory.newFactory();\n    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n    XMLStreamReader reader = factory.createXMLStreamReader(input);\n    [...]\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://openjdk.java.net/jeps/185\">JEP 185: Restrict Fetching of External XML Resources</a>\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 5
  }
]