[
  {
    "key": "AbstractClassWithoutAbstractMethod",
    "name": "AbstractClassWithoutAbstractMethod",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The abstract class does not contain any abstract methods. An abstract class suggests\nan incomplete implementation, which is to be completed by subclasses implementing the\nabstract methods. If the class is intended to be used as a base class only (not to be instantiated\ndirectly) a protected constructor can be provided prevent direct instantiation.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic abstract class Foo {\n  void int method1() { ... }\n  void int method2() { ... }\n  // consider using abstract methods or removing\n  // the abstract modifier and adding protected constructors\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod"
  },
  {
    "key": "AbstractClassWithoutAnyMethod",
    "name": "AbstractClassWithoutAnyMethod",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "If an abstract class does not provides any methods, it may be acting as a simple data container\nthat is not meant to be instantiated. In this case, it is probably better to use a private or\nprotected constructor in order to prevent instantiation than make the class misleadingly abstract.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic abstract class Example {\n    String field;\n    int otherField;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#abstractclasswithoutanymethod"
  },
  {
    "key": "AbstractNaming",
    "name": "AbstractNaming",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Abstract classes should be named \u0027AbstractXXX\u0027.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic abstract class Foo { // should be AbstractFoo\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#abstractnaming"
  },
  {
    "key": "AccessorClassGeneration",
    "name": "AccessorClassGeneration",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Instantiation by way of private constructors from outside of the constructor\u0027s class often causes the\ngeneration of an accessor. A factory method, or non-privatization of the constructor can eliminate this\nsituation. The generated class file is actually an interface.  It gives the accessing class the ability\nto invoke a new hidden package scope constructor that takes the interface as a supplementary parameter.\nThis turns a private constructor effectively into one with package scope, and is challenging to discern.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Outer {\n void method(){\n  Inner ic \u003d new Inner();//Causes generation of accessor class\n }\n public class Inner {\n  private Inner(){}\n }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#accessorclassgeneration"
  },
  {
    "key": "AccessorMethodGeneration",
    "name": "AccessorMethodGeneration",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "When accessing a private field / method from another class, the Java compiler will generate a accessor methods\nwith package-private visibility. This adds overhead, and to the dex method count on Android. This situation can\nbe avoided by changing the visibility of the field / method from private to package-private.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class OuterClass {\n    private int counter;\n    /* package */ int id;\n\n    public class InnerClass {\n        InnerClass() {\n            OuterClass.this.counter++; // wrong accessor method will be generated\n        }\n\n        public int getOuterClassId() {\n            return OuterClass.this.id; // id is package-private, no accessor method needed\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#accessormethodgeneration"
  },
  {
    "key": "AddEmptyString",
    "name": "AddEmptyString",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The conversion of literals to strings by concatenating them with empty strings is inefficient.\nIt is much better to use one of the type-specific toString() methods instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eString s \u003d \"\" + 123;                // inefficient\nString t \u003d Integer.toString(456);   // preferred approach\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#addemptystring"
  },
  {
    "key": "AppendCharacterWithChar",
    "name": "AppendCharacterWithChar",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid concatenating characters as strings in StringBuffer/StringBuilder.append methods.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eStringBuffer sb \u003d new StringBuffer();\nsb.append(\"a\");     // avoid this\n\nStringBuffer sb \u003d new StringBuffer();\nsb.append(\u0027a\u0027);     // use this instead\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#appendcharacterwithchar"
  },
  {
    "key": "ArrayIsStoredDirectly",
    "name": "ArrayIsStoredDirectly",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Constructors and methods receiving arrays should clone objects and store the copy.\nThis prevents future changes from the user from affecting the original array.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private String [] x;\n        public void foo (String [] param) {\n        // Don\u0027t do this, make a copy of the array at least\n        this.x\u003dparam;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#arrayisstoreddirectly"
  },
  {
    "key": "AssignmentInOperand",
    "name": "AssignmentInOperand",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid assignments in operands; this can make code more complicated and harder to read.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    int x \u003d 2;\n    if ((x \u003d getX()) \u003d\u003d 3) {\n      System.out.println(\"3!\");\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#assignmentinoperand"
  },
  {
    "key": "AssignmentToNonFinalStatic",
    "name": "AssignmentToNonFinalStatic",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Identifies a possible unsafe usage of a static field.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class StaticField {\n   static int x;\n   public FinalFields(int y) {\n    x \u003d y; // unsafe\n   }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#assignmenttononfinalstatic"
  },
  {
    "key": "AtLeastOneConstructor",
    "name": "AtLeastOneConstructor",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Each non-static class should declare at least one constructor.\nClasses with solely static members are ignored, refer to [UseUtilityClassRule](pmd_rules_java_design.html#useutilityclass) to detect those.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n   // missing constructor\n  public void doSomething() { ... }\n  public void doOtherThing { ... }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#atleastoneconstructor"
  },
  {
    "key": "AvoidAccessibilityAlteration",
    "name": "AvoidAccessibilityAlteration",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(),\nas the interface PrivilegedAction, allow for the runtime alteration of variable, class, or\nmethod visibility, even if they are private. This violates the principle of encapsulation.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.lang.reflect.AccessibleObject;\nimport java.lang.reflect.Method;\nimport java.security.PrivilegedAction;\n\npublic class Violation {\n  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {\n    // Possible call to forbidden getDeclaredConstructors\n    Class[] arrayOfClass \u003d new Class[1];\n    this.getClass().getDeclaredConstructors();\n    this.getClass().getDeclaredConstructor(arrayOfClass);\n    Class clazz \u003d this.getClass();\n    clazz.getDeclaredConstructor(arrayOfClass);\n    clazz.getDeclaredConstructors();\n      // Possible call to forbidden setAccessible\n    clazz.getMethod(\"\", arrayOfClass).setAccessible(false);\n    AccessibleObject.setAccessible(null, false);\n    Method.setAccessible(null, false);\n    Method[] methodsArray \u003d clazz.getMethods();\n    int nbMethod;\n    for ( nbMethod \u003d 0; nbMethod \u003c methodsArray.length; nbMethod++ ) {\n      methodsArray[nbMethod].setAccessible(false);\n    }\n\n      // Possible call to forbidden PrivilegedAction\n    PrivilegedAction priv \u003d (PrivilegedAction) new Object(); priv.run();\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidaccessibilityalteration"
  },
  {
    "key": "AvoidArrayLoops",
    "name": "AvoidArrayLoops",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Instead of manually copying data between two arrays, use the efficient Arrays.copyOf or System.arraycopy method instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Test {\n    public void bar() {\n        int[] a \u003d new int[10];\n        int[] b \u003d new int[10];\n        for (int i\u003d0;i\u003c10;i++) {\n            b[i]\u003da[i];\n        }\n\n        int[] c \u003d new int[10];\n        // this will trigger the rule\n        for (int i\u003d0;i\u003c10;i++) {\n            b[i]\u003da[c[i]];\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#avoidarrayloops"
  },
  {
    "key": "AvoidAssertAsIdentifier",
    "name": "AvoidAssertAsIdentifier",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Use of the term \u0027assert\u0027 will conflict with newer versions of Java since it is a reserved word.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class A {\n    public class Foo {\n        String assert \u003d \"foo\";\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidassertasidentifier"
  },
  {
    "key": "AvoidBranchingStatementAsLastInLoop",
    "name": "AvoidBranchingStatementAsLastInLoop",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Using a branching statement as the last part of a loop may be a bug, and/or is confusing.\nEnsure that the usage is not a bug, or consider using another approach.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// unusual use of branching statement in a loop\nfor (int i \u003d 0; i \u003c 10; i++) {\n    if (i*i \u003c\u003d 25) {\n        continue;\n    }\n    break;\n}\n\n// this makes more sense...\nfor (int i \u003d 0; i \u003c 10; i++) {\n    if (i*i \u003e 25) {\n        break;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop"
  },
  {
    "key": "AvoidCallingFinalize",
    "name": "AvoidCallingFinalize",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The method Object.finalize() is called by the garbage collector on an object when garbage collection determines\nthat there are no more references to the object. It should not be invoked by application logic.\n            \nNote that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003evoid foo() {\n    Bar b \u003d new Bar();\n    b.finalize();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidcallingfinalize"
  },
  {
    "key": "AvoidCatchingGenericException",
    "name": "AvoidCatchingGenericException",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epackage com.igate.primitive;\n\npublic class PrimitiveType {\n\n    public void downCastPrimitiveType() {\n        try {\n            System.out.println(\" i [\" + i + \"]\");\n        } catch(Exception e) {\n            e.printStackTrace();\n        } catch(RuntimeException e) {\n            e.printStackTrace();\n        } catch(NullPointerException e) {\n            e.printStackTrace();\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#avoidcatchinggenericexception"
  },
  {
    "key": "AvoidCatchingNPE",
    "name": "AvoidCatchingNPE",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Code should never throw NullPointerExceptions under normal circumstances.  A catch block may hide the \noriginal error, causing other, more subtle problems later on.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (NullPointerException npe) {\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidcatchingnpe"
  },
  {
    "key": "AvoidCatchingThrowable",
    "name": "AvoidCatchingThrowable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as \nOutOfMemoryError that should be exposed and managed separately.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    try {\n        // do something\n    } catch (Throwable th) {  // should not catch Throwable\n        th.printStackTrace();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidcatchingthrowable"
  },
  {
    "key": "AvoidDecimalLiteralsInBigDecimalConstructor",
    "name": "AvoidDecimalLiteralsInBigDecimalConstructor",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "One might assume that the result of \"new BigDecimal(0.1)\" is exactly equal to 0.1, but it is actually\nequal to .1000000000000000055511151231257827021181583404541015625.\nThis is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite\nlength). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1,\nappearances notwithstanding.\n\nThe (String) constructor, on the other hand, is perfectly predictable: \u0027new BigDecimal(\"0.1\")\u0027 is\nexactly equal to 0.1, as one would expect.  Therefore, it is generally recommended that the\n(String) constructor be used in preference to this one.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eBigDecimal bd \u003d new BigDecimal(1.123);       // loss of precision, this would trigger the rule\n\nBigDecimal bd \u003d new BigDecimal(\"1.123\");     // preferred approach\n\nBigDecimal bd \u003d new BigDecimal(12);          // preferred approach, ok for integer values\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoiddecimalliteralsinbigdecimalconstructor"
  },
  {
    "key": "AvoidDeeplyNestedIfStmts",
    "name": "AvoidDeeplyNestedIfStmts",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  public void bar(int x, int y, int z) {\n    if (x\u003ey) {\n      if (y\u003ez) {\n        if (z\u003d\u003dx) {\n         // !! too deep\n        }\n      }\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#avoiddeeplynestedifstmts"
  },
  {
    "key": "AvoidDollarSigns",
    "name": "AvoidDollarSigns",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using dollar signs in variable/method/class/interface names.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Fo$o {  // not a recommended name\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#avoiddollarsigns"
  },
  {
    "key": "AvoidDuplicateLiterals",
    "name": "AvoidDuplicateLiterals",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Code containing duplicate String literals can usually be improved by declaring the String as a constant field.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprivate void bar() {\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n}\nprivate void buz(String x) {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidduplicateliterals"
  },
  {
    "key": "AvoidEnumAsIdentifier",
    "name": "AvoidEnumAsIdentifier",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Use of the term \u0027enum\u0027 will conflict with newer versions of Java since it is a reserved word.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class A {\n    public class Foo {\n        String enum \u003d \"foo\";\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidenumasidentifier"
  },
  {
    "key": "AvoidFieldNameMatchingMethodName",
    "name": "AvoidFieldNameMatchingMethodName",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "It can be confusing to have a field name with the same name as a method. While this is permitted, \nhaving information (field) and actions (method) is not clear naming. Developers versed in \nSmalltalk often prefer this approach as the methods denote accessor methods.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    Object bar;\n    // bar is data or an action or both?\n    void bar() {\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname"
  },
  {
    "key": "AvoidFieldNameMatchingTypeName",
    "name": "AvoidFieldNameMatchingTypeName",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "It is somewhat confusing to have a field name matching the declaring class name.\nThis probably means that type and/or field names should be chosen more carefully.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Bar {\n    int foo;    // There is probably a better name that can be used\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename"
  },
  {
    "key": "AvoidFileStream",
    "name": "AvoidFileStream",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "The FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage collection pauses. See [JDK-8080225](https://bugs.openjdk.java.net/browse/JDK-8080225) for details.\n\nThe FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream, again causing garbage collection issues while finalizer methods are called.\n\n* Use `Files.newInputStream(Paths.get(fileName))` instead of `new FileInputStream(fileName)`.\n* Use `Files.newOutputStream(Paths.get(fileName))` instead of `new FileOutputStream(fileName)`.\n* Use `Files.newBufferedReader(Paths.get(fileName))` instead of `new FileReader(fileName)`.\n* Use `Files.newBufferedWriter(Paths.get(fileName))` instead of `new FileWriter(fileName)`.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// these instantiations cause garbage collection pauses, even if properly closed\n\n    FileInputStream fis \u003d new FileInputStream(fileName);\n    FileOutputStream fos \u003d new FileOutputStream(fileName);\n    FileReader fr \u003d new FileReader(fileName);\n    FileWriter fw \u003d new FileWriter(fileName);\n\n    // the following instantiations help prevent Garbage Collection pauses, no finalization\n\n    try(InputStream is \u003d Files.newInputStream(Paths.get(fileName))) {\n    }\n    try(OutputStream os \u003d Files.newOutputStream(Paths.get(fileName))) {\n    }\n    try(BufferedReader br \u003d Files.newBufferedReader(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }\n    try(BufferedWriter wr \u003d Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#avoidfilestream"
  },
  {
    "key": "AvoidFinalLocalVariable",
    "name": "AvoidFinalLocalVariable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using final local variables, turn them into fields.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyClass {\n    public void foo() {\n        final String finalLocalVariable;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#avoidfinallocalvariable"
  },
  {
    "key": "AvoidInstanceofChecksInCatchClause",
    "name": "AvoidInstanceofChecksInCatchClause",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Each caught exception type should be handled in its own catch clause.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003etry { // Avoid this\n    // do something\n} catch (Exception ee) {\n    if (ee instanceof IOException) {\n        cleanup();\n    }\n}\n\ntry {  // Prefer this:\n    // do something\n} catch (IOException ee) {\n    cleanup();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause"
  },
  {
    "key": "AvoidInstantiatingObjectsInLoops",
    "name": "AvoidInstantiatingObjectsInLoops",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "New objects created within loops should be checked to see if they can created outside them and reused.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Something {\n    public static void main( String as[] ) {\n        for (int i \u003d 0; i \u003c 10; i++) {\n            Foo f \u003d new Foo(); // Avoid this whenever you can it\u0027s really expensive\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#avoidinstantiatingobjectsinloops"
  },
  {
    "key": "AvoidLiteralsInIfCondition",
    "name": "AvoidLiteralsInIfCondition",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using hard-coded literals in conditional statements. By declaring them as static variables\nor private members with descriptive names maintainability is enhanced. By default, the literals \"-1\" and \"0\" are ignored.\nMore exceptions can be defined with the property \"ignoreMagicNumbers\".\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprivate static final int MAX_NUMBER_OF_REQUESTS \u003d 10;\n\npublic void checkRequests() {\n\n    if (i \u003d\u003d 10) {                        // magic number, buried in a method\n      doSomething();\n    }\n\n    if (i \u003d\u003d MAX_NUMBER_OF_REQUESTS) {    // preferred approach\n      doSomething();\n    }\n\n    if (aString.indexOf(\u0027.\u0027) !\u003d -1) {}     // magic number -1, by default ignored\n    if (aString.indexOf(\u0027.\u0027) \u003e\u003d 0) { }     // alternative approach\n\n    if (aDouble \u003e 0.0) {}                  // magic number 0.0\n    if (aDouble \u003e\u003d Double.MIN_VALUE) {}    // preferred approach\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition"
  },
  {
    "key": "AvoidLosingExceptionInformation",
    "name": "AvoidLosingExceptionInformation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Statements in a catch block that invoke accessors on the exception without using the information\nonly add to code size.  Either remove the invocation, or use the return result.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        se.getMessage();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidlosingexceptioninformation"
  },
  {
    "key": "AvoidMultipleUnaryOperators",
    "name": "AvoidMultipleUnaryOperators",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "The use of multiple unary operators may be problematic, and/or confusing.\nEnsure that the intended usage is not a bug, or consider simplifying the expression.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// These are typo bugs, or at best needlessly complex and confusing:\nint i \u003d - -1;\nint j \u003d + - +1;\nint z \u003d ~~2;\nboolean b \u003d !!true;\nboolean c \u003d !!!true;\n\n// These are better:\nint i \u003d 1;\nint j \u003d -1;\nint z \u003d 2;\nboolean b \u003d true;\nboolean c \u003d false;\n\n// And these just make your brain hurt:\nint i \u003d ~-2;\nint j \u003d -~7;\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidmultipleunaryoperators"
  },
  {
    "key": "AvoidPrefixingMethodParameters",
    "name": "AvoidPrefixingMethodParameters",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefixing parameters by \u0027in\u0027 or \u0027out\u0027 pollutes the name of the parameters and reduces code readability.\nTo indicate whether or not a parameter will be modify in a method, its better to document method\nbehavior with Javadoc.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// Far more useful\npublic class Foo {\n  /**\n   *\n   * @param leftOperand, (purpose), not modified by method.\n   * @param rightOperand (purpose), will be modified by the method: contains the result.\n   */\n  public void bar(\n        int leftOperand,\n        Result rightOperand) {\n        rightOperand.setValue(leftOperand * rightOperand.getValue());\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#avoidprefixingmethodparameters"
  },
  {
    "key": "AvoidPrintStackTrace",
    "name": "AvoidPrintStackTrace",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid printStackTrace(); use a logger call instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#avoidprintstacktrace"
  },
  {
    "key": "AvoidProtectedFieldInFinalClass",
    "name": "AvoidProtectedFieldInFinalClass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use protected fields in final classes since they cannot be subclassed.\nClarify your intent by using private or package access modifiers instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic final class Bar {\n  private int x;\n  protected int y;  // bar cannot be subclassed, so is y really private or package visible?\n  Bar() {}\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass"
  },
  {
    "key": "AvoidProtectedMethodInFinalClassNotExtending",
    "name": "AvoidProtectedMethodInFinalClassNotExtending",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use protected methods in most final classes since they cannot be subclassed. This should\nonly be allowed in final classes that extend other classes with protected methods (whose\nvisibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic final class Foo {\n  private int bar() {}\n  protected int baz() {} // Foo cannot be subclassed, and doesn\u0027t extend anything, so is baz() really private or package visible?\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#avoidprotectedmethodinfinalclassnotextending"
  },
  {
    "key": "AvoidReassigningParameters",
    "name": "AvoidReassigningParameters",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Reassigning values to incoming parameters is not recommended.  Use temporary local variables instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  private void foo(String bar) {\n    bar \u003d \"something else\";\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#avoidreassigningparameters"
  },
  {
    "key": "AvoidRethrowingException",
    "name": "AvoidRethrowingException",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    try {\n        // do something\n    }  catch (SomeException se) {\n       throw se;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#avoidrethrowingexception"
  },
  {
    "key": "AvoidStringBufferField",
    "name": "AvoidStringBufferField",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks\nif held within objects with long lifetimes.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private StringBuffer buffer;    // potential memory leak as an instance variable;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#avoidstringbufferfield"
  },
  {
    "key": "AvoidSynchronizedAtMethodLevel",
    "name": "AvoidSynchronizedAtMethodLevel",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Method-level synchronization can cause problems when new code is added to the method.\nBlock-level synchronization helps to ensure that only the code that needs synchronization\ngets it.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  // Try to avoid this:\n  synchronized void foo() {\n  }\n  // Prefer this:\n  void bar() {\n    synchronized(this) {\n    }\n  }\n\n  // Try to avoid this for static methods:\n  static synchronized void fooStatic() {\n  }\n\n  // Prefer this:\n  static void barStatic() {\n    synchronized(Foo.class) {\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel"
  },
  {
    "key": "AvoidThreadGroup",
    "name": "AvoidThreadGroup",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment\nit contains methods that are not thread-safe.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Bar {\n    void buz() {\n        ThreadGroup tg \u003d new ThreadGroup(\"My threadgroup\");\n        tg \u003d new ThreadGroup(tg, \"my thread group\");\n        tg \u003d Thread.currentThread().getThreadGroup();\n        tg \u003d System.getSecurityManager().getThreadGroup();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#avoidthreadgroup"
  },
  {
    "key": "AvoidThrowingNewInstanceOfSameException",
    "name": "AvoidThrowingNewInstanceOfSameException",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to\ncode size and runtime complexity.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        // harmless comment\n        throw new SomeException(se);\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#avoidthrowingnewinstanceofsameexception"
  },
  {
    "key": "AvoidThrowingNullPointerException",
    "name": "AvoidThrowingNullPointerException",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Avoid throwing NullPointerExceptions manually. These are confusing because most people will assume that the\nvirtual machine threw it.  To avoid a method being called with a null parameter, you may consider \nusing an IllegalArgumentException instead, making it clearly seen as a programmer-initiated exception. \nHowever, there are better ways to handle this:\n\n\u003e*Effective Java, 3rd Edition, Item 72: Favor the use of standard exceptions*\n\u003e\n\u003eArguably, every erroneous method invocation boils down to an illegal argument or state, \nbut other exceptions are standardly used for certain kinds of illegal arguments and states. \nIf a caller passes null in some parameter for which null values are prohibited, convention dictates that \nNullPointerException be thrown rather than IllegalArgumentException.\n\nTo implement that, you are encouraged to use `java.util.Objects.requireNonNull()`\n(introduced in Java 1.7). This method is designed primarily for doing parameter\nvalidation in methods and constructors with multiple parameters.\n\nYour parameter validation could thus look like the following:\n```\npublic class Foo {\n    private String exampleValue;\n      \n    void setExampleValue(String exampleValue) {\n      // check, throw and assignment in a single standard call\n      this.exampleValue \u003d Objects.requireNonNull(exampleValue, \"exampleValue must not be null!\");\n    }\n  }\n```\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void bar() {\n        throw new NullPointerException();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#avoidthrowingnullpointerexception"
  },
  {
    "key": "AvoidThrowingRawExceptionTypes",
    "name": "AvoidThrowingRawExceptionTypes",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable,\nException, or Error, use a subclassed exception or error instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void bar() throws Exception {\n        throw new Exception();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes"
  },
  {
    "key": "AvoidUsingHardCodedIP",
    "name": "AvoidUsingHardCodedIP",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Application with hard-coded IP addresses can become impossible to deploy in some cases.\nExternalizing IP adresses is preferable.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private String ip \u003d \"127.0.0.1\";     // not recommended\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#avoidusinghardcodedip"
  },
  {
    "key": "AvoidUsingNativeCode",
    "name": "AvoidUsingNativeCode",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability\nand increases the maintenance burden.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SomeJNIClass {\n\n     public SomeJNIClass() {\n         System.loadLibrary(\"nativelib\");\n     }\n\n     static {\n         System.loadLibrary(\"nativelib\");\n     }\n\n     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {\n         System.loadLibrary(\"nativelib\");\n     }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#avoidusingnativecode"
  },
  {
    "key": "AvoidUsingOctalValues",
    "name": "AvoidUsingOctalValues",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Integer literals should not start with zero since this denotes that the rest of literal will be\ninterpreted as an octal value.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eint i \u003d 012;    // set i with 10 not 12\nint j \u003d 010;    // set j with 8 not 10\nk \u003d i * j;      // set k with 80 not 120\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#avoidusingoctalvalues"
  },
  {
    "key": "AvoidUsingShortType",
    "name": "AvoidUsingShortType",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Java uses the \u0027short\u0027 type to reduce memory usage, not to optimize calculation. In fact, the JVM does not have any\narithmetic capabilities for the short type: the JVM must convert the short into an int, do the proper calculation\nand convert the int back to a short. Thus any storage gains found through use of the \u0027short\u0027 type may be offset by\nadverse impacts on performance.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class UsingShort {\n   private short doNotUseShort \u003d 0;\n\n   public UsingShort() {\n    short shouldNotBeUsed \u003d 1;\n    doNotUseShort +\u003d shouldNotBeUsed;\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#avoidusingshorttype"
  },
  {
    "key": "AvoidUsingVolatile",
    "name": "AvoidUsingVolatile",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Use of the keyword \u0027volatile\u0027 is generally used to fine tune a Java application, and therefore, requires\na good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,\nthe volatile keyword should not be used for maintenance purpose and portability.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class ThrDeux {\n  private volatile String var1; // not suggested\n  private          String var2; // preferred\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#avoidusingvolatile"
  },
  {
    "key": "BadComparison",
    "name": "BadComparison",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid equality comparisons with Double.NaN. Due to the implicit lack of representation\nprecision when comparing floating point numbers these are likely to cause logic errors.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eboolean x \u003d (y \u003d\u003d Double.NaN);\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#badcomparison"
  },
  {
    "key": "BeanMembersShouldSerialize",
    "name": "BeanMembersShouldSerialize",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. \nMember variables need to be marked as transient, static, or have accessor methods in the class. Marking \nvariables as transient is the safest and easiest modification. Accessor methods should follow the Java \nnaming conventions, i.e. for a variable named foo, getFoo() and setFoo() accessor methods should be provided.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprivate transient int someFoo;  // good, it\u0027s transient\nprivate static int otherFoo;    // also OK\nprivate int moreFoo;            // OK, has proper accessors, see below\nprivate int badFoo;             // bad, should be marked transient\n\nprivate void setMoreFoo(int moreFoo){\n      this.moreFoo \u003d moreFoo;\n}\n\nprivate int getMoreFoo(){\n      return this.moreFoo;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#beanmembersshouldserialize"
  },
  {
    "key": "BigIntegerInstantiation",
    "name": "BigIntegerInstantiation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Don\u0027t create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and\nfor Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eBigInteger bi \u003d new BigInteger(1);       // reference BigInteger.ONE instead\nBigInteger bi2 \u003d new BigInteger(\"0\");    // reference BigInteger.ZERO instead\nBigInteger bi3 \u003d new BigInteger(0.0);    // reference BigInteger.ZERO instead\nBigInteger bi4;\nbi4 \u003d new BigInteger(0);                 // reference BigInteger.ZERO instead\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#bigintegerinstantiation"
  },
  {
    "key": "BooleanGetMethodName",
    "name": "BooleanGetMethodName",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Methods that return boolean results should be named as predicate statements to denote this.\nI.e, \u0027isReady()\u0027, \u0027hasValues()\u0027, \u0027canCommit()\u0027, \u0027willFail()\u0027, etc.   Avoid the use of the \u0027get\u0027\nprefix for these methods.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic boolean getFoo();            // bad\npublic boolean isFoo();             // ok\npublic boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods\u003dtrue\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#booleangetmethodname"
  },
  {
    "key": "BooleanInstantiation",
    "name": "BooleanInstantiation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.\nNote that new Boolean() is deprecated since JDK 9 for that reason.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eBoolean bar \u003d new Boolean(\"true\");        // unnecessary creation, just reference Boolean.TRUE;\nBoolean buz \u003d Boolean.valueOf(false);    // ...., just reference Boolean.FALSE;\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#booleaninstantiation"
  },
  {
    "key": "BrokenNullCheck",
    "name": "BrokenNullCheck",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "The null check is broken since it will throw a NullPointerException itself.\nIt is likely that you used || instead of \u0026\u0026 or vice versa.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic String bar(String string) {\n  // should be \u0026\u0026\n    if (string!\u003dnull || !string.equals(\"\"))\n        return string;\n  // should be ||\n    if (string\u003d\u003dnull \u0026\u0026 string.equals(\"\"))\n        return string;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#brokennullcheck"
  },
  {
    "key": "ByteInstantiation",
    "name": "ByteInstantiation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf().\nIt makes use of an internal cache that recycles earlier instances making it more memory efficient.\nNote that new Byte() is deprecated since JDK 9 for that reason.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private Byte i \u003d new Byte(0); // change to Byte i \u003d Byte.valueOf(0);\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#byteinstantiation"
  },
  {
    "key": "CallSuperFirst",
    "name": "CallSuperFirst",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Super should be called at the start of the method\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class DummyActivity extends Activity {\n    public void onCreate(Bundle bundle) {\n        // missing call to super.onCreate(bundle)\n        foo();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#callsuperfirst"
  },
  {
    "key": "CallSuperInConstructor",
    "name": "CallSuperInConstructor",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "It is a good practice to call super() in a constructor. If super() is not called but\nanother constructor (such as an overloaded constructor) is called, this rule will not report it.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Bar{\n  public Foo() {\n   // call the constructor of Bar\n   super();\n  }\n public Foo(int code) {\n  // do something with code\n   this();\n   // no problem with this\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#callsuperinconstructor"
  },
  {
    "key": "CallSuperLast",
    "name": "CallSuperLast",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Super should be called at the end of the method\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class DummyActivity extends Activity {\n    public void onPause() {\n        foo();\n        // missing call to super.onPause()\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#callsuperlast"
  },
  {
    "key": "CheckResultSet",
    "name": "CheckResultSet",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Always check the return values of navigation methods (next, previous, first, last) of a ResultSet.\nIf the value return is \u0027false\u0027, it should be handled properly.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eStatement stat \u003d conn.createStatement();\nResultSet rst \u003d stat.executeQuery(\"SELECT name FROM person\");\nrst.next();     // what if it returns false? bad form\nString firstName \u003d rst.getString(1);\n\nStatement stat \u003d conn.createStatement();\nResultSet rst \u003d stat.executeQuery(\"SELECT name FROM person\");\nif (rst.next()) {    // result is properly examined and used\n    String firstName \u003d rst.getString(1);\n    } else  {\n        // handle missing data\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#checkresultset"
  },
  {
    "key": "CheckSkipResult",
    "name": "CheckSkipResult",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n\n   private FileInputStream _s \u003d new FileInputStream(\"file\");\n\n   public void skip(int n) throws IOException {\n      _s.skip(n); // You are not sure that exactly n bytes are skipped\n   }\n\n   public void skipExactly(int n) throws IOException {\n      while (n !\u003d 0) {\n         long skipped \u003d _s.skip(n);\n         if (skipped \u003d\u003d 0)\n            throw new EOFException();\n         n -\u003d skipped;\n      }\n   }\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#checkskipresult"
  },
  {
    "key": "ClassCastExceptionWithToArray",
    "name": "ClassCastExceptionWithToArray",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "When deriving an array of a specific class from your Collection, one should provide an array of\nthe same class as the parameter of the toArray() method. Doing otherwise you will will result\nin a ClassCastException.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eCollection c \u003d new ArrayList();\nInteger obj \u003d new Integer(1);\nc.add(obj);\n\n    // this would trigger the rule (and throw a ClassCastException if executed)\nInteger[] a \u003d (Integer [])c.toArray();\n\n   // this is fine and will not trigger the rule\nInteger[] b \u003d (Integer [])c.toArray(new Integer[c.size()]);\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#classcastexceptionwithtoarray"
  },
  {
    "key": "ClassNamingConventions",
    "name": "ClassNamingConventions",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Pascal case),\n            and reports utility class names not ending with \u0027Util\u0027.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// This is Pascal case, the recommended naming convention in Java\n// Note that the default values of this rule don\u0027t allow underscores \n// or accented characters in type names\npublic class FooBar {}\n\n// You may want abstract classes to be named \u0027AbstractXXX\u0027,\n// in which case you can customize the regex for abstract\n// classes to \u0027Abstract[A-Z]\\w+\u0027\npublic abstract class Thing {}\n\n// This class doesn\u0027t respect the convention, and will be flagged\npublic class Éléphant {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#classnamingconventions"
  },
  {
    "key": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
    "name": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "A class with only private constructors should be final, unless the private constructor\nis invoked by a inner class.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {  //Should be final\n    private Foo() { }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal"
  },
  {
    "key": "CloneMethodMustBePublic",
    "name": "CloneMethodMustBePublic",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The java Manual says \"By convention, classes that implement this interface should override\nObject.clone (which is protected) with a public method.\"\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo implements Cloneable {\n    @Override\n    protected Object clone() throws CloneNotSupportedException { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    protected Foo clone() { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Object clone() // Ok\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#clonemethodmustbepublic"
  },
  {
    "key": "CloneMethodMustImplementCloneable",
    "name": "CloneMethodMustImplementCloneable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The method clone() should only be implemented if the class implements the Cloneable interface with the exception of\na final method that only throws CloneNotSupportedException.\n\nThe rule can also detect, if the class implements or extends a Cloneable class.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyClass {\n public Object clone() throws CloneNotSupportedException {\n  return foo;\n }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#clonemethodmustimplementcloneable"
  },
  {
    "key": "CloneMethodReturnTypeMustMatchClassName",
    "name": "CloneMethodReturnTypeMustMatchClassName",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller\nof the clone method doesn\u0027t need to cast the returned clone to the correct type.\n\nNote: This is only possible with Java 1.5 or higher.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo implements Cloneable {\n    @Override\n    protected Object clone() { // Violation, Object must be Foo\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Foo clone() { //Ok\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname"
  },
  {
    "key": "CloneThrowsCloneNotSupportedException",
    "name": "CloneThrowsCloneNotSupportedException",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The method clone() should throw a CloneNotSupportedException.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyClass implements Cloneable{\n    public Object clone() { // will cause an error\n         MyClass clone \u003d (MyClass)super.clone();\n         return clone;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception"
  },
  {
    "key": "CloseResource",
    "name": "CloseResource",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Bar {\n  public void foo() {\n    Connection c \u003d pool.getConnection();\n    try {\n      // do stuff\n    } catch (SQLException ex) {\n     // handle exception\n    } finally {\n      // oops, should close the connection using \u0027close\u0027!\n      // c.close();\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#closeresource"
  },
  {
    "key": "CollapsibleIfStatements",
    "name": "CollapsibleIfStatements",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Sometimes two consecutive \u0027if\u0027 statements can be consolidated by separating their conditions with a boolean short-circuit operator.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003evoid bar() {\n    if (x) {            // original implementation\n        if (y) {\n            // do stuff\n        }\n    }\n}\n\nvoid bar() {\n    if (x \u0026\u0026 y) {        // optimized implementation\n        // do stuff\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#collapsibleifstatements"
  },
  {
    "key": "CommentContent",
    "name": "CommentContent",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A rule for the politically correct... we don\u0027t want to offend anyone.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e//OMG, this is horrible, Bob is an idiot !!!\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_documentation.html#commentcontent"
  },
  {
    "key": "CommentDefaultAccessModifier",
    "name": "CommentDefaultAccessModifier",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "To avoid mistakes if we want that a Method, Constructor, Field or Nested class have a default access modifier\nwe must add a comment at the beginning of it\u0027s declaration.\nBy default the comment must be /* default */ or /* package */, if you want another, you have to provide a regular expression.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    final String stringValue \u003d \"some string\";\n    String getString() {\n       return stringValue;\n    }\n\n    class NestedFoo {\n    }\n}\n\n// should be\npublic class Foo {\n    /* default */ final String stringValue \u003d \"some string\";\n    /* default */ String getString() {\n       return stringValue;\n    }\n\n    /* default */ class NestedFoo {\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#commentdefaultaccessmodifier"
  },
  {
    "key": "CommentRequired",
    "name": "CommentRequired",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Denotes whether comments are required (or unwanted) for specific language elements.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e/**\n* \n*\n* @author Jon Doe\n*/\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_documentation.html#commentrequired"
  },
  {
    "key": "CommentSize",
    "name": "CommentSize",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Determines whether the dimensions of non-header comments found are within the specified limits.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e/**\n*\n*   too many lines!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_documentation.html#commentsize"
  },
  {
    "key": "CompareObjectsWithEquals",
    "name": "CompareObjectsWithEquals",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use equals() to compare object references; avoid comparing them with \u003d\u003d.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo {\n  boolean bar(String a, String b) {\n    return a \u003d\u003d b;\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#compareobjectswithequals"
  },
  {
    "key": "ConfusingTernary",
    "name": "ConfusingTernary",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid negation within an \"if\" expression with an \"else\" clause.  For example, rephrase:\n`if (x !\u003d y) diff(); else same();` as: `if (x \u003d\u003d y) same(); else diff();`.\n\nMost \"if (x !\u003d y)\" cases without an \"else\" are often return cases, so consistent use of this\nrule makes the code easier to read.  Also, this resolves trivial ordering problems, such\nas \"does the error case go first?\" or \"does the common case go first?\".\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eboolean bar(int x, int y) {\n    return (x !\u003d y) ? diff : same;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#confusingternary"
  },
  {
    "key": "ConsecutiveAppendsShouldReuse",
    "name": "ConsecutiveAppendsShouldReuse",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance\nby producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found [here](https://github.com/pmd/pmd/issues/202#issuecomment-274349067)\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eString foo \u003d \" \";\n\nStringBuffer buf \u003d new StringBuffer();\nbuf.append(\"Hello\"); // poor\nbuf.append(foo);\nbuf.append(\"World\");\n\nStringBuffer buf \u003d new StringBuffer();\nbuf.append(\"Hello\").append(foo).append(\"World\"); // good\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#consecutiveappendsshouldreuse"
  },
  {
    "key": "ConsecutiveLiteralAppends",
    "name": "ConsecutiveLiteralAppends",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Consecutively calling StringBuffer/StringBuilder.append(...) with literals should be avoided.\nSince the literals are constants, they can already be combined into a single String literal and this String\ncan be appended in a single method call.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eStringBuilder buf \u003d new StringBuilder();\nbuf.append(\"Hello\").append(\" \").append(\"World\");    // poor\nbuf.append(\"Hello World\");                          // good\n\nbuf.append(\u0027h\u0027).append(\u0027e\u0027).append(\u0027l\u0027).append(\u0027l\u0027).append(\u0027o\u0027); // poor\nbuf.append(\"hello\");                                             // good\n\nbuf.append(1).append(\u0027m\u0027);  // poor\nbuf.append(\"1m\");           // good\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#consecutiveliteralappends"
  },
  {
    "key": "ConstantsInInterface",
    "name": "ConstantsInInterface",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid constants in interfaces. Interfaces should define types, constants are implementation details\nbetter placed in classes or enums. See Effective Java, item 19.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic interface ConstantInterface {\n    public static final int CONST1 \u003d 1; // violation, no fields allowed in interface!\n    static final int CONST2 \u003d 1;        // violation, no fields allowed in interface!\n    final int CONST3 \u003d 1;               // violation, no fields allowed in interface!\n    int CONST4 \u003d 1;                     // violation, no fields allowed in interface!\n}\n\n// with ignoreIfHasMethods \u003d false\npublic interface AnotherConstantInterface {\n    public static final int CONST1 \u003d 1; // violation, no fields allowed in interface!\n\n    int anyMethod();\n}\n\n// with ignoreIfHasMethods \u003d true\npublic interface YetAnotherConstantInterface {\n    public static final int CONST1 \u003d 1; // no violation\n\n    int anyMethod();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#constantsininterface"
  },
  {
    "key": "ConstructorCallsOverridableMethod",
    "name": "ConstructorCallsOverridableMethod",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Calling overridable methods during construction poses a risk of invoking methods on an incompletely\nconstructed object and can be difficult to debug.\nIt may leave the sub-class unable to construct its superclass or forced to replicate the construction\nprocess completely within itself, losing the ability to call super().  If the default constructor\ncontains a call to an overridable method, the subclass may be completely uninstantiable.   Note that\nthis includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a\nprivate method bar() that calls a public method buz(), this denotes a problem.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SeniorClass {\n  public SeniorClass(){\n      toString(); //may throw NullPointerException if overridden\n  }\n  public String toString(){\n    return \"IAmSeniorClass\";\n  }\n}\npublic class JuniorClass extends SeniorClass {\n  private String name;\n  public JuniorClass(){\n    super(); //Automatic call leads to NullPointerException\n    name \u003d \"JuniorClass\";\n  }\n  public String toString(){\n    return name.toUpperCase();\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod"
  },
  {
    "key": "ControlStatementBraces",
    "name": "ControlStatementBraces",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Enforce a policy for braces on control statements. It is recommended to use braces on \u0027if ... else\u0027\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003ewhile (true)    // not recommended\n  x++;\n\nwhile (true) {  // preferred approach\n  x++;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#controlstatementbraces"
  },
  {
    "key": "CouplingBetweenObjects",
    "name": "CouplingBetweenObjects",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule counts the number of unique attributes, local variables, and return types within an object. \nA number higher than the specified threshold can indicate a high degree of coupling.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport com.Blah;\nimport org.Bar;\nimport org.Bardo;\n\npublic class Foo {\n    private Blah var1;\n    private Bar var2;\n\n    //followed by many imports of unique objects\n    void ObjectC doWork() {\n        Bardo var55;\n        ObjectA var44;\n        ObjectZ var93;\n        return something;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#couplingbetweenobjects"
  },
  {
    "key": "CyclomaticComplexity",
    "name": "CyclomaticComplexity",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation of the [Cyclo metric](/pmd_java_metrics_index.html#cyclomatic-complexity-cyclo).\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity \u003e\u003d 10.\nAdditionnally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods\u0027 complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo {\n  void baseCyclo() {                // Cyclo \u003d 1\n    highCyclo();\n  }\n\n  void highCyclo() {                // Cyclo \u003d 10: reported!\n    int x \u003d 0, y \u003d 2;\n    boolean a \u003d false, b \u003d true;\n\n    if (a \u0026\u0026 (y \u003d\u003d 1 ? b : true)) { // +3\n      if (y \u003d\u003d x) {                 // +1\n        while (true) {              // +1\n          if (x++ \u003c 20) {           // +1\n            break;                  // +1\n          }\n        }\n      } else if (y \u003d\u003d t \u0026\u0026 !d) {    // +2\n        x \u003d a ? y : x;              // +1\n      } else {\n        x \u003d 2;\n      }\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#cyclomaticcomplexity"
  },
  {
    "key": "DataClass",
    "name": "DataClass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Data Classes are simple data holders, which reveal most of their state, and\nwithout complex functionality. The lack of functionality may indicate that\ntheir behaviour is defined elsewhere, which is a sign of poor data-behaviour\nproximity. By directly exposing their internals, Data Classes break encapsulation,\nand therefore reduce the system\u0027s maintainability and understandability. Moreover,\nclasses tend to strongly rely on their data representation, which makes for a brittle\ndesign.\n\nRefactoring a Data Class should focus on restoring a good data-behaviour proximity. In\nmost cases, that means moving the operations defined on the data back into the class.\nIn some other cases it may make sense to remove entirely the class and move the data\ninto the former client classes.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class DataClass {\n\n  public int bar \u003d 0;\n  public int na \u003d 0;\n  private int bee \u003d 0;\n\n  public void setBee(int n) {\n    bee \u003d n;\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#dataclass"
  },
  {
    "key": "DataflowAnomalyAnalysis",
    "name": "DataflowAnomalyAnalysis",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error.\n2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don\u0027t have to be a bug.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void foo() {\n  int buz \u003d 5;\n  buz \u003d 6; // redefinition of buz -\u003e dd-anomaly\n  foo(buz);\n  buz \u003d 2;\n} // buz is undefined when leaving scope -\u003e du-anomaly\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis"
  },
  {
    "key": "DefaultLabelNotLastInSwitchStmt",
    "name": "DefaultLabelNotLastInSwitchStmt",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "By convention, the default label should be the last label in a switch statement.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  void bar(int a) {\n   switch (a) {\n    case 1:  // do something\n       break;\n    default:  // the default case should be last, by convention\n       break;\n    case 2:\n       break;\n   }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#defaultlabelnotlastinswitchstmt"
  },
  {
    "key": "DefaultPackage",
    "name": "DefaultPackage",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use explicit scoping instead of accidental usage of default package private level.\nThe rule allows methods and fields annotated with Guava\u0027s @VisibleForTesting.",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#defaultpackage"
  },
  {
    "key": "DoNotCallGarbageCollectionExplicitly",
    "name": "DoNotCallGarbageCollectionExplicitly",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the\nsame behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not.\nMoreover, \"modern\" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory\nleaks develop within an application, it should be dealt with JVM options rather than within the code itself.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class GCCall {\n    public GCCall() {\n        // Explicit gc call !\n        System.gc();\n    }\n\n    public void doSomething() {\n        // Explicit gc call !\n        Runtime.getRuntime().gc();\n    }\n\n    public explicitGCcall() {\n        // Explicit gc call !\n        System.gc();\n    }\n\n    public void doSomething() {\n        // Explicit gc call !\n        Runtime.getRuntime().gc();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly"
  },
  {
    "key": "DoNotCallSystemExit",
    "name": "DoNotCallSystemExit",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Web applications should not call System.exit(), since only the web container or the\napplication server should stop the JVM. This rule also checks for the equivalent call Runtime.getRuntime().exit().\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    System.exit(0);                 // never call this when running in an application server!\n}\npublic void foo() {\n    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#donotcallsystemexit"
  },
  {
    "key": "DoNotExtendJavaLangError",
    "name": "DoNotExtendJavaLangError",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Errors are system exceptions. Do not extend them.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Error { }\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#donotextendjavalangerror"
  },
  {
    "key": "DoNotExtendJavaLangThrowable",
    "name": "DoNotExtendJavaLangThrowable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Extend Exception or RuntimeException instead of Throwable.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Throwable { }\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#donotextendjavalangthrowable"
  },
  {
    "key": "DoNotHardCodeSDCard",
    "name": "DoNotHardCodeSDCard",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use Environment.getExternalStorageDirectory() instead of \"/sdcard\"\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyActivity extends Activity {\n    protected void foo() {\n        String storageLocation \u003d \"/sdcard/mypackage\";   // hard-coded, poor approach\n\n       storageLocation \u003d Environment.getExternalStorageDirectory() + \"/mypackage\"; // preferred approach\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#donothardcodesdcard"
  },
  {
    "key": "DoNotThrowExceptionInFinally",
    "name": "DoNotThrowExceptionInFinally",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Throwing exceptions within a \u0027finally\u0027 block is confusing since they may mask other exceptions \nor code defects.\nNote: This is a PMD implementation of the Lint4j rule \"A throw in a finally block\"\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void bar() {\n        try {\n            // Here do some stuff\n        } catch( Exception e) {\n            // Handling the issue\n        } finally {\n            // is this really a good idea ?\n            throw new Exception();\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally"
  },
  {
    "key": "DoNotUseThreads",
    "name": "DoNotUseThreads",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The J2EE specification explicitly forbids the use of threads.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// This is not allowed\npublic class UsingThread extends Thread {\n\n}\n\n// Neither this,\npublic class OtherThread implements Runnable {\n    // Nor this ...\n    public void methode() {\n        Runnable thread \u003d new Thread(); thread.run();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#donotusethreads"
  },
  {
    "key": "DontCallThreadRun",
    "name": "DontCallThreadRun",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Explicitly calling Thread.run() method will execute in the caller\u0027s thread of control.  Instead, call Thread.start() for the intended behavior.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eThread t \u003d new Thread();\nt.run();            // use t.start() instead\nnew Thread().run(); // same violation\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#dontcallthreadrun"
  },
  {
    "key": "DontImportJavaLang",
    "name": "DontImportJavaLang",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid importing anything from the package \u0027java.lang\u0027.  These classes are automatically imported (JLS 7.5.3).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.lang.String;    // this is unnecessary\n\npublic class Foo {}\n\n// --- in another source code file...\n\nimport java.lang.*;         // this is bad\n\npublic class Foo {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#dontimportjavalang"
  },
  {
    "key": "DontImportSun",
    "name": "DontImportSun",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid importing anything from the \u0027sun.*\u0027 packages.  These packages are not portable and are likely to change.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport sun.misc.foo;\npublic class Foo {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#dontimportsun"
  },
  {
    "key": "DontUseFloatTypeForLoopIndices",
    "name": "DontUseFloatTypeForLoopIndices",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Don\u0027t use floating point for loop indices. If you must use floating point, use double\nunless you\u0027re certain that float provides enough precision and you have a compelling\nperformance need (space or time).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Count {\n  public static void main(String[] args) {\n    final int START \u003d 2000000000;\n    int count \u003d 0;\n    for (float f \u003d START; f \u003c START + 50; f++)\n      count++;\n      //Prints 0 because (float) START \u003d\u003d (float) (START + 50).\n      System.out.println(count);\n      //The termination test misbehaves due to floating point granularity.\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#dontusefloattypeforloopindices"
  },
  {
    "key": "DoubleCheckedLocking",
    "name": "DoubleCheckedLocking",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Partially created objects can be returned by the Double Checked Locking pattern when used in Java.\nAn optimizing JRE may assign a reference to the baz variable before it calls the constructor of the object the\nreference points to.\n\nNote: With Java 5, you can make Double checked locking work, if you declare the variable to be `volatile`.\n\nFor more details refer to: \u003chttp://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html\u003e\nor \u003chttp://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\u003e\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    /*volatile */ Object baz \u003d null; // fix for Java5 and later: volatile\n    Object bar() {\n        if (baz \u003d\u003d null) { // baz may be non-null yet not fully created\n            synchronized(this) {\n                if (baz \u003d\u003d null) {\n                    baz \u003d new Object();\n                }\n              }\n        }\n        return baz;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#doublecheckedlocking"
  },
  {
    "key": "DuplicateImports",
    "name": "DuplicateImports",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Duplicate or overlapping import statements should be avoided.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.lang.String;\nimport java.lang.*;\npublic class Foo {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#duplicateimports"
  },
  {
    "key": "EmptyCatchBlock",
    "name": "EmptyCatchBlock",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty Catch Block finds instances where an exception is caught, but nothing is done.  \nIn most circumstances, this swallows an exception which should either be acted on \nor reported.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void doSomething() {\n    try {\n        FileInputStream fis \u003d new FileInputStream(\"/tmp/bugger\");\n    } catch (IOException ioe) {\n        // not good\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptycatchblock"
  },
  {
    "key": "EmptyFinalizer",
    "name": "EmptyFinalizer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty finalize methods serve no purpose and should be removed. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n   protected void finalize() {}\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptyfinalizer"
  },
  {
    "key": "EmptyFinallyBlock",
    "name": "EmptyFinallyBlock",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty finally blocks serve no purpose and should be removed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void bar() {\n        try {\n            int x\u003d2;\n        } finally {\n            // empty!\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptyfinallyblock"
  },
  {
    "key": "EmptyIfStmt",
    "name": "EmptyIfStmt",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty If Statement finds instances where a condition is checked but nothing is done about it.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n void bar(int x) {\n  if (x \u003d\u003d 0) {\n   // empty!\n  }\n }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptyifstmt"
  },
  {
    "key": "EmptyInitializer",
    "name": "EmptyInitializer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty initializers serve no purpose and should be removed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n\n   static {} // Why ?\n\n   {} // Again, why ?\n\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptyinitializer"
  },
  {
    "key": "EmptyMethodInAbstractClassShouldBeAbstract",
    "name": "EmptyMethodInAbstractClassShouldBeAbstract",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate\nusage by developers who should be implementing their own versions in the concrete subclasses.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic abstract class ShouldBeAbstract {\n    public Object couldBeAbstract() {\n        // Should be abstract method ?\n        return null;\n    }\n\n    public void couldBeAbstract() {\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract"
  },
  {
    "key": "EmptyStatementBlock",
    "name": "EmptyStatementBlock",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty block statements serve no purpose and should be removed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n\n   private int _bar;\n\n   public void setBar(int bar) {\n      { _bar \u003d bar; } // Why not?\n      {} // But remove this.\n   }\n\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptystatementblock"
  },
  {
    "key": "EmptyStatementNotInLoop",
    "name": "EmptyStatementNotInLoop",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "An empty statement (or a semicolon by itself) that is not used as the sole body of a \u0027for\u0027 \nor \u0027while\u0027 loop is probably a bug.  It could also be a double semicolon, which has no purpose\nand should be removed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void doit() {\n      // this is probably not what you meant to do\n      ;\n      // the extra semicolon here this is not necessary\n      System.out.println(\"look at the extra semicolon\");;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptystatementnotinloop"
  },
  {
    "key": "EmptySwitchStatements",
    "name": "EmptySwitchStatements",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty switch statements serve no purpose and should be removed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    int x \u003d 2;\n    switch (x) {\n        // once there was code here\n        // but it\u0027s been commented out or something\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptyswitchstatements"
  },
  {
    "key": "EmptySynchronizedBlock",
    "name": "EmptySynchronizedBlock",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty synchronized blocks serve no purpose and should be removed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void bar() {\n        synchronized (this) {\n            // empty!\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptysynchronizedblock"
  },
  {
    "key": "EmptyTryBlock",
    "name": "EmptyTryBlock",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid empty try blocks - what\u0027s the point?\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void bar() {\n        try {\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptytryblock"
  },
  {
    "key": "EmptyWhileStmt",
    "name": "EmptyWhileStmt",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Empty While Statement finds all instances where a while statement does nothing.  \nIf it is a timing loop, then you should use Thread.sleep() for it; if it is\na while loop that does a lot in the exit expression, rewrite it to make it clearer.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003evoid bar(int a, int b) {\n    while (a \u003d\u003d b) {\n        // empty!\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#emptywhilestmt"
  },
  {
    "key": "EqualsNull",
    "name": "EqualsNull",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Tests for null should not use the equals() method. The \u0027\u003d\u003d\u0027 operator should be used instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eString x \u003d \"foo\";\n\nif (x.equals(null)) {   // bad form\n    doSomething();\n}\n\nif (x \u003d\u003d null) {        // preferred\n    doSomething();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#equalsnull"
  },
  {
    "key": "ExceptionAsFlowControl",
    "name": "ExceptionAsFlowControl",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging.\nEither add the necessary validation or use an alternate control structure.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    try {\n        try {\n        } catch (Exception e) {\n            throw new WrapperException(e);\n            // this is essentially a GOTO to the WrapperException catch block\n        }\n    } catch (WrapperException e) {\n        // do some more stuff\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#exceptionasflowcontrol"
  },
  {
    "key": "ExcessiveClassLength",
    "name": "ExcessiveClassLength",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Excessive class file lengths are usually indications that the class may be burdened with excessive \nresponsibilities that could be provided by external classes or functions. In breaking these methods\napart the code becomes more manageable and ripe for reuse.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void bar1() {\n        // 1000 lines of code\n    }\n    public void bar2() {\n        // 1000 lines of code\n    }\n    public void bar3() {\n        // 1000 lines of code\n    }\n\n    public void barN() {\n        // 1000 lines of code\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#excessiveclasslength"
  },
  {
    "key": "ExcessiveImports",
    "name": "ExcessiveImports",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A high number of imports can indicate a high degree of coupling within an object. This rule \ncounts the number of unique imports and reports a violation if the count is above the \nuser-specified threshold.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport blah.blah.Baz;\nimport blah.blah.Bif;\n// 18 others from the same package elided\npublic class Foo {\n    public void doWork() {}\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#excessiveimports"
  },
  {
    "key": "ExcessiveMethodLength",
    "name": "ExcessiveMethodLength",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "When methods are excessively long this usually indicates that the method is doing more than its\nname/signature might suggest. They also become challenging for others to digest since excessive \nscrolling causes readers to lose focus.\nTry to reduce the method length by creating helper methods and removing any copy/pasted code.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void doSomething() {\n    System.out.println(\"Hello world!\");\n    System.out.println(\"Hello world!\");\n    // 98 copies omitted for brevity.\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#excessivemethodlength"
  },
  {
    "key": "ExcessiveParameterList",
    "name": "ExcessiveParameterList",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Methods with numerous parameters are a challenge to maintain, especially if most of them share the\nsame datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void addPerson(      // too many arguments liable to be mixed up\n    int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {\n\n    . . . .\n}\n \npublic void addPerson(      // preferred approach\n    Date birthdate, BodyMeasurements measurements, int ssn) {\n\n    . . . .\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#excessiveparameterlist"
  },
  {
    "key": "ExcessivePublicCount",
    "name": "ExcessivePublicCount",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Classes with large numbers of public methods and attributes require disproportionate testing efforts\nsince combinational side effects grow rapidly and increase risk. Refactoring these classes into\nsmaller ones not only increases testability and reliability but also allows new variations to be\ndeveloped easily.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public String value;\n    public Bar something;\n    public Variable var;\n    // [... more more public attributes ...]\n\n    public void doWork() {}\n    public void doMoreWork() {}\n    public void doWorkAgain() {}\n    // [... more more public methods ...]\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#excessivepubliccount"
  },
  {
    "key": "ExtendsObject",
    "name": "ExtendsObject",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "No need to explicitly extend Object.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Object {     // not required\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#extendsobject"
  },
  {
    "key": "FieldDeclarationsShouldBeAtStartOfClass",
    "name": "FieldDeclarationsShouldBeAtStartOfClass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class HelloWorldBean {\n\n  // Field declared before methods / inner classes - OK\n  private String _thing;\n\n  public String getMessage() {\n    return \"Hello World!\";\n  }\n\n  // Field declared after methods / inner classes - avoid this\n  private String _fieldInWrongLocation;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass"
  },
  {
    "key": "FinalFieldCouldBeStatic",
    "name": "FinalFieldCouldBeStatic",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead\nin each object at runtime.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  public final int BAR \u003d 42; // this could be static and save some space\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#finalfieldcouldbestatic"
  },
  {
    "key": "FinalizeDoesNotCallSuperFinalize",
    "name": "FinalizeDoesNotCallSuperFinalize",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "If the finalize() is implemented, its last action should be to call super.finalize. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprotected void finalize() {\n    something();\n    // neglected to call super.finalize()\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#finalizedoesnotcallsuperfinalize"
  },
  {
    "key": "FinalizeOnlyCallsSuperFinalize",
    "name": "FinalizeOnlyCallsSuperFinalize",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprotected void finalize() {\n    super.finalize();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#finalizeonlycallssuperfinalize"
  },
  {
    "key": "FinalizeOverloaded",
    "name": "FinalizeOverloaded",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Methods named finalize() should not have parameters.  It is confusing and most likely an attempt to\noverload Object.finalize(). It will not be called by the VM.\n            \nNote that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    // this is confusing and probably a bug\n    protected void finalize(int a) {\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#finalizeoverloaded"
  },
  {
    "key": "FinalizeShouldBeProtected",
    "name": "FinalizeShouldBeProtected",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "When overriding the finalize(), the new method should be set as protected.  If made public, \nother classes may invoke it at inappropriate times.\n            \nNote that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void finalize() {\n    // do something\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#finalizeshouldbeprotected"
  },
  {
    "key": "ForLoopCanBeForeach",
    "name": "ForLoopCanBeForeach",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over\nlists, arrays and iterators. A loop is safe to replace if it only uses the index variable to\naccess an element of the list or array, only has one update statement, and loops through *every*\nelement of the list or array left to right.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyClass {\n  void loop(List\u003cString\u003e l) {\n    for (int i \u003d 0; i \u003c l.size(); i++) { // pre Java 1.5\n      System.out.println(l.get(i));\n    }\n\n    for (String s : l) {        // post Java 1.5\n      System.out.println(s);\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#forloopcanbeforeach"
  },
  {
    "key": "ForLoopShouldBeWhileLoop",
    "name": "ForLoopShouldBeWhileLoop",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Some for loops can be simplified to while loops, this makes them more concise.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void bar() {\n        for (;true;) true; // No Init or Update part, may as well be: while (true)\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#forloopshouldbewhileloop"
  },
  {
    "key": "ForLoopsMustUseBraces",
    "name": "ForLoopsMustUseBraces",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using \u0027for\u0027 statements without using curly braces. If the code formatting or \nindentation is lost then it becomes difficult to separate the code being controlled \nfrom the rest.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003efor (int i \u003d 0; i \u003c 42; i++)\n   foo();\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#forloopsmustusebraces"
  },
  {
    "key": "GenericsNaming",
    "name": "GenericsNaming",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Names for references to generic values should be limited to a single uppercase letter.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic interface GenericDao\u003cE extends BaseModel, K extends Serializable\u003e extends BaseDao {\n    // This is ok...\n}\n\npublic interface GenericDao\u003cE extends BaseModel, K extends Serializable\u003e {\n    // Also this\n}\n\npublic interface GenericDao\u003ce extends BaseModel, K extends Serializable\u003e {\n    // \u0027e\u0027 should be an \u0027E\u0027\n}\n\npublic interface GenericDao\u003cEF extends BaseModel, K extends Serializable\u003e {\n   // \u0027EF\u0027 is not ok.\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#genericsnaming"
  },
  {
    "key": "GodClass",
    "name": "GodClass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The God Class rule detects the God Class design flaw using metrics. God classes do too many things,\nare very big and overly complex. They should be split apart to be more object-oriented.\nThe rule uses the detection strategy described in \"Object-Oriented Metrics in Practice\".\nThe violations are reported against the entire class.\n\nSee also the references:\n\nMichele Lanza and Radu Marinescu. Object-Oriented Metrics in Practice:\nUsing Software Metrics to Characterize, Evaluate, and Improve the Design\nof Object-Oriented Systems. Springer, Berlin, 1 edition, October 2006. Page 80.",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#godclass"
  },
  {
    "key": "GuardLogStatement",
    "name": "GuardLogStatement",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Whenever using a log level, one should check if the loglevel is actually enabled, or\notherwise skip the associate String creation and manipulation.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// Add this for performance\n    if (log.isDebugEnabled() { ...\n        log.debug(\"log something\" + \" and \" + \"concat strings\");\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#guardlogstatement"
  },
  {
    "key": "HardCodedCryptoKey",
    "name": "HardCodedCryptoKey",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use hard coded values for cryptographic operations. Please store keys outside of source code.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void good() {\n        SecretKeySpec secretKeySpec \u003d new SecretKeySpec(Properties.getKey(), \"AES\");\n    }\n\n    void bad() {\n        SecretKeySpec secretKeySpec \u003d new SecretKeySpec(\"my secret here\".getBytes(), \"AES\");\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_security.html#hardcodedcryptokey"
  },
  {
    "key": "IdempotentOperations",
    "name": "IdempotentOperations",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid idempotent operations - they have no effect.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n public void bar() {\n  int x \u003d 2;\n  x \u003d x;\n }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#idempotentoperations"
  },
  {
    "key": "IdenticalCatchBranches",
    "name": "IdenticalCatchBranches",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Identical `catch` branches use up vertical space and increase the complexity of code without\n            adding functionality. It\u0027s better style to collapse identical branches into a single multi-catch\n            branch.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003etry {\n    // do something\n} catch (IllegalArgumentException e) {\n    throw e;\n} catch (IllegalStateException e) { // Can be collapsed into the previous block\n    throw e;\n}\n\ntry {\n    // do something\n} catch (IllegalArgumentException | IllegalStateException e) { // This is better\n    throw e;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#identicalcatchbranches"
  },
  {
    "key": "IfElseStmtsMustUseBraces",
    "name": "IfElseStmtsMustUseBraces",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using if..else statements without using surrounding braces. If the code formatting \nor indentation is lost then it becomes difficult to separate the code being controlled \nfrom the rest.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// this is OK\nif (foo) x++;\n\n   // but this is not\nif (foo)\n       x \u003d x+1;\n   else\n       x \u003d x-1;\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#ifelsestmtsmustusebraces"
  },
  {
    "key": "IfStmtsMustUseBraces",
    "name": "IfStmtsMustUseBraces",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using if statements without using braces to surround the code block. If the code \nformatting or indentation is lost then it becomes difficult to separate the code being\ncontrolled from the rest.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eif (foo)    // not recommended\n    x++;\n\nif (foo) {  // preferred approach\n    x++;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#ifstmtsmustusebraces"
  },
  {
    "key": "ImmutableField",
    "name": "ImmutableField",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Identifies private fields whose values never change once they are initialized either in the declaration\nof the field or by a constructor.  This helps in converting existing classes to becoming immutable ones.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  private int x; // could be final\n  public Foo() {\n      x \u003d 7;\n  }\n  public void foo() {\n     int a \u003d x + 2;\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#immutablefield"
  },
  {
    "key": "ImportFromSamePackage",
    "name": "ImportFromSamePackage",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "There is no need to import a type that lives in the same package.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epackage foo;\n\nimport foo.Buz;     // no need for this\nimport foo.*;       // or this\n\npublic class Bar{}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#importfromsamepackage"
  },
  {
    "key": "InefficientEmptyStringCheck",
    "name": "InefficientEmptyStringCheck",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "String.trim().length() \u003d\u003d 0 (or String.trim().isEmpty() for the same reason) is an inefficient\nway to check if a String is really blank, as it creates a new String object just to check its size.\nConsider creating a static function that loops through a string, checking Character.isWhitespace()\non each character and returning false if a non-whitespace character is found. A Smarter code to\ncheck for an empty string would be:\n\n```java\nprivate boolean checkTrimEmpty(String str) {\n    for(int i \u003d 0; i \u003c str.length(); i++) {\n        if(!Character.isWhitespace(str.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\nYou can refer to Apache\u0027s StringUtils#isBlank (in commons-lang),\nSpring\u0027s StringUtils#hasText (in the Spring framework) or Google\u0027s\nCharMatcher#whitespace (in Guava) for existing implementations (some might\ninclude the check for !\u003d null).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar(String string) {\n    if (string !\u003d null \u0026\u0026 string.trim().length() \u003e 0) {\n        doSomething();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#inefficientemptystringcheck"
  },
  {
    "key": "InefficientStringBuffering",
    "name": "InefficientStringBuffering",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will\nneed to be be created and destroyed by the JVM.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// Avoid this, two buffers are actually being created here\nStringBuffer sb \u003d new StringBuffer(\"tmp \u003d \"+System.getProperty(\"java.io.tmpdir\"));\n\n// do this instead\nStringBuffer sb \u003d new StringBuffer(\"tmp \u003d \");\nsb.append(System.getProperty(\"java.io.tmpdir\"));\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#inefficientstringbuffering"
  },
  {
    "key": "InsecureCryptoIv",
    "name": "InsecureCryptoIv",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void good() {\n        SecureRandom random \u003d new SecureRandom();\n        byte iv[] \u003d new byte[16];\n        random.nextBytes(bytes);\n    }\n\n    void bad() {\n        byte[] iv \u003d new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };\n    }\n    \n    void alsoBad() {\n        byte[] iv \u003d \"secret iv in here\".getBytes();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_security.html#insecurecryptoiv"
  },
  {
    "key": "InstantiationToGetClass",
    "name": "InstantiationToGetClass",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// replace this\nClass c \u003d new String().getClass();\n\n// with this:\nClass c \u003d String.class;\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#instantiationtogetclass"
  },
  {
    "key": "InsufficientStringBufferDeclaration",
    "name": "InsufficientStringBufferDeclaration",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Failing to pre-size a StringBuffer or StringBuilder properly could cause it to re-size many times\nduring runtime. This rule attempts to determine the total number the characters that are actually \npassed into StringBuffer.append(), but represents a best guess \"worst case\" scenario. An empty\nStringBuffer/StringBuilder constructor initializes the object to 16 characters. This default\nis assumed if the length of the constructor can not be determined.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eStringBuffer bad \u003d new StringBuffer();\nbad.append(\"This is a long string that will exceed the default 16 characters\");\n\nStringBuffer good \u003d new StringBuffer(41);\ngood.append(\"This is a long string, which is pre-sized\");\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#insufficientstringbufferdeclaration"
  },
  {
    "key": "IntegerInstantiation",
    "name": "IntegerInstantiation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf().\nIt makes use of an internal cache that recycles earlier instances making it more memory efficient.\nNote that new Integer() is deprecated since JDK 9 for that reason.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private Integer i \u003d new Integer(0); // change to Integer i \u003d Integer.valueOf(0);\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#integerinstantiation"
  },
  {
    "key": "InvalidSlf4jMessageFormat",
    "name": "InvalidSlf4jMessageFormat",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Check for messages in slf4j loggers with non matching number of arguments and placeholders.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eLOGGER.error(\"forget the arg {}\");\nLOGGER.error(\"too many args {}\", \"arg1\", \"arg2\");\nLOGGER.error(\"param {}\", \"arg1\", new IllegalStateException(\"arg\")); //The exception is shown separately, so is correct.\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#invalidslf4jmessageformat"
  },
  {
    "key": "JUnit4SuitesShouldUseSuiteAnnotation",
    "name": "JUnit4SuitesShouldUseSuiteAnnotation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated\nthrough the @RunWith(Suite.class) annotation.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class BadExample extends TestCase{\n\n    public static Test suite(){\n        return new Suite();\n    }\n}\n\n@RunWith(Suite.class)\n@SuiteClasses( { TestOne.class, TestTwo.class })\npublic class GoodTest {\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junit4suitesshouldusesuiteannotation"
  },
  {
    "key": "JUnit4TestShouldUseAfterAnnotation",
    "name": "JUnit4TestShouldUseAfterAnnotation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In JUnit 3, the tearDown method was used to clean up all data entities required in running tests. \nJUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyTest {\n    public void tearDown() {\n        bad();\n    }\n}\npublic class MyTest2 {\n    @After public void tearDown() {\n        good();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junit4testshoulduseafterannotation"
  },
  {
    "key": "JUnit4TestShouldUseBeforeAnnotation",
    "name": "JUnit4TestShouldUseBeforeAnnotation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In JUnit 3, the setUp method was used to set up all data entities required in running tests. \nJUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyTest {\n    public void setUp() {\n        bad();\n    }\n}\npublic class MyTest2 {\n    @Before public void setUp() {\n        good();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junit4testshouldusebeforeannotation"
  },
  {
    "key": "JUnit4TestShouldUseTestAnnotation",
    "name": "JUnit4TestShouldUseTestAnnotation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In JUnit 3, the framework executed all methods which started with the word test as a unit test. \nIn JUnit 4, only methods annotated with the @Test annotation are executed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyTest {\n    public void testBad() {\n        doSomething();\n    }\n\n    @Test\n    public void testGood() {\n        doSomething();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junit4testshouldusetestannotation"
  },
  {
    "key": "JUnitAssertionsShouldIncludeMessage",
    "name": "JUnitAssertionsShouldIncludeMessage",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "JUnit assertions should include an informative message - i.e., use the three-argument version of \nassertEquals(), not the two-argument version.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends TestCase {\n    public void testSomething() {\n        assertEquals(\"foo\", \"bar\");\n        // Use the form:\n        // assertEquals(\"Foo does not equals bar\", \"foo\", \"bar\");\n        // instead\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage"
  },
  {
    "key": "JUnitSpelling",
    "name": "JUnitSpelling",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Some JUnit framework methods are easy to misspell.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport junit.framework.*;\n\npublic class Foo extends TestCase {\n    public void setup() {}    // oops, should be setUp\n    public void TearDown() {} // oops, should be tearDown\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#junitspelling"
  },
  {
    "key": "JUnitStaticSuite",
    "name": "JUnitStaticSuite",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The suite() method in a JUnit test needs to be both public and static.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport junit.framework.*;\n\npublic class Foo extends TestCase {\n    public void suite() {}         // oops, should be static\n    private static void suite() {} // oops, should be public\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#junitstaticsuite"
  },
  {
    "key": "JUnitTestContainsTooManyAsserts",
    "name": "JUnitTestContainsTooManyAsserts",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "JUnit tests should not contain too many asserts.  Many asserts are indicative of a complex test, for which \nit is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.  \nCustomize the maximum number of assertions used by this Rule to suit your needs.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyTestCase extends TestCase {\n    // Ok\n    public void testMyCaseWithOneAssert() {\n        boolean myVar \u003d false;\n        assertFalse(\"should be false\", myVar);\n    }\n\n    // Bad, too many asserts (assuming max\u003d1)\n    public void testMyCaseWithMoreAsserts() {\n        boolean myVar \u003d false;\n        assertFalse(\"myVar should be false\", myVar);\n        assertEquals(\"should equals false\", false, myVar);\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junittestcontainstoomanyasserts"
  },
  {
    "key": "JUnitTestsShouldIncludeAssert",
    "name": "JUnitTestsShouldIncludeAssert",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "JUnit tests should include at least one assertion.  This makes the tests more robust, and using assert \nwith messages provide the developer a clearer idea of what the test does.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends TestCase {\n   public void testSomething() {\n      Bar b \u003d findBar();\n   // This is better than having a NullPointerException\n   // assertNotNull(\"bar not found\", b);\n   b.work();\n   }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junittestsshouldincludeassert"
  },
  {
    "key": "JUnitUseExpected",
    "name": "JUnitUseExpected",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyTest {\n    @Test\n    public void testBad() {\n        try {\n            doSomething();\n            fail(\"should have thrown an exception\");\n        } catch (Exception e) {\n        }\n    }\n\n    @Test(expected\u003dException.class)\n    public void testGood() {\n        doSomething();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#junituseexpected"
  },
  {
    "key": "JumbledIncrementer",
    "name": "JumbledIncrementer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class JumbledIncrementerRule1 {\n    public void foo() {\n        for (int i \u003d 0; i \u003c 10; i++) {          // only references \u0027i\u0027\n            for (int k \u003d 0; k \u003c 20; i++) {      // references both \u0027i\u0027 and \u0027k\u0027\n                System.out.println(\"Hello\");\n            }\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#jumbledincrementer"
  },
  {
    "key": "LawOfDemeter",
    "name": "LawOfDemeter",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The Law of Demeter is a simple rule, that says \"only talk to friends\". It helps to reduce coupling between classes\nor objects.\n\nSee also the references:\n\n*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;\n*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;\n*   \u003chttp://www.ccs.neu.edu/home/lieber/LoD.html\u003e\n*   \u003chttp://en.wikipedia.org/wiki/Law_of_Demeter\u003e\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    /**\n     * This example will result in two violations.\n     */\n    public void example(Bar b) {\n        // this method call is ok, as b is a parameter of \"example\"\n        C c \u003d b.getC();\n\n        // this method call is a violation, as we are using c, which we got from B.\n        // We should ask b directly instead, e.g. \"b.doItOnC();\"\n        c.doIt();\n\n        // this is also a violation, just expressed differently as a method chain without temporary variables.\n        b.getC().doIt();\n\n        // a constructor call, not a method call.\n        D d \u003d new D();\n        // this method call is ok, because we have create the new instance of D locally.\n        d.doSomethingElse(); \n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#lawofdemeter"
  },
  {
    "key": "LocalHomeNamingConvention",
    "name": "LocalHomeNamingConvention",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The Local Home interface of a Session EJB should be suffixed by \u0027LocalHome\u0027.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#localhomenamingconvention"
  },
  {
    "key": "LocalInterfaceSessionNamingConvention",
    "name": "LocalInterfaceSessionNamingConvention",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The Local Interface of a Session EJB should be suffixed by \u0027Local\u0027.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#localinterfacesessionnamingconvention"
  },
  {
    "key": "LocalVariableCouldBeFinal",
    "name": "LocalVariableCouldBeFinal",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A local variable assigned only once can be declared final.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Bar {\n    public void foo () {\n    String txtA \u003d \"a\";          // if txtA will not be assigned again it is better to do this:\n    final String txtB \u003d \"b\";\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal"
  },
  {
    "key": "LoggerIsNotStaticFinal",
    "name": "LoggerIsNotStaticFinal",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "In most cases, the Logger reference can be declared as static and final.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo{\n    Logger log \u003d Logger.getLogger(Foo.class.getName());                 // not recommended\n\n    static final Logger log \u003d Logger.getLogger(Foo.class.getName());    // preferred approach\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#loggerisnotstaticfinal"
  },
  {
    "key": "LogicInversion",
    "name": "LogicInversion",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use opposite operator instead of negating the whole expression with a logic complement operator.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic boolean bar(int a, int b) {\n\n    if (!(a \u003d\u003d b)) { // use !\u003d\n         return false;\n     }\n\n    if (!(a \u003c b)) { // use \u003e\u003d\n         return false;\n    }\n\n    return true;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#logicinversion"
  },
  {
    "key": "LongInstantiation",
    "name": "LongInstantiation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf().\nIt makes use of an internal cache that recycles earlier instances making it more memory efficient.\nNote that new Long() is deprecated since JDK 9 for that reason.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private Long i \u003d new Long(0); // change to Long i \u003d Long.valueOf(0);\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#longinstantiation"
  },
  {
    "key": "LongVariable",
    "name": "LongVariable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Something {\n    int reallyLongIntName \u003d -3;             // VIOLATION - Field\n    public static void main( String argumentsList[] ) { // VIOLATION - Formal\n        int otherReallyLongName \u003d -5;       // VIOLATION - Local\n        for (int interestingIntIndex \u003d 0;   // VIOLATION - For\n             interestingIntIndex \u003c 10;\n             interestingIntIndex ++ ) {\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#longvariable"
  },
  {
    "key": "LooseCoupling",
    "name": "LooseCoupling",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The use of implementation types (i.e., HashSet) as object references limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, referencing objects\nby their interface types (i.e, Set) provides much more flexibility.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class Bar {\n    // sub-optimal approach\n    private ArrayList\u003cSomeType\u003e list \u003d new ArrayList\u003c\u003e();\n\n    public HashSet\u003cSomeType\u003e getFoo() {\n        return new HashSet\u003cSomeType\u003e();\n    }\n\n    // preferred approach\n    private List\u003cSomeType\u003e list \u003d new ArrayList\u003c\u003e();\n\n    public Set\u003cSomeType\u003e getFoo() {\n        return new HashSet\u003cSomeType\u003e();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#loosecoupling"
  },
  {
    "key": "LoosePackageCoupling",
    "name": "LoosePackageCoupling",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using classes from the configured package hierarchy outside of the package hierarchy, \nexcept when using one of the configured allowed classes.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epackage some.package;\n\nimport some.other.package.subpackage.subsubpackage.DontUseThisClass;\n\npublic class Bar {\n    DontUseThisClass boo \u003d new DontUseThisClass();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#loosepackagecoupling"
  },
  {
    "key": "MDBAndSessionBeanNamingConvention",
    "name": "MDBAndSessionBeanNamingConvention",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by \u0027Bean\u0027.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SomeBean implements SessionBean{}                  // proper name\n\npublic class MissingTheProperSuffix implements SessionBean {}   // non-standard name\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#mdbandsessionbeannamingconvention"
  },
  {
    "key": "MIsLeadingVariableName",
    "name": "MIsLeadingVariableName",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Detects when a non-field has a name starting with \u0027m_\u0027.  This usually denotes a field and could be confusing.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private int m_foo; // OK\n    public void bar(String m_baz) { // Bad\n      int m_boz \u003d 42; // Bad\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#misleadingvariablename"
  },
  {
    "key": "MethodArgumentCouldBeFinal",
    "name": "MethodArgumentCouldBeFinal",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A method argument that is never re-assigned within the method can be declared final.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void foo1 (String param) {       // do stuff with param never assigning it\n\n}\n\npublic void foo2 (final String param) { // better, do stuff with param never assigning it\n\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#methodargumentcouldbefinal"
  },
  {
    "key": "MethodNamingConventions",
    "name": "MethodNamingConventions",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void fooStuff() {\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#methodnamingconventions"
  },
  {
    "key": "MethodReturnsInternalArray",
    "name": "MethodReturnsInternalArray",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Exposing internal arrays to the caller violates object encapsulation since elements can be \nremoved or replaced outside of the object that owns it. It is safer to return a copy of the array.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SecureSystem {\n    UserData [] ud;\n    public UserData [] getUserData() {\n        // Don\u0027t return directly the internal array, return a copy\n        return ud;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#methodreturnsinternalarray"
  },
  {
    "key": "MethodWithSameNameAsEnclosingClass",
    "name": "MethodWithSameNameAsEnclosingClass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Non-constructor methods should not have the same name as the enclosing class.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyClass {\n\n    public MyClass() {}         // this is OK because it is a constructor\n\n    public void MyClass() {}    // this is bad because it is a method\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#methodwithsamenameasenclosingclass"
  },
  {
    "key": "MisplacedNullCheck",
    "name": "MisplacedNullCheck",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The null check here is misplaced. If the variable is null a NullPointerException will be thrown.\nEither the check is useless (the variable will never be \"null\") or it is incorrect.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void bar() {\n        if (a.equals(baz) || a \u003d\u003d null) {}\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#misplacednullcheck"
  },
  {
    "key": "MissingBreakInSwitch",
    "name": "MissingBreakInSwitch",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Switch statements without break or return statements for each case option\nmay indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar(int status) {\n    switch(status) {\n      case CANCELLED:\n        doCancelled();\n        // break; hm, should this be commented out?\n      case NEW:\n        doNew();\n        // is this really a fall-through?\n      case REMOVED:\n        doRemoved();\n        // what happens if you add another case after this one?\n      case OTHER: // empty case - this is interpreted as an intentional fall-through\n      case ERROR:\n        doErrorHandling();\n        break;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#missingbreakinswitch"
  },
  {
    "key": "MissingOverride",
    "name": "MissingOverride",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo implements Runnable {\n                // This method is overridden, and should have an @Override annotation\n                public void run() {\n\n                }\n            }\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#missingoverride"
  },
  {
    "key": "MissingSerialVersionUID",
    "name": "MissingSerialVersionUID",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Serializable classes should provide a serialVersionUID field.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo implements java.io.Serializable {\n    String name;\n    // Define serialization id to avoid serialization related bugs\n    // i.e., public static final long serialVersionUID \u003d 4328743;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#missingserialversionuid"
  },
  {
    "key": "MissingStaticMethodInNonInstantiatableClass",
    "name": "MissingStaticMethodInNonInstantiatableClass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A class that has private constructors and does not have any static methods or fields cannot be used.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// This class is unusable, since it cannot be\n// instantiated (private constructor),\n// and no static method can be called.\n\npublic class Foo {\n  private Foo() {}\n  void foo() {}\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#missingstaticmethodinnoninstantiatableclass"
  },
  {
    "key": "ModifiedCyclomaticComplexity",
    "name": "ModifiedCyclomaticComplexity",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Complexity directly affects maintenance costs is determined by the number of decision points in a method \nplus one for the method entry.  The decision points include \u0027if\u0027, \u0027while\u0027, \u0027for\u0027, and \u0027case labels\u0027 calls.  \nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. Modified complexity treats switch statements as a single\ndecision point.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {    // This has a Cyclomatic Complexity \u003d 9\n1   public void example()  {\n2       if (a \u003d\u003d b)  {\n3           if (a1 \u003d\u003d b1) {\n                fiddle();\n4           } else if a2 \u003d\u003d b2) {\n                fiddle();\n            }  else {\n                fiddle();\n            }\n5       } else if (c \u003d\u003d d) {\n6           while (c \u003d\u003d d) {\n                fiddle();\n            }\n7        } else if (e \u003d\u003d f) {\n8           for (int n \u003d 0; n \u003c h; n++) {\n                fiddle();\n            }\n        } else{\n9           switch (z) {\n                case 1:\n                    fiddle();\n                    break;\n                case 2:\n                    fiddle();\n                    break;\n                case 3:\n                    fiddle();\n                    break;\n                default:\n                    fiddle();\n                    break;\n            }\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#modifiedcyclomaticcomplexity"
  },
  {
    "key": "MoreThanOneLogger",
    "name": "MoreThanOneLogger",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Normally only one logger is used in each class.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    Logger log \u003d Logger.getLogger(Foo.class.getName());\n    // It is very rare to see two loggers on a class, normally\n    // log information is multiplexed by levels\n    Logger log2\u003d Logger.getLogger(Foo.class.getName());\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#morethanonelogger"
  },
  {
    "key": "NPathComplexity",
    "name": "NPathComplexity",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The NPath complexity of a method is the number of acyclic execution paths through that method.\nWhile cyclomatic complexity counts the number of decision points in a method, NPath counts the number of\nfull paths from the beginning to the end of the block of the method. That metric grows exponentially, as\nit multiplies the complexity of statements in the same block. For more details on the calculation, see the\ndocumentation of the [NPath metric](/pmd_java_metrics_index.html#npath-complexity-npath).\n\nA threshold of 200 is generally considered the point where measures should be taken to reduce\ncomplexity and increase readability.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  public static void bar() { // Ncss \u003d 252: reported!\n    boolean a, b \u003d true;\n    try { // 2 * 2 + 2 \u003d 6\n      if (true) { // 2\n        List buz \u003d new ArrayList();\n      }\n\n      for(int i \u003d 0; i \u003c 19; i++) { // * 2\n        List buz \u003d new ArrayList();\n      }\n    } catch(Exception e) {\n      if (true) { // 2\n        e.printStackTrace();\n      }\n    }\n\n    while (j++ \u003c 20) { //  * 2\n      List buz \u003d new ArrayList();\n    }\n\n    switch(j) { // * 7\n      case 1:\n      case 2: break;\n      case 3: j \u003d 5; break;\n      case 4: if (b \u0026\u0026 a) { bar(); } break;\n      default: break;\n    }\n\n    do { // * 3\n        List buz \u003d new ArrayList();\n    } while (a \u0026\u0026 j++ \u003c 30);\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#npathcomplexity"
  },
  {
    "key": "NcssConstructorCount",
    "name": "NcssConstructorCount",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines\nof code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,\nlines of code that are split are counted as one.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Bar {\n    public Foo() {\n        super();\n\n\n\n\n\n        //this constructor only has 1 NCSS lines\n        super.foo();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#ncssconstructorcount"
  },
  {
    "key": "NcssCount",
    "name": "NcssCount",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation of\nthe [NCSS metric](/pmd_java_metrics_index.html#non-commenting-source-statements-ncss).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.util.Collections;       // +0\nimport java.io.IOException;         // +0\n\nclass Foo {                         // +1, total Ncss \u003d 12\n\n  public void bigMethod()           // +1\n      throws IOException {\n    int x \u003d 0, y \u003d 2;               // +1\n    boolean a \u003d false, b \u003d true;    // +1\n\n    if (a || b) {                   // +1\n      try {                         // +1\n        do {                        // +1\n          x +\u003d 2;                   // +1\n        } while (x \u003c 12);\n\n        System.exit(0);             // +1\n      } catch (IOException ioe) {   // +1\n        throw new PatheticFailException(ioe); // +1\n      }\n    } else {\n      assert false;                 // +1\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#ncsscount"
  },
  {
    "key": "NcssMethodCount",
    "name": "NcssMethodCount",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines\nof code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,\nlines of code that are split are counted as one.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Bar {\n    public int methd() {\n        super.methd();\n\n\n\n\n\n\n        //this method only has 1 NCSS lines\n        return 1;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#ncssmethodcount"
  },
  {
    "key": "NcssTypeCount",
    "name": "NcssTypeCount",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines\nof code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,\nlines of code that are split are counted as one.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo extends Bar {\n    public Foo() {\n        //this class only has 6 NCSS lines\n        super();\n\n\n\n\n\n        super.foo();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#ncsstypecount"
  },
  {
    "key": "NoPackage",
    "name": "NoPackage",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Detects when a class or interface does not have a package definition.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// no package declaration\npublic class ClassInDefaultPackage {\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#nopackage"
  },
  {
    "key": "NonCaseLabelInSwitchStatement",
    "name": "NonCaseLabelInSwitchStatement",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A non-case label (e.g. a named break/continue label) was present in a switch statement.\nThis legal, but confusing. It is easy to mix up the case labels and the non-case labels.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  void bar(int a) {\n   switch (a) {\n     case 1:\n       // do something\n       break;\n     mylabel: // this is legal, but confusing!\n       break;\n     default:\n       break;\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#noncaselabelinswitchstatement"
  },
  {
    "key": "NonStaticInitializer",
    "name": "NonStaticInitializer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A non-static initializer block will be called any time a constructor is invoked (just prior to\ninvoking the constructor).  While this is a valid language construct, it is rarely used and is\nconfusing.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyClass {\n  // this block gets run before any call to a constructor\n  {\n    System.out.println(\"I am about to construct myself\");\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#nonstaticinitializer"
  },
  {
    "key": "NonThreadSafeSingleton",
    "name": "NonThreadSafeSingleton",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Non-thread safe singletons can result in bad state changes. Eliminate\nstatic singletons if possible by instantiating the object directly. Static\nsingletons are usually not needed as only a single instance exists anyway.\nOther possible fixes are to synchronize the entire method or to use an\n[initialize-on-demand holder class](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom).\n\nRefrain from using the double-checked locking pattern. The Java Memory Model doesn\u0027t\nguarantee it to work unless the variable is declared as `volatile`, adding an uneeded\nperformance penalty. [Reference](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html)\n\nSee Effective Java, item 48.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprivate static Foo foo \u003d null;\n\n//multiple simultaneous callers may see partially initialized objects\npublic static Foo getFoo() {\n    if (foo\u003d\u003dnull) {\n        foo \u003d new Foo();\n    }\n    return foo;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#nonthreadsafesingleton"
  },
  {
    "key": "NullAssignment",
    "name": "NullAssignment",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Assigning a \"null\" to a variable (outside of its declaration) is usually bad form.  Sometimes, this type\nof assignment is an indication that the programmer doesn\u0027t completely understand what is going on in the code.\n\nNOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n  Object x \u003d null; // this is OK\n  x \u003d new Object();\n     // big, complex piece of code here\n  x \u003d null; // this is not required\n     // big, complex piece of code here\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#nullassignment"
  },
  {
    "key": "OneDeclarationPerLine",
    "name": "OneDeclarationPerLine",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Java allows the use of several variables declaration of the same type on one line. However, it\ncan lead to quite messy code. This rule looks for several declarations on the same line.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eString name;            // separate declarations\nString lastname;\n\nString name, lastname;  // combined declaration, a violation\n\nString name,\n       lastname;        // combined declaration on multiple lines, no violation by default.\n                        // Set property strictMode to true to mark this as violation.\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#onedeclarationperline"
  },
  {
    "key": "OnlyOneReturn",
    "name": "OnlyOneReturn",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A method should have only one exit point, and that should be the last statement in the method.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class OneReturnOnly1 {\n  public void foo(int x) {\n    if (x \u003e 0) {\n      return \"hey\";   // first exit\n    }\n    return \"hi\";    // second exit\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#onlyonereturn"
  },
  {
    "key": "OptimizableToArrayCall",
    "name": "OptimizableToArrayCall",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Calls to a collection\u0027s `toArray(E[])` method should specify a target array of zero size. This allows the JVM\nto optimize the memory allocation and copying as much as possible.\n\nPrevious versions of this rule (pre PMD 6.0.0) suggested the opposite, but current JVM implementations\nperform always better, when they have full control over the target array. And allocation an array via\nreflection is nowadays as fast as the direct allocation.\n\nSee also [Arrays of Wisdom of the Ancients](https://shipilev.net/blog/2016/arrays-wisdom-ancients/)\n\nNote: If you don\u0027t need an array of the correct type, then the simple `toArray()` method without an array\nis faster, but returns only an array of type `Object[]`.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eList\u003cFoo\u003e foos \u003d getFoos();\n\n// much better; this one allows the jvm to allocate an array of the correct size and effectively skip\n// the zeroing, since each array element will be overridden anyways\nFoo[] fooArray \u003d foos.toArray(new Foo[0]);\n\n// inefficient, the array needs to be zeroed out by the jvm before it is handed over to the toArray method\nFoo[] fooArray \u003d foos.toArray(new Foo[foos.size()]);\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#optimizabletoarraycall"
  },
  {
    "key": "OverrideBothEqualsAndHashcode",
    "name": "OverrideBothEqualsAndHashcode",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Bar {        // poor, missing a hashcode() method\n    public boolean equals(Object o) {\n      // do some comparison\n    }\n}\n\npublic class Baz {        // poor, missing an equals() method\n    public int hashCode() {\n      // return some hash value\n    }\n}\n\npublic class Foo {        // perfect, both methods provided\n    public boolean equals(Object other) {\n      // do some comparison\n    }\n    public int hashCode() {\n      // return some hash value\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#overridebothequalsandhashcode"
  },
  {
    "key": "PackageCase",
    "name": "PackageCase",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Detects when a package definition contains uppercase characters.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epackage com.MyCompany;  // should be lowercase name\n\npublic class SomeClass {\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#packagecase"
  },
  {
    "key": "PositionLiteralsFirstInCaseInsensitiveComparisons",
    "name": "PositionLiteralsFirstInCaseInsensitiveComparisons",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Position literals first in comparisons, if the second argument is null then NullPointerExceptions\ncan be avoided, they will just return false.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo {\n  boolean bar(String x) {\n    return x.equalsIgnoreCase(\"2\"); // should be \"2\".equalsIgnoreCase(x)\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#positionliteralsfirstincaseinsensitivecomparisons"
  },
  {
    "key": "PositionLiteralsFirstInComparisons",
    "name": "PositionLiteralsFirstInComparisons",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Position literals first in comparisons, if the second argument is null then NullPointerExceptions\ncan be avoided, they will just return false.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo {\n  boolean bar(String x) {\n    return x.equals(\"2\"); // should be \"2\".equals(x)\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#positionliteralsfirstincomparisons"
  },
  {
    "key": "PrematureDeclaration",
    "name": "PrematureDeclaration",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn\u0027t use it that also has the ability to return or throw an exception.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic int getLength(String[] strings) {\n\n    int length \u003d 0; // declared prematurely\n\n    if (strings \u003d\u003d null || strings.length \u003d\u003d 0) return 0;\n\n    for (String str : strings) {\n        length +\u003d str.length();\n    }\n\n    return length;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#prematuredeclaration"
  },
  {
    "key": "PreserveStackTrace",
    "name": "PreserveStackTrace",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Throwing a new exception from a catch block without passing the original exception into the\nnew exception will cause the original stack trace to be lost making it difficult to debug\neffectively.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void good() {\n        try{\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw new Exception(e); // first possibility to create exception chain\n        }\n        try {\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.\n        }\n    }\n    void bad() {\n        try{\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#preservestacktrace"
  },
  {
    "key": "ProperCloneImplementation",
    "name": "ProperCloneImplementation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Object clone() should be implemented with super.clone().\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo{\n    public Object clone(){\n        return new Foo(); // This is bad\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#propercloneimplementation"
  },
  {
    "key": "ProperLogger",
    "name": "ProperLogger",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A logger should normally be defined private static final and be associated with the correct class.\nPrivate final Log log; is also allowed for rare cases where loggers need to be passed around,\nwith the restriction that the logger needs to be passed into the constructor.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n\n    private static final Log LOG \u003d LogFactory.getLog(Foo.class);    // proper way\n\n    protected Log LOG \u003d LogFactory.getLog(Testclass.class);         // wrong approach\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#properlogger"
  },
  {
    "key": "RedundantFieldInitializer",
    "name": "RedundantFieldInitializer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Java will initialize fields with known default values so any explicit initialization of those same defaults\nis redundant and results in a larger class file (approximately three additional bytecode instructions per field).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class C {\n    boolean b   \u003d false;    // examples of redundant initializers\n    byte by     \u003d 0;\n    short s     \u003d 0;\n    char c      \u003d 0;\n    int i       \u003d 0;\n    long l      \u003d 0;\n\n    float f     \u003d .0f;    // all possible float literals\n    doable d    \u003d 0d;     // all possible double literals\n    Object o    \u003d null;\n\n    MyClass mca[] \u003d null;\n    int i1 \u003d 0, ia1[] \u003d null;\n\n    class Nested {\n        boolean b \u003d false;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#redundantfieldinitializer"
  },
  {
    "key": "RemoteInterfaceNamingConvention",
    "name": "RemoteInterfaceNamingConvention",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Remote Interface of a Session EJB should not have a suffix.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e/* Poor Session suffix */\npublic interface BadSuffixSession extends javax.ejb.EJBObject {}\n\n/* Poor EJB suffix */\npublic interface BadSuffixEJB extends javax.ejb.EJBObject {}\n\n/* Poor Bean suffix */\npublic interface BadSuffixBean extends javax.ejb.EJBObject {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#remoteinterfacenamingconvention"
  },
  {
    "key": "RemoteSessionInterfaceNamingConvention",
    "name": "RemoteSessionInterfaceNamingConvention",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A Remote Home interface type of a Session EJB should be suffixed by \u0027Home\u0027.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#remotesessioninterfacenamingconvention"
  },
  {
    "key": "ReplaceEnumerationWithIterator",
    "name": "ReplaceEnumerationWithIterator",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Consider replacing Enumeration usages with the newer java.util.Iterator\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo implements Enumeration {\n    private int x \u003d 42;\n    public boolean hasMoreElements() {\n        return true;\n    }\n    public Object nextElement() {\n        return String.valueOf(i++);\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#replaceenumerationwithiterator"
  },
  {
    "key": "ReplaceHashtableWithMap",
    "name": "ReplaceHashtableWithMap",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void bar() {\n        Hashtable h \u003d new Hashtable();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#replacehashtablewithmap"
  },
  {
    "key": "ReplaceVectorWithList",
    "name": "ReplaceVectorWithList",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void bar() {\n        Vector v \u003d new Vector();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#replacevectorwithlist"
  },
  {
    "key": "ReturnEmptyArrayRatherThanNull",
    "name": "ReturnEmptyArrayRatherThanNull",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "For any method that returns an array, it is a better to return an empty array rather than a\nnull reference. This removes the need for null checking all results and avoids inadvertent\nNullPointerExceptions.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Example {\n    // Not a good idea...\n    public int[] badBehavior() {\n        // ...\n        return null;\n    }\n\n    // Good behavior\n    public String[] bonnePratique() {\n        //...\n        return new String[0];\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull"
  },
  {
    "key": "ReturnFromFinallyBlock",
    "name": "ReturnFromFinallyBlock",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid returning from a finally block, this can discard exceptions.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Bar {\n    public String foo() {\n        try {\n            throw new Exception( \"My Exception\" );\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            return \"A. O. K.\"; // return not recommended here\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#returnfromfinallyblock"
  },
  {
    "key": "ShortClassName",
    "name": "ShortClassName",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Short Classnames with fewer than e.g. five characters are not recommended.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#shortclassname"
  },
  {
    "key": "ShortInstantiation",
    "name": "ShortInstantiation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf().\nIt makes use of an internal cache that recycles earlier instances making it more memory efficient.\nNote that new Short() is deprecated since JDK 9 for that reason.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private Short i \u003d new Short(0); // change to Short i \u003d Short.valueOf(0);\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#shortinstantiation"
  },
  {
    "key": "ShortMethodName",
    "name": "ShortMethodName",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Method names that are very short are not helpful to the reader.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class ShortMethod {\n    public void a( int i ) { // Violation\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#shortmethodname"
  },
  {
    "key": "ShortVariable",
    "name": "ShortVariable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Fields, local variables, or parameter names that are very short are not helpful to the reader.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Something {\n    private int q \u003d 15;                         // field - too short\n    public static void main( String as[] ) {    // formal arg - too short\n        int r \u003d 20 + q;                         // local var - too short\n        for (int i \u003d 0; i \u003c 10; i++) {          // not a violation (inside \u0027for\u0027 loop)\n            r +\u003d q;\n        }\n        for (Integer i : numbers) {             // not a violation (inside \u0027for-each\u0027 loop)\n            r +\u003d q;\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#shortvariable"
  },
  {
    "key": "SignatureDeclareThrowsException",
    "name": "SignatureDeclareThrowsException",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A method/constructor shouldn\u0027t explicitly throw the generic java.lang.Exception, since it\nis unclear which exceptions that can be thrown from the methods. It might be\ndifficult to document and understand such vague interfaces. Use either a class\nderived from RuntimeException or a checked exception.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void foo() throws Exception {\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#signaturedeclarethrowsexception"
  },
  {
    "key": "SimpleDateFormatNeedsLocale",
    "name": "SimpleDateFormatNeedsLocale",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate\nformatting is used.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  // Should specify Locale.US (or whatever)\n  private SimpleDateFormat sdf \u003d new SimpleDateFormat(\"pattern\");\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#simpledateformatneedslocale"
  },
  {
    "key": "SimplifiedTernary",
    "name": "SimplifiedTernary",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Look for ternary operators with the form `condition ? literalBoolean : foo`\nor `condition ? foo : literalBoolean`.\n\nThese expressions can be simplified respectively to\n`condition || foo`  when the literalBoolean is true\n`!condition \u0026\u0026 foo` when the literalBoolean is false\nor\n`!condition || foo` when the literalBoolean is true\n`condition \u0026\u0026 foo`  when the literalBoolean is false\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public boolean test() {\n        return condition ? true : something(); // can be as simple as return condition || something();\n    }\n\n    public void test2() {\n        final boolean value \u003d condition ? false : something(); // can be as simple as value \u003d !condition \u0026\u0026 something();\n    }\n\n    public boolean test3() {\n        return condition ? something() : true; // can be as simple as return !condition || something();\n    }\n\n    public void test4() {\n        final boolean otherValue \u003d condition ? something() : false; // can be as simple as condition \u0026\u0026 something();\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#simplifiedternary"
  },
  {
    "key": "SimplifyBooleanAssertion",
    "name": "SimplifyBooleanAssertion",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid negation in an assertTrue or assertFalse test.\n\nFor example, rephrase:\n\n    assertTrue(!expr);\n\nas:\n\n    assertFalse(expr);\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SimpleTest extends TestCase {\n    public void testX() {\n        assertTrue(\"not empty\", !r.isEmpty());  // replace with assertFalse(\"not empty\", r.isEmpty())\n        assertFalse(!r.isEmpty());              // replace with assertTrue(r.isEmpty())\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#simplifybooleanassertion"
  },
  {
    "key": "SimplifyBooleanExpressions",
    "name": "SimplifyBooleanExpressions",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Bar {\n  // can be simplified to\n  // bar \u003d isFoo();\n  private boolean bar \u003d (isFoo() \u003d\u003d true);\n\n  public isFoo() { return false;}\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#simplifybooleanexpressions"
  },
  {
    "key": "SimplifyBooleanReturns",
    "name": "SimplifyBooleanReturns",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic boolean isBarEqualTo(int x) {\n    if (bar \u003d\u003d x) {      // this bit of code...\n        return true;\n    } else {\n        return false;\n    }\n}\n\npublic boolean isBarEqualTo(int x) {\n    return bar \u003d\u003d x;    // can be replaced with this\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#simplifybooleanreturns"
  },
  {
    "key": "SimplifyConditional",
    "name": "SimplifyConditional",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo {\n  void bar(Object x) {\n    if (x !\u003d null \u0026\u0026 x instanceof Bar) {\n      // just drop the \"x !\u003d null\" check\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#simplifyconditional"
  },
  {
    "key": "SimplifyStartsWith",
    "name": "SimplifyStartsWith",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Since it passes in a literal of length 1, calls to (string).startsWith can be rewritten using (string).charAt(0)\nat the expense of some readability.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n\n    boolean checkIt(String x) {\n        return x.startsWith(\"a\");   // suboptimal\n    }\n\n    boolean fasterCheckIt(String x) {\n        return x.charAt(0) \u003d\u003d \u0027a\u0027;  // faster approach\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#simplifystartswith"
  },
  {
    "key": "SingleMethodSingleton",
    "name": "SingleMethodSingleton",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Some classes contain overloaded getInstance. The problem with overloaded getInstance methods\nis that the instance created using the overloaded method is not cached and so,\nfor each call and new objects will be created for every invocation.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Singleton {\n\n    private static Singleton singleton \u003d new Singleton( );\n\n    private Singleton(){ }\n\n    public static Singleton getInstance( ) {\n        return singleton;\n    }\n\n    public static Singleton getInstance(Object obj){\n        Singleton singleton \u003d (Singleton) obj;\n        return singleton;           //violation\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#singlemethodsingleton"
  },
  {
    "key": "SingletonClassReturningNewInstance",
    "name": "SingletonClassReturningNewInstance",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Some classes contain overloaded getInstance. The problem with overloaded getInstance methods\nis that the instance created using the overloaded method is not cached and so,\nfor each call and new objects will be created for every invocation.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Singleton {\n    private static Singleton instance \u003d null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class) {\n            return new Singleton();\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#singletonclassreturningnewinstance"
  },
  {
    "key": "SingularField",
    "name": "SingularField",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Fields whose scopes are limited to just single methods do not rely on the containing\nobject to provide them to other methods. They may be better implemented as local variables\nwithin those methods.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private int x;  // no reason to exist at the Foo instance level\n    public void foo(int y) {\n     x \u003d y + 5;\n     return x;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#singularfield"
  },
  {
    "key": "StaticEJBFieldShouldBeFinal",
    "name": "StaticEJBFieldShouldBeFinal",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "According to the J2EE specification, an EJB should not have any static fields\nwith write access. However, static read-only fields are allowed. This ensures proper\nbehavior especially when instances are distributed by the container on several JREs.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SomeEJB extends EJBObject implements EJBLocalHome {\n\n    private static int CountA;          // poor, field can be edited\n\n    private static final int CountB;    // preferred, read-only access\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#staticejbfieldshouldbefinal"
  },
  {
    "key": "StdCyclomaticComplexity",
    "name": "StdCyclomaticComplexity",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Complexity directly affects maintenance costs is determined by the number of decision points in a method \nplus one for the method entry.  The decision points include \u0027if\u0027, \u0027while\u0027, \u0027for\u0027, and \u0027case labels\u0027 calls.  \nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {    // This has a Cyclomatic Complexity \u003d 12\n1   public void example()  {\n2       if (a \u003d\u003d b || (c \u003d\u003d d \u0026\u0026 e \u003d\u003d f))  { // Only one\n3           if (a1 \u003d\u003d b1) {\n                fiddle();\n4           } else if a2 \u003d\u003d b2) {\n                fiddle();\n            }  else {\n                fiddle();\n            }\n5       } else if (c \u003d\u003d d) {\n6           while (c \u003d\u003d d) {\n                fiddle();\n            }\n7        } else if (e \u003d\u003d f) {\n8           for (int n \u003d 0; n \u003c h; n++) {\n                fiddle();\n            }\n        } else{\n            switch (z) {\n9               case 1:\n                    fiddle();\n                    break;\n10              case 2:\n                    fiddle();\n                    break;\n11              case 3:\n                    fiddle();\n                    break;\n12              default:\n                    fiddle();\n                    break;\n            }\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#stdcyclomaticcomplexity"
  },
  {
    "key": "StringBufferInstantiationWithChar",
    "name": "StringBufferInstantiationWithChar",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Individual character values provided as initialization arguments will be converted into integers.\nThis can lead to internal buffer sizes that are larger than expected. Some examples:\n\n```\nnew StringBuffer()      //  16\nnew StringBuffer(6)     //  6\nnew StringBuffer(\"hello world\")  // 11 + 16 \u003d 27\nnew StringBuffer(\u0027A\u0027)   //  chr(A) \u003d 65\nnew StringBuffer(\"A\")   //  1 + 16 \u003d 17 \n\nnew StringBuilder()     //  16\nnew StringBuilder(6)    //  6\nnew StringBuilder(\"hello world\")  // 11 + 16 \u003d 27\nnew StringBuilder(\u0027C\u0027)   //  chr(C) \u003d 67\nnew StringBuilder(\"A\")   //  1 + 16 \u003d 17\n```\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// misleading instantiation, these buffers\n// are actually sized to 99 characters long\nStringBuffer  sb1 \u003d new StringBuffer(\u0027c\u0027);\nStringBuilder sb2 \u003d new StringBuilder(\u0027c\u0027);\n\n// in these forms, just single characters are allocated\nStringBuffer  sb3 \u003d new StringBuffer(\"c\");\nStringBuilder sb4 \u003d new StringBuilder(\"c\");\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#stringbufferinstantiationwithchar"
  },
  {
    "key": "StringInstantiation",
    "name": "StringInstantiation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprivate String bar \u003d new String(\"bar\"); // just do a String bar \u003d \"bar\";\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#stringinstantiation"
  },
  {
    "key": "StringToString",
    "name": "StringToString",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid calling toString() on objects already known to be string instances; this is unnecessary.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eprivate String baz() {\n    String bar \u003d \"howdy\";\n    return bar.toString();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#stringtostring"
  },
  {
    "key": "SuspiciousConstantFieldName",
    "name": "SuspiciousConstantFieldName",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Field names using all uppercase characters - Sun\u0027s Java naming conventions indicating constants - should\nbe declared as final.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n // this is bad, since someone could accidentally\n // do PI \u003d 2.71828; which is actually e\n // final double PI \u003d 3.16; is ok\n  double PI \u003d 3.16;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#suspiciousconstantfieldname"
  },
  {
    "key": "SuspiciousEqualsMethodName",
    "name": "SuspiciousEqualsMethodName",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "The method name and parameter number are suspiciously close to equals(Object), which can denote an\nintention to override the equals(Object) method.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n   public int equals(Object o) {\n     // oops, this probably was supposed to be boolean equals\n   }\n   public boolean equals(String s) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n   public boolean equals(Object o1, Object o2) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#suspiciousequalsmethodname"
  },
  {
    "key": "SuspiciousHashcodeMethodName",
    "name": "SuspiciousHashcodeMethodName",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The method name and return type are suspiciously close to hashCode(), which may denote an intention\nto override the hashCode() method.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public int hashcode() { // oops, this probably was supposed to be \u0027hashCode\u0027\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#suspicioushashcodemethodname"
  },
  {
    "key": "SuspiciousOctalEscape",
    "name": "SuspiciousOctalEscape",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A suspicious octal escape sequence was found inside a String literal.\nThe Java language specification (section 3.10.6) says an octal\nescape sequence inside a literal String shall consist of a backslash\nfollowed by:\n\n    OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit\n\nAny octal escape sequence followed by non-octal digits can be confusing,\ne.g. \"\\038\" is interpreted as the octal escape sequence \"\\03\" followed by\nthe literal character \"8\".\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void foo() {\n  // interpreted as octal 12, followed by character \u00278\u0027\n  System.out.println(\"suspicious: \\128\");\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#suspiciousoctalescape"
  },
  {
    "key": "SwitchDensity",
    "name": "SwitchDensity",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A high ratio of statements to labels in a switch statement implies that the switch statement\nis overloaded.  Consider moving the statements into new methods or creating subclasses based\non the switch variable.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  public void bar(int x) {\n    switch (x) {\n      case 1: {\n        // lots of statements\n        break;\n      } case 2: {\n        // lots of statements\n        break;\n      }\n    }\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#switchdensity"
  },
  {
    "key": "SwitchStmtsShouldHaveDefault",
    "name": "SwitchStmtsShouldHaveDefault",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "All switch statements should include a default option to catch any unspecified values.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void bar() {\n    int x \u003d 2;\n    switch (x) {\n      case 1: int j \u003d 6;\n      case 2: int j \u003d 8;\n          // missing default: here\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault"
  },
  {
    "key": "SystemPrintln",
    "name": "SystemPrintln",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "References to System.(out|err).print are usually intended for debugging purposes and can remain in\nthe codebase even in production code. By using a logger one can enable/disable this behaviour at\nwill (and by priority) and avoid clogging the Standard out log.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo{\n    Logger log \u003d Logger.getLogger(Foo.class.getName());\n    public void testA () {\n        System.out.println(\"Entering test\");\n        // Better use this\n        log.fine(\"Entering test\");\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#systemprintln"
  },
  {
    "key": "TestClassWithoutTestCases",
    "name": "TestClassWithoutTestCases",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, \nsince most people will assume it is a test case. Test classes have test methods named testXXX.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e//Consider changing the name of the class if it is not a test\n//Consider adding test methods if it is a test\npublic class CarTest {\n   public static void main(String[] args) {\n    // do something\n   }\n   // code\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#testclasswithouttestcases"
  },
  {
    "key": "TooFewBranchesForASwitchStatement",
    "name": "TooFewBranchesForASwitchStatement",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few\ncases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use the\nif-then statement to increase code readability.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e// With a minimumNumberCaseForASwitch of 3\npublic class Foo {\n    public void bar() {\n        switch (condition) {\n            case ONE:\n                instruction;\n                break;\n            default:\n                break; // not enough for a \u0027switch\u0027 stmt, a simple \u0027if\u0027 stmt would have been more appropriate\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement"
  },
  {
    "key": "TooManyFields",
    "name": "TooManyFields",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,\npossibly through grouping related fields in new objects.  For example, a class with individual \ncity/state/zip fields could park them within a single Address field.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Person {   // too many separate fields\n   int birthYear;\n   int birthMonth;\n   int birthDate;\n   float height;\n   float weight;\n}\n\npublic class Person {   // this is more manageable\n   Date birthDate;\n   BodyMeasurements measurements;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#toomanyfields"
  },
  {
    "key": "TooManyMethods",
    "name": "TooManyMethods",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A class with too many methods is probably a good suspect for refactoring, in order to reduce its\ncomplexity and find a way to have more fine grained objects.",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#toomanymethods"
  },
  {
    "key": "TooManyStaticImports",
    "name": "TooManyStaticImports",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "If you overuse the static import feature, it can make your program unreadable and \nunmaintainable, polluting its namespace with all the static members you import. \nReaders of your code (including you, a few months after you wrote it) will not know \nwhich class a static member comes from (Sun 1.5 Language Guide).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport static Lennon;\nimport static Ringo;\nimport static George;\nimport static Paul;\nimport static Yoko; // Too much !\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#toomanystaticimports"
  },
  {
    "key": "UncommentedEmptyConstructor",
    "name": "UncommentedEmptyConstructor",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Uncommented Empty Constructor finds instances where a constructor does not\ncontain statements, but there is no comment. By explicitly commenting empty\nconstructors it is easier to distinguish between intentional (commented)\nand unintentional empty constructors.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic Foo() {\n  // This constructor is intentionally empty. Nothing special is needed here.\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_documentation.html#uncommentedemptyconstructor"
  },
  {
    "key": "UncommentedEmptyMethodBody",
    "name": "UncommentedEmptyMethodBody",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Uncommented Empty Method Body finds instances where a method body does not contain\nstatements, but there is no comment. By explicitly commenting empty method bodies\nit is easier to distinguish between intentional (commented) and unintentional\nempty methods.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void doSomething() {\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_documentation.html#uncommentedemptymethodbody"
  },
  {
    "key": "UnconditionalIfStatement",
    "name": "UnconditionalIfStatement",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use \"if\" statements whose conditionals are always true or always false.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void close() {\n        if (true) {        // fixed conditional, not recommended\n            // ...\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#unconditionalifstatement"
  },
  {
    "key": "UnnecessaryAnnotationValueElement",
    "name": "UnnecessaryAnnotationValueElement",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid the use of value in annotations when it\u0027s the only element.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003e@TestClassAnnotation(value \u003d \"TEST\")\npublic class Foo {\n\n    @TestMemberAnnotation(value \u003d \"TEST\")\n    private String y;\n\n    @TestMethodAnnotation(value \u003d \"TEST\")\n    public void bar() {\n        int x \u003d 42;\n        return;\n    }\n}\n\n// should be\n\n@TestClassAnnotation(\"TEST\")\npublic class Foo {\n\n    @TestMemberAnnotation(\"TEST\")\n    private String y;\n\n    @TestMethodAnnotation(\"TEST\")\n    public void bar() {\n        int x \u003d 42;\n        return;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#unnecessaryannotationvalueelement"
  },
  {
    "key": "UnnecessaryBooleanAssertion",
    "name": "UnnecessaryBooleanAssertion",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing.\nConsider using flow control (in case of assertTrue(false) or similar) or simply removing\nstatements like assertTrue(true) and assertFalse(false).  If you just want a test to halt after finding\nan error, use the fail() method and provide an indication message of why it did.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SimpleTest extends TestCase {\n    public void testX() {\n        assertTrue(true);       // serves no real purpose\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#unnecessarybooleanassertion"
  },
  {
    "key": "UnnecessaryCaseChange",
    "name": "UnnecessaryCaseChange",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eboolean answer1 \u003d buz.toUpperCase().equals(\"baz\");              // should be buz.equalsIgnoreCase(\"baz\")\n\nboolean answer2 \u003d buz.toUpperCase().equalsIgnoreCase(\"baz\");    // another unnecessary toUpperCase()\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#unnecessarycasechange"
  },
  {
    "key": "UnnecessaryConstructor",
    "name": "UnnecessaryConstructor",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the\nconstructor is identical to the default constructor. The default constructor should has same access\nmodifier as the declaring class. In an enum type, the default constructor is implicitly private.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n  public Foo() {}\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#unnecessaryconstructor"
  },
  {
    "key": "UnnecessaryConversionTemporary",
    "name": "UnnecessaryConversionTemporary",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods\non the wrapper classes instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic String convert(int x) {\n    String foo \u003d new Integer(x).toString(); // this wastes an object\n\n    return Integer.toString(x);             // preferred approach\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#unnecessaryconversiontemporary"
  },
  {
    "key": "UnnecessaryFullyQualifiedName",
    "name": "UnnecessaryFullyQualifiedName",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Import statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.util.List;\n\npublic class Foo {\n    private java.util.List list1;   // Unnecessary FQN\n    private List list2;             // More appropriate given import of \u0027java.util.List\u0027\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname"
  },
  {
    "key": "UnnecessaryLocalBeforeReturn",
    "name": "UnnecessaryLocalBeforeReturn",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid the creation of unnecessary local variables\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n   public int foo() {\n     int x \u003d doSomething();\n     return x;  // instead, just \u0027return doSomething();\u0027\n   }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn"
  },
  {
    "key": "UnnecessaryModifier",
    "name": "UnnecessaryModifier",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Fields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic @interface Annotation {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X \u003d 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic interface Foo {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X \u003d 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic class Bar {\n    public static interface Baz {}  // static ignored\n    public static enum FoorBar {    // static ignored\n        FOO;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#unnecessarymodifier"
  },
  {
    "key": "UnnecessaryReturn",
    "name": "UnnecessaryReturn",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid the use of unnecessary return statements.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void bar() {\n        int x \u003d 42;\n        return;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#unnecessaryreturn"
  },
  {
    "key": "UnnecessaryWrapperObjectCreation",
    "name": "UnnecessaryWrapperObjectCreation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Most wrapper classes provide static conversion methods that avoid the need to create intermediate objects\njust to create the primitive forms. Using these avoids the cost of creating objects that also need to be \ngarbage-collected later.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic int convert(String s) {\n    int i, i2;\n\n    i \u003d Integer.valueOf(s).intValue();  // this wastes an object\n    i \u003d Integer.parseInt(s);            // this is better\n\n    i2 \u003d Integer.valueOf(i).intValue(); // this wastes an object\n    i2 \u003d i;                             // this is better\n\n    String s3 \u003d Integer.valueOf(i2).toString(); // this wastes an object\n    s3 \u003d Integer.toString(i2);                  // this is better\n\n    return i2;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#unnecessarywrapperobjectcreation"
  },
  {
    "key": "UnsynchronizedStaticDateFormatter",
    "name": "UnsynchronizedStaticDateFormatter",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "SimpleDateFormat instances are not synchronized. Sun recommends using separate format instances\nfor each thread. If multiple threads must access a static formatter, the formatter must be\nsynchronized either on method or block level.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private static final SimpleDateFormat sdf \u003d new SimpleDateFormat();\n    void bar() {\n        sdf.format(); // poor, no thread-safety\n    }\n    synchronized void foo() {\n        sdf.format(); // preferred\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#unsynchronizedstaticdateformatter"
  },
  {
    "key": "UnusedFormalParameter",
    "name": "UnusedFormalParameter",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid passing parameters to methods or constructors without actually referencing them in the method body.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    private void bar(String howdy) {\n        // howdy is not used\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#unusedformalparameter"
  },
  {
    "key": "UnusedImports",
    "name": "UnusedImports",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid unused import statements to prevent unwanted dependencies.\nThis rule will also find unused on demand imports, i.e. import com.foo.*.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.io.File;  // not referenced or required\nimport java.util.*;   // not referenced or required\n\npublic class Foo {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#unusedimports"
  },
  {
    "key": "UnusedLocalVariable",
    "name": "UnusedLocalVariable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Detects when a local variable is declared and/or assigned, but not used.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void doSomething() {\n        int i \u003d 5; // Unused\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#unusedlocalvariable"
  },
  {
    "key": "UnusedNullCheckInEquals",
    "name": "UnusedNullCheckInEquals",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object\u0027s equals() method.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Test {\n\n    public String method1() { return \"ok\";}\n    public String method2() { return null;}\n\n    public void method(String a) {\n        String b;\n        // I don\u0027t know it method1() can be \"null\"\n        // but I know \"a\" is not null..\n        // I\u0027d better write a.equals(method1())\n\n        if (a!\u003dnull \u0026\u0026 method1().equals(a)) { // will trigger the rule\n            //whatever\n        }\n\n        if (method1().equals(a) \u0026\u0026 a !\u003d null) { // won\u0027t trigger the rule\n            //whatever\n        }\n\n        if (a!\u003dnull \u0026\u0026 method1().equals(b)) { // won\u0027t trigger the rule\n            //whatever\n        }\n\n        if (a!\u003dnull \u0026\u0026 \"LITERAL\".equals(a)) { // won\u0027t trigger the rule\n            //whatever\n        }\n\n        if (a!\u003dnull \u0026\u0026 !a.equals(\"go\")) { // won\u0027t trigger the rule\n            a\u003dmethod2();\n            if (method1().equals(a)) {\n                //whatever\n            }\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#unusednullcheckinequals"
  },
  {
    "key": "UnusedPrivateField",
    "name": "UnusedPrivateField",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Detects when a private field is declared and/or assigned a value, but not used.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Something {\n    private static int FOO \u003d 2; // Unused\n    private int i \u003d 5; // Unused\n    private int j \u003d 6;\n    public int addOne() {\n        return j++;\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#unusedprivatefield"
  },
  {
    "key": "UnusedPrivateMethod",
    "name": "UnusedPrivateMethod",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Unused Private Method detects when a private method is declared but is unused.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Something {\n    private void foo() {} // unused\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#unusedprivatemethod"
  },
  {
    "key": "UseArrayListInsteadOfVector",
    "name": "UseArrayListInsteadOfVector",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class SimpleTest extends TestCase {\n    public void testX() {\n    Collection c1 \u003d new Vector();\n    Collection c2 \u003d new ArrayList();    // achieves the same with much better performance\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#usearraylistinsteadofvector"
  },
  {
    "key": "UseArraysAsList",
    "name": "UseArraysAsList",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The java.util.Arrays class has a \"asList\" method that should be used when you want to create a new List from\nan array of objects. It is faster than executing a loop to copy all the elements of the array one by one.\n\nNote that the result of Arrays.asList() is backed by the specified array,\nchanges in the returned list will result in the array to be modified.\nFor that reason, it is not possible to add new elements to the returned list of Arrays.asList() (UnsupportedOperationException).\nYou must use new ArrayList\u003c\u003e(Arrays.asList(...)) if that is inconvenient for you (e.g. because of concurrent access).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Test {\n    public void foo(Integer[] ints) {\n        // could just use Arrays.asList(ints)\n        List\u003cInteger\u003e l\u003d new ArrayList\u003c\u003e(100);\n        for (int i\u003d0; i\u003c 100; i++) {\n            l.add(ints[i]);\n        }\n        for (int i\u003d0; i\u003c 100; i++) {\n            l.add(a[i].toString()); // won\u0027t trigger the rule\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#usearraysaslist"
  },
  {
    "key": "UseAssertEqualsInsteadOfAssertTrue",
    "name": "UseAssertEqualsInsteadOfAssertTrue",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class FooTest extends TestCase {\n    void testCode() {\n        Object a, b;\n        assertTrue(a.equals(b));                    // bad usage\n        assertEquals(?a should equals b?, a, b);    // good usage\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#useassertequalsinsteadofasserttrue"
  },
  {
    "key": "UseAssertNullInsteadOfAssertTrue",
    "name": "UseAssertNullInsteadOfAssertTrue",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule detects JUnit assertions in object references equality. These assertions should be made by \nmore specific methods, like assertNull, assertNotNull.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class FooTest extends TestCase {\n    void testCode() {\n        Object a \u003d doSomething();\n        assertTrue(a\u003d\u003dnull);    // bad usage\n        assertNull(a);          // good usage\n        assertTrue(a !\u003d null);  // bad usage\n        assertNotNull(a);       // good usage\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#useassertnullinsteadofasserttrue"
  },
  {
    "key": "UseAssertSameInsteadOfAssertTrue",
    "name": "UseAssertSameInsteadOfAssertTrue",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This rule detects JUnit assertions in object references equality. These assertions should be made \nby more specific methods, like assertSame, assertNotSame.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class FooTest extends TestCase {\n    void testCode() {\n        Object a, b;\n        assertTrue(a \u003d\u003d b); // bad usage\n        assertSame(a, b);   // good usage\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#useassertsameinsteadofasserttrue"
  },
  {
    "key": "UseAssertTrueInsteadOfAssertEquals",
    "name": "UseAssertTrueInsteadOfAssertEquals",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "When asserting a value is the same as a literal or Boxed boolean, use assertTrue/assertFalse, instead of assertEquals.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyTestCase extends TestCase {\n    public void testMyCase() {\n        boolean myVar \u003d true;\n        // Ok\n        assertTrue(\"myVar is true\", myVar);\n        // Bad\n        assertEquals(\"myVar is true\", true, myVar);\n        // Bad\n        assertEquals(\"myVar is false\", false, myVar);\n        // Bad\n        assertEquals(\"myVar is true\", Boolean.TRUE, myVar);\n        // Bad\n        assertEquals(\"myVar is false\", Boolean.FALSE, myVar);\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#useasserttrueinsteadofassertequals"
  },
  {
    "key": "UseCollectionIsEmpty",
    "name": "UseCollectionIsEmpty",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements.\nComparing the value of size() to 0 does not convey intent as well as the isEmpty() method.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void good() {\n        List foo \u003d getList();\n        if (foo.isEmpty()) {\n            // blah\n        }\n    }\n\n    void bad() {\n        List foo \u003d getList();\n        if (foo.size() \u003d\u003d 0) {\n            // blah\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#usecollectionisempty"
  },
  {
    "key": "UseConcurrentHashMap",
    "name": "UseConcurrentHashMap",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can\nperform efficient map reads without blocking other threads.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class ConcurrentApp {\n  public void getMyInstance() {\n    Map map1 \u003d new HashMap();           // fine for single-threaded access\n    Map map2 \u003d new ConcurrentHashMap(); // preferred for use with multiple threads\n\n    // the following case will be ignored by this rule\n    Map map3 \u003d someModule.methodThatReturnMap(); // might be OK, if the returned map is already thread-safe\n  }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#useconcurrenthashmap"
  },
  {
    "key": "UseCorrectExceptionLogging",
    "name": "UseCorrectExceptionLogging",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Main {\n    private static final Log _LOG \u003d LogFactory.getLog( Main.class );\n    void bar() {\n        try {\n        } catch( Exception e ) {\n            _LOG.error( e ); //Wrong!\n        } catch( OtherException oe ) {\n            _LOG.error( oe.getMessage(), oe ); //Correct\n        }\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#usecorrectexceptionlogging"
  },
  {
    "key": "UseEqualsToCompareStrings",
    "name": "UseEqualsToCompareStrings",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Using \u0027\u003d\u003d\u0027 or \u0027!\u003d\u0027 to compare strings only works if intern version is used on both sides.\nUse the equals() method instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic boolean test(String s) {\n    if (s \u003d\u003d \"one\") return true;        // unreliable\n    if (\"two\".equals(s)) return true;   // better\n    return false;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#useequalstocomparestrings"
  },
  {
    "key": "UseIndexOfChar",
    "name": "UseIndexOfChar",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use String.indexOf(char) when checking for the index of a single character; it executes faster.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eString s \u003d \"hello world\";\n// avoid this\nif (s.indexOf(\"d\") {}\n// instead do this\nif (s.indexOf(\u0027d\u0027) {}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#useindexofchar"
  },
  {
    "key": "UseLocaleWithCaseConversions",
    "name": "UseLocaleWithCaseConversions",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoids problems with languages that\nhave unusual conventions, i.e. Turkish.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eclass Foo {\n    // BAD\n    if (x.toLowerCase().equals(\"list\")) { }\n\n    /*\n     * This will not match \"LIST\" when in Turkish locale\n     * The above could be\n     * if (x.toLowerCase(Locale.US).equals(\"list\")) { }\n     * or simply\n     * if (x.equalsIgnoreCase(\"list\")) { }\n     */\n    // GOOD\n    String z \u003d a.toLowerCase(Locale.EN);\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#uselocalewithcaseconversions"
  },
  {
    "key": "UseNotifyAllInsteadOfNotify",
    "name": "UseNotifyAllInsteadOfNotify",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only\none is chosen.  The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003evoid bar() {\n    x.notify();\n    // If many threads are monitoring x, only one (and you won\u0027t know which) will be notified.\n    // use instead:\n    x.notifyAll();\n  }\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_multithreading.html#usenotifyallinsteadofnotify"
  },
  {
    "key": "UseObjectForClearerAPI",
    "name": "UseObjectForClearerAPI",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class\nwill use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information\nas a simple series of Strings, you may think of using an Object to represent all those information. You\u0027ll get a simpler\nAPI (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some\npoint to pass extra data, you\u0027ll be able to do so by simply modifying or extending Workload without any modification to\nyour API.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MyClass {\n    public void connect(String username,\n        String pssd,\n        String databaseName,\n        String databaseAdress)\n        // Instead of those parameters object\n        // would ensure a cleaner API and permit\n        // to add extra data transparently (no code change):\n        // void connect(UserData data);\n    {\n\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#useobjectforclearerapi"
  },
  {
    "key": "UseProperClassLoader",
    "name": "UseProperClassLoader",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In J2EE, the getClassLoader() method might not work as expected. Use \nThread.currentThread().getContextClassLoader() instead.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    ClassLoader cl \u003d Bar.class.getClassLoader();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#useproperclassloader"
  },
  {
    "key": "UseStringBufferForStringAppends",
    "name": "UseStringBufferForStringAppends",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The use of the \u0027+\u003d\u0027 operator for appending strings causes the JVM to create and use an internal StringBuffer.\nIf a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or \nthreadsafe StringBuffer is recommended to avoid this.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    void bar() {\n        String a;\n        a \u003d \"foo\";\n        a +\u003d \" bar\";\n        // better would be:\n        // StringBuilder a \u003d new StringBuilder(\"foo\");\n        // a.append(\" bar\");\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#usestringbufferforstringappends"
  },
  {
    "key": "UseStringBufferLength",
    "name": "UseStringBufferLength",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals(\"\")\nor StringBuffer.toString().length() \u003d\u003d ...\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eStringBuffer sb \u003d new StringBuffer();\n\nif (sb.toString().equals(\"\")) {}        // inefficient\n\nif (sb.length() \u003d\u003d 0) {}                // preferred\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#usestringbufferlength"
  },
  {
    "key": "UseUtilityClass",
    "name": "UseUtilityClass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "For classes that only have static methods, consider making them utility classes.\nNote that this doesn\u0027t apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class MaybeAUtility {\n  public static void foo() {}\n  public static void bar() {}\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#useutilityclass"
  },
  {
    "key": "UseVarargs",
    "name": "UseVarargs",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Java 5 introduced the varargs parameter declaration for methods and constructors.  This syntactic\nsugar provides flexibility for users of these methods and constructors, allowing them to avoid\nhaving to deal with the creation of an array.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public void foo(String s, Object[] args) {\n        // Do something here...\n    }\n\n    public void bar(String s, Object... args) {\n        // Ahh, varargs tastes much better...\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_bestpractices.html#usevarargs"
  },
  {
    "key": "UselessOperationOnImmutable",
    "name": "UselessOperationOnImmutable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "An operation on an Immutable object (String, BigDecimal or BigInteger) won\u0027t change the object itself\nsince the result of the operation is a new object. Therefore, ignoring the operation result is an error.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003eimport java.math.*;\n\nclass Test {\n    void method1() {\n        BigDecimal bd\u003dnew BigDecimal(10);\n        bd.add(new BigDecimal(5));      // this will trigger the rule\n    }\n    void method2() {\n        BigDecimal bd\u003dnew BigDecimal(10);\n        bd \u003d bd.add(new BigDecimal(5)); // this won\u0027t trigger the rule\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_errorprone.html#uselessoperationonimmutable"
  },
  {
    "key": "UselessOverridingMethod",
    "name": "UselessOverridingMethod",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The overriding method merely calls the same method defined in a superclass.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic void foo(String bar) {\n    super.foo(bar);      // why bother overriding?\n}\n\npublic String foo() {\n    return super.foo();  // why bother overriding?\n}\n\n@Id\npublic Long getId() {\n    return super.getId();  // OK if \u0027ignoreAnnotations\u0027 is false, which is the default behavior\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_design.html#uselessoverridingmethod"
  },
  {
    "key": "UselessParentheses",
    "name": "UselessParentheses",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Useless parentheses should be removed.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n\n    private int _bar1;\n    private Integer _bar2;\n\n    public void setBar(int n) {\n        _bar1 \u003d Integer.valueOf((n)); // here\n        _bar2 \u003d (n); // and here\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#uselessparentheses"
  },
  {
    "key": "UselessQualifiedThis",
    "name": "UselessQualifiedThis",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Look for qualified this usages in the same class.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    final Foo otherFoo \u003d Foo.this;  // use \"this\" directly\n\n    public void doSomething() {\n         final Foo anotherFoo \u003d Foo.this;  // use \"this\" directly\n    }\n\n    private ActionListener returnListener() {\n        return new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                doSomethingWithQualifiedThis(Foo.this);  // This is fine\n            }\n        };\n    }\n\n    private class Foo3 {\n        final Foo myFoo \u003d Foo.this;  // This is fine\n    }\n\n    private class Foo2 {\n        final Foo2 myFoo2 \u003d Foo2.this;  // Use \"this\" direclty\n    }\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#uselessqualifiedthis"
  },
  {
    "key": "UselessStringValueOf",
    "name": "UselessStringValueOf",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "No need to call String.valueOf to append to a string; just use the valueOf() argument directly.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic String convert(int i) {\n    String s;\n    s \u003d \"a\" + String.valueOf(i);    // not required\n    s \u003d \"a\" + i;                    // preferred approach\n    return s;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_performance.html#uselessstringvalueof"
  },
  {
    "key": "VariableNamingConventions",
    "name": "VariableNamingConventions",
    "type": "CODE_SMELL",
    "severity": "BLOCKER",
    "description": "A variable naming conventions rule - customize this to your liking.  Currently, it\nchecks for final variables that should be fully capitalized and non-final variables\nthat should not include underscores.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003epublic class Foo {\n    public static final int MY_NUM \u003d 0;\n    public String myTest \u003d \"\";\n    DataModule dmTest \u003d new DataModule();\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#variablenamingconventions"
  },
  {
    "key": "WhileLoopsMustUseBraces",
    "name": "WhileLoopsMustUseBraces",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid using \u0027while\u0027 statements without using braces to surround the code block. If the code \nformatting or indentation is lost then it becomes difficult to separate the code being\ncontrolled from the rest.\n\u003cp\u003eExample(s):\u003c/p\u003e\n\u003cpre\u003ewhile (true)    // not recommended\n      x++;\n      \nwhile (true) {  // preferred approach\n      x++;\n}\u003c/pre\u003e",
    "url": "https://pmd.github.io/pmd-6.5.0/pmd_rules_java_codestyle.html#whileloopsmustusebraces"
  }
]
