[
  {
    "key": "AM_CREATES_EMPTY_JAR_FILE_ENTRY",
    "name": "Bad practice - Creates an empty jar file entry",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty JarFile entry. The contents of the entry\nshould be written to the JarFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "AM_CREATES_EMPTY_ZIP_FILE_ENTRY",
    "name": "Bad practice - Creates an empty zip file entry",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty ZipFile entry. The contents of the entry\nshould be written to the ZipFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION",
    "name": "Multi-threading - Sequence of calls to concurrent abstraction may not be atomic",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This code contains a sequence of calls to a concurrent  abstraction\n            (such as a concurrent hash map).\n            These calls will not be executed atomically.",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "BAC_BAD_APPLET_CONSTRUCTOR",
    "name": "Correctness - Bad Applet Constructor relies on uninitialized AppletStub",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis constructor calls methods in the parent Applet that rely on the AppletStub. Since the AppletStub\nisn't initialized until the init() method of this applet is called, these methods will not perform\ncorrectly.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BC_BAD_CAST_TO_ABSTRACT_COLLECTION",
    "name": "Style - Questionable cast to abstract collection",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis code casts a Collection to an abstract collection\n(such as <code>List</code>, <code>Set</code>, or <code>Map</code>).\nEnsure that you are guaranteed that the object is of the type\nyou are casting to. If all you need is to be able\nto iterate through a collection, you don't need to cast it to a Set or List.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BC_BAD_CAST_TO_CONCRETE_COLLECTION",
    "name": "Style - Questionable cast to concrete collection",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis code casts an abstract collection (such as a Collection, List, or Set)\nto a specific concrete implementation (such as an ArrayList or HashSet).\nThis might not be correct, and it may make your code fragile, since\nit makes it harder to switch to other concrete implementations at a future\npoint. Unless you have a particular reason to do so, just use the abstract\ncollection class.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS",
    "name": "Bad practice - Equals method should not assume anything about the type of its argument",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\nThe <code>equals(Object o)</code> method shouldn't make any assumptions\nabout the type of <code>o</code>. It should simply return\nfalse if <code>o</code> is not the same type as <code>this</code>.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BC_IMPOSSIBLE_CAST",
    "name": "Correctness - Impossible cast",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p>\nThis cast will always throw a ClassCastException.\nSpotBugs tracks type information from instanceof checks,\nand also uses more precise information about the types\nof values returned from methods and loaded from fields.\nThus, it may have more precise information that just\nthe declared type of a variable, and can use this to determine\nthat a cast will always throw an exception at runtime.\n\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY",
    "name": "Correctness - Impossible cast involving primitive array",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p>\nThis cast will always throw a ClassCastException.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BC_IMPOSSIBLE_DOWNCAST",
    "name": "Correctness - Impossible downcast",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p>\nThis cast will always throw a ClassCastException.\nThe analysis believes it knows\nthe precise type of the value being cast, and the attempt to\ndowncast it to a subtype will always fail by throwing a ClassCastException.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY",
    "name": "Correctness - Impossible downcast of toArray() result",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p>\nThis code is casting the result of calling <code>toArray()</code> on a collection\nto a type more specific than <code>Object[]</code>, as in:</p>\n<pre><code>String[] getAsArray(Collection&lt;String&gt; c) {\n    return (String[]) c.toArray();\n}\n</code></pre>\n<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code>\nof almost all collections return an <code>Object[]</code>. They can't really do anything else,\nsince the Collection object has no reference to the declared generic type of the collection.\n<p>The correct way to do get an array of a specific type from a collection is to use\n  <code>c.toArray(new String[]);</code>\n  or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).\n<p>There is one common/known exception to this. The <code>toArray()</code>\nmethod of lists returned by <code>Arrays.asList(...)</code> will return a covariantly\ntyped array. For example, <code>Arrays.asArray(new String[] { \"a\" }).toArray()</code>\nwill return a <code>String []</code>. SpotBugs attempts to detect and suppress\nsuch cases, but may miss some.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "BC_IMPOSSIBLE_INSTANCEOF",
    "name": "Correctness - instanceof will always return false",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p>\nThis instanceof test will always return false. Although this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BC_NULL_INSTANCEOF",
    "name": "Correctness - A known null value is checked to see if it is an instance of a type",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BC_UNCONFIRMED_CAST",
    "name": "Style - Unchecked/unconfirmed cast",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis cast is unchecked, and not all instances of the type casted from can be cast to\nthe type it is being cast to. Check that your program logic ensures that this\ncast will not fail.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "BC_UNCONFIRMED_CAST_OF_RETURN_VALUE",
    "name": "Style - Unchecked/unconfirmed cast of return value from method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis code performs an unchecked cast of the return value of a method.\nThe code might be calling the method in such a way that the cast is guaranteed to be\nsafe, but SpotBugs is unable to verify that the cast is safe.  Check that your program logic ensures that this\ncast will not fail.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "BC_VACUOUS_INSTANCEOF",
    "name": "Style - instanceof will always return true",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis instanceof test will always return true (unless the value being tested is null).\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\nIf you really want to test the value for being null, perhaps it would be clearer to do\nbetter to do a null test rather than an instanceof test.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BIT_ADD_OF_SIGNED_BYTE",
    "name": "Correctness - Bitwise add of signed byte value",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Adds a byte value and a value which is known to have the 8 lower bits clear.\nValues loaded from a byte array are sign extended to 32 bits\nbefore any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code\n<code>((x &lt;&lt; 8) + b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++)\n    result = ((result &lt;&lt; 8) + b[i]);\n</code></pre>\n<p>The following idiom will work instead: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++)\n    result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BIT_AND",
    "name": "Correctness - Incompatible bit masks",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method compares an expression of the form (e &amp; C) to D,\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BIT_AND_ZZ",
    "name": "Correctness - Check to see if ((...) & 0) == 0",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method compares an expression of the form <code>(e &amp; 0)</code> to 0,\nwhich will always compare equal.\nThis may indicate a logic error or typo.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BIT_IOR",
    "name": "Correctness - Incompatible bit masks",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method compares an expression of the form <code>(e | C)</code> to D.\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>\n\n<p> Typically, this bug occurs because the code wants to perform\na membership test in a bit set, but uses the bitwise OR\noperator (\"|\") instead of bitwise AND (\"&amp;\").</p>\n\n<p>Also such bug may appear in expressions like <code>(e &amp; A | B) == C</code>\nwhich is parsed like <code>((e &amp; A) | B) == C</code> while <code>(e &amp; (A | B)) == C</code> was intended.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BIT_IOR_OF_SIGNED_BYTE",
    "name": "Correctness - Bitwise OR of signed byte value",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Loads a byte value (e.g., a value loaded from a byte array or returned by a method\nwith return type byte)  and performs a bitwise OR with\nthat value. Byte values are sign extended to 32 bits\nbefore any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code\n<code>((x &lt;&lt; 8) | b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++) {\n    result = ((result &lt;&lt; 8) | b[i]);\n}\n</code></pre>\n<p>The following idiom will work instead: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++) {\n    result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));\n}\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BIT_SIGNED_CHECK",
    "name": "Bad practice - Check for sign of bitwise operation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method compares an expression such as\n<code>((event.detail &amp; SWT.SELECTED) &gt; 0)</code>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use '!= 0' instead of '&gt; 0'.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BIT_SIGNED_CHECK_HIGH_BIT",
    "name": "Correctness - Check for sign of bitwise operation involving negative number",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method compares a bitwise expression such as\n<code>((val &amp; CONSTANT) &gt; 0)</code> where CONSTANT is the negative number.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results. This comparison is unlikely to work as expected. The good practice is\nto use '!= 0' instead of '&gt; 0'.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BOA_BADLY_OVERRIDDEN_ADAPTER",
    "name": "Correctness - Class overrides a method implemented in super class Adapter wrongly",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method overrides a method found in a parent class, where that class is an Adapter that implements\na listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not\nget called when the event occurs.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "BRSA_BAD_RESULTSET_ACCESS",
    "name": "Correctness - Method attempts to access a result set field with index 0",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BSHIFT_WRONG_ADD_PRIORITY",
    "name": "Correctness - Possible bad parsing of shift operation",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code performs an operation like (x &lt;&lt; 8 + y). Although this might be correct, probably it was meant\nto perform (x &lt;&lt; 8) + y, but shift operation has\na lower precedence, so it's actually parsed as x &lt;&lt; (8 + y).\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 2
  },
  {
    "key": "BX_BOXING_IMMEDIATELY_UNBOXED",
    "name": "Performance - Primitive value is boxed and then immediately unboxed",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual\n    boxing in a place where an unboxed value is required, thus forcing the compiler\nto immediately undo the work of the boxing.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION",
    "name": "Performance - Primitive value is boxed then unboxed to perform primitive coercion",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A primitive boxed value constructed and then immediately converted into a different primitive type\n(e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR",
    "name": "Performance - Primitive value is unboxed and coerced for ternary operator",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A wrapped primitive value is unboxed and converted to another primitive type as part of the\nevaluation of a conditional ternary operator (the <code> b ? e1 : e2</code> operator). The\nsemantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped\nnumeric values, the values are unboxed and converted/coerced to their common type (e.g,\nif <code>e1</code> is of type <code>Integer</code>\nand <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed,\nconverted to a floating point value, and boxed. See JLS Section 15.25.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "BX_UNBOXING_IMMEDIATELY_REBOXED",
    "name": "Performance - Boxed value is unboxed and then immediately reboxed",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A boxed value is unboxed and then immediately reboxed.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "CAA_COVARIANT_ARRAY_ELEMENT_STORE",
    "name": "Correctness - Possibly incompatible element is stored in covariant array",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>Value is stored into the array and the value type doesn't match the array type.\nIt's known from the analysis that actual array type is narrower than the declared type of its variable or field\nand this assignment doesn't satisfy the original array type. This assignment may cause ArrayStoreException\nat runtime.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CAA_COVARIANT_ARRAY_FIELD",
    "name": "Style - Covariant array assignment to a field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>Array of covariant type is assigned to a field. This is confusing and may lead to ArrayStoreException at runtime\nif the reference of some other type will be stored in this array later like in the following code:\n</p>\n<pre><code>Number[] arr = new Integer[10];\narr[0] = 1.0;\n</code></pre>\n<p>Consider changing the type of created array or the field type.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CAA_COVARIANT_ARRAY_LOCAL",
    "name": "Style - Covariant array assignment to a local variable",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>Array of covariant type is assigned to a local variable. This is confusing and may lead to ArrayStoreException at runtime\nif the reference of some other type will be stored in this array later like in the following code:\n</p>\n<pre><code>Number[] arr = new Integer[10];\narr[0] = 1.0;\n</code></pre>\n<p>Consider changing the type of created array or the local variable type.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CAA_COVARIANT_ARRAY_RETURN",
    "name": "Style - Covariant array is returned from the method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>Array of covariant type is returned from the method. This is confusing and may lead to ArrayStoreException at runtime\nif the calling code will try to store the reference of some other type in the returned array.\n</p>\n<p>Consider changing the type of created array or the method return type.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CD_CIRCULAR_DEPENDENCY",
    "name": "Style - Test for circular dependencies among classes",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n    This class has a circular dependency with other classes. This makes building these classes\n    difficult, as each is dependent on the other to build correctly. Consider using interfaces\n    to break the hard dependency.\n    </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 180
  },
  {
    "key": "CI_CONFUSED_INHERITANCE",
    "name": "Style - Class is final but declares protected field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      This class is declared to be final, but declares fields to be protected. Since the class\n      is final, it can not be derived from, and the use of protected is confusing. The access\n      modifier for the field should be changed to private or public to represent the true\n      use for the field.\n      </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "CNT_ROUGH_CONSTANT_VALUE",
    "name": "Bad practice - Rough value of known constant found",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>It's recommended to use the predefined library constant for code clarity and better precision.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CN_IDIOM",
    "name": "Bad practice - Class implements Cloneable but does not define or use clone method",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\n   Class implements Cloneable but does not define or\n   use the clone method.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "CN_IDIOM_NO_SUPER_CALL",
    "name": "Bad practice - clone method does not call super.clone()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This non-final class defines a clone() method that does not call super.clone().\nIf this class (\"<i>A</i>\") is extended by a subclass (\"<i>B</i>\"),\nand the subclass <i>B</i> calls super.clone(), then it is likely that\n<i>B</i>'s clone() method will return an object of type <i>A</i>,\nwhich violates the standard contract for clone().</p>\n\n<p> If all clone() methods call super.clone(), then they are guaranteed\nto use Object.clone(), which always returns an object of the correct type.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE",
    "name": "Bad practice - Class defines clone() but doesn't implement Cloneable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a clone() method but the class doesn't implement Cloneable.\nThere are some situations in which this is OK (e.g., you want to control how subclasses\ncan clone themselves), but just make sure that this is what you intended.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "CO_ABSTRACT_SELF",
    "name": "Bad practice - Abstract class defines covariant compareTo() method",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "CO_COMPARETO_INCORRECT_FLOATING",
    "name": "Bad practice - compareTo()/compare() incorrectly handles float or double value",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>This method compares double or float values using pattern like this: val1 &gt; val2 ? 1 : val1 &lt; val2 ? -1 : 0.\nThis pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection\n(if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all\nthe special cases correctly.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CO_COMPARETO_RESULTS_MIN_VALUE",
    "name": "Bad practice - compareTo()/compare() returns Integer.MIN_VALUE",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> In some situation, this compareTo or compare method returns\nthe  constant Integer.MIN_VALUE, which is an exceptionally bad practice.\n  The only thing that matters about the return value of compareTo is the sign of the result.\n    But people will sometimes negate the return value of compareTo, expecting that this will negate\n    the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE.\n    So just return -1 rather than Integer.MIN_VALUE.",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "CO_SELF_NO_OBJECT",
    "name": "Bad practice - Covariant compareTo() method defined",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DB_DUPLICATE_BRANCHES",
    "name": "Style - Method uses the same code for two branches",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      This method uses the same code to implement two branches of a conditional branch.\n    Check to ensure that this isn't a coding mistake.\n      </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DB_DUPLICATE_SWITCH_CLAUSES",
    "name": "Style - Method uses the same code for two switch clauses",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      This method uses the same code to implement two clauses of a switch statement.\n    This could be a case of duplicate code, but it might also indicate\n    a coding mistake.\n      </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DC_DOUBLECHECK",
    "name": "Multi-threading - Possible double check of field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method may contain an instance of double-checked locking.&nbsp;\n  This idiom is not correct according to the semantics of the Java memory\n  model.&nbsp; For more information, see the web page\n  <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\"\n  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DC_PARTIALLY_CONSTRUCTED",
    "name": "Multi-threading - Possible exposure of partially initialized object",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>Looks like this method uses lazy field initialization with double-checked locking.\n  While the field is correctly declared as volatile, it's possible that the internal structure of\n  the object is changed after the field assignment, thus another thread may see the partially initialized object.</p>\n  <p>To fix this problem consider storing the object into the local variable first\n  and save it to the volatile field only after it's fully constructed.\n  </p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DE_MIGHT_DROP",
    "name": "Bad practice - Method might drop exception",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method might drop an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DE_MIGHT_IGNORE",
    "name": "Bad practice - Method might ignore exception",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method might ignore an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DLS_DEAD_LOCAL_INCREMENT_IN_RETURN",
    "name": "Correctness - Useless increment in return statement",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This statement has a return such as <code>return x++;</code>.\nA postfix increment/decrement does not impact the value of the expression,\nso this increment/decrement has no effect.\nPlease verify that this statement does the right thing.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DLS_DEAD_LOCAL_STORE",
    "name": "Style - Dead store to local variable",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused.\n</p>\n<p>\nNote that Sun's javac compiler often generates dead stores for\nfinal local variables.  Because SpotBugs is a bytecode-based tool,\nthere is no easy way to eliminate these false positives.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DLS_DEAD_LOCAL_STORE_IN_RETURN",
    "name": "Style - Useless assignment in return statement",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis statement assigns to a local variable in a return statement. This assignment\nhas effect. Please verify that this statement does the right thing.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DLS_DEAD_LOCAL_STORE_OF_NULL",
    "name": "Style - Dead store of null to local variable",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>The code stores null into a local variable, and the stored value is not\nread. This store may have been introduced to assist the garbage collector, but\nas of Java SE 6.0, this is no longer needed or useful.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD",
    "name": "Style - Dead store to local variable that shadows field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused. There is a field with the same name as the local variable. Did you\nmean to assign to that variable instead?\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DLS_DEAD_STORE_OF_CLASS_LITERAL",
    "name": "Correctness - Dead store of class literal",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis instruction assigns a class literal to a variable and then never uses it.\n<a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">The behavior of this differs in Java 1.4 and in Java 5.</a>\nIn Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer\nfor <code>Foo</code> to be executed, if it has not been executed already.\nIn Java 5 and later, it does not.\n</p>\n<p>See Sun's <a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">article on Java SE compatibility</a>\nfor more details and examples, and suggestions on how to force class initialization in Java 5.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DLS_OVERWRITTEN_INCREMENT",
    "name": "Correctness - Overwritten increment",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code performs an increment operation (e.g., <code>i++</code>) and then\nimmediately overwrites it. For example, <code>i = i++</code> immediately\noverwrites the incremented value with the original value.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DL_SYNCHRONIZATION_ON_BOOLEAN",
    "name": "Multi-threading - Synchronization on Boolean",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The code synchronizes on a boxed primitive constant, such as a Boolean.</p>\n<pre><code>private static Boolean inited = Boolean.FALSE;\n...\nsynchronized(inited) {\n    if (!inited) {\n        init();\n        inited = Boolean.TRUE;\n    }\n}\n...\n</code></pre>\n<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE",
    "name": "Multi-threading - Synchronization on boxed primitive",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The code synchronizes on a boxed primitive constant, such as an Integer.</p>\n<pre><code>private static Integer count = 0;\n...\nsynchronized(count) {\n    count++;\n}\n...\n</code></pre>\n<p>Since Integer objects can be cached and shared,\nthis code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DL_SYNCHRONIZATION_ON_SHARED_CONSTANT",
    "name": "Multi-threading - Synchronization on interned String",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The code synchronizes on interned String.</p>\n<pre><code>private static String LOCK = \"LOCK\";\n...\nsynchronized(LOCK) {\n    ...\n}\n...\n</code></pre>\n<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code\nis locking on something that other code might also be locking. This could result in very strange and hard to diagnose\nblocking and deadlock behavior. See <a href=\"http://www.javalobby.org/java/forums/t96352.html\">http://www.javalobby.org/java/forums/t96352.html</a> and <a href=\"http://jira.codehaus.org/browse/JETTY-352\">http://jira.codehaus.org/browse/JETTY-352</a>.\n</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE",
    "name": "Multi-threading - Synchronization on boxed primitive values",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The code synchronizes on an apparently unshared boxed primitive,\nsuch as an Integer.</p>\n<pre><code>private static final Integer fileLock = new Integer(1);\n...\nsynchronized(fileLock) {\n    .. do something ..\n}\n...\n</code></pre>\n<p>It would be much better, in this code, to redeclare fileLock as</p>\n<pre><code>private static final Object fileLock = new Object();\n</code></pre>\n<p>\nThe existing code might be OK, but it is confusing and a\nfuture refactoring, such as the \"Remove Boxing\" refactoring in IntelliJ,\nmight replace this with the use of an interned Integer object shared\nthroughout the JVM, leading to very confusing behavior and potential deadlock.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION",
    "name": "Correctness - Can't use reflection to check for presence of annotation without runtime retention",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can't be observed using reflection\n(e.g., by using the isAnnotationPresent method).\n   .</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_ARGUMENTS_WRONG_ORDER",
    "name": "Correctness - Reversed method arguments",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The arguments to this method call seem to be in the wrong order.\nFor example, a call <code>Preconditions.checkNotNull(\"message\", message)</code>\nhas reserved arguments: the value to be checked is the first argument.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "DMI_BAD_MONTH",
    "name": "Correctness - Bad constant value for month",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis code passes a constant month\nvalue outside the expected range of 0..11 to a method.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE",
    "name": "Correctness - BigDecimal constructed from double that isn't represented precisely",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis code creates a BigDecimal from a double value that doesn't translate well to a\ndecimal number.\nFor example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.\nYou probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation\nof the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_BLOCKING_METHODS_ON_URL",
    "name": "Performance - The equals and hashCode methods of URL are blocking",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DMI_CALLING_NEXT_FROM_HASNEXT",
    "name": "Correctness - hasNext method invokes next",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe hasNext() method invokes the next() method. This is almost certainly wrong,\nsince the hasNext() method is not supposed to change the state of the iterator,\nand the next method is supposed to change the state of the iterator.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES",
    "name": "Correctness - Collections should not contain themselves",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This call to a generic collection's method would only make sense if a collection contained\nitself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause\nproblems if it were true (such as the computation of the hash code resulting in infinite recursion).\nIt is likely that the wrong value is being passed as a parameter.\n    </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_COLLECTION_OF_URLS",
    "name": "Performance - Maps and sets of URLs can be performance hogs",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_CONSTANT_DB_PASSWORD",
    "name": "Security - Hardcoded constant database password",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can\n    easily learn the password.\n</p>",
    "tags": [],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_DOH",
    "name": "Correctness - D'oh! A nonsensical method invocation",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis partical method invocation doesn't make sense, for reasons that should be apparent from inspection.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_EMPTY_DB_PASSWORD",
    "name": "Security - Empty database password",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.\n</p>",
    "tags": [],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS",
    "name": "Bad practice - Adding elements of an entry set may fail due to reuse of Entry objects",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The entrySet() method is allowed to return a view of the\n     underlying Map in which a single Entry object is reused and returned\n     during the iteration.  As of Java 1.6, both IdentityHashMap\n     and EnumMap did so. When iterating through such a Map,\n     the Entry value is only valid until you advance to the next iteration.\n     If, for example, you try to pass such an entrySet to an addAll method,\n     things will go badly wrong.\n    </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR",
    "name": "Correctness - Futile attempt to change max pool size of ScheduledThreadPoolExecutor",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Javadoc</a>)\nWhile ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.\n    </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_HARDCODED_ABSOLUTE_FILENAME",
    "name": "Style - Code contains a hard coded reference to an absolute pathname",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>This code constructs a File object using a hard coded to an absolute pathname\n(e.g., <code>new File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");</code>\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_INVOKING_HASHCODE_ON_ARRAY",
    "name": "Correctness - Invocation of hashCode on an array",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code invokes hashCode on an array. Calling hashCode on\nan array returns the same value as System.identityHashCode, and ignores\nthe contents and length of the array. If you need a hashCode that\ndepends on the contents of an array <code>a</code>,\nuse <code>java.util.Arrays.hashCode(a)</code>.\n\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY",
    "name": "Correctness - Invocation of toString on an unnamed array",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DMI_INVOKING_TOSTRING_ON_ARRAY",
    "name": "Correctness - Invocation of toString on an array",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code invokes toString on an array, which will generate a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT",
    "name": "Correctness - Double.longBitsToDouble invoked on an int",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed\n    as an argument. This almost certainly is not intended and is unlikely\n    to give the intended result.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_NONSERIALIZABLE_OBJECT_WRITTEN",
    "name": "Style - Non serializable object written to ObjectOutput",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.\nIf the object is, indeed, non-serializable, an error will result.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_RANDOM_USED_ONLY_ONCE",
    "name": "Bad practice - Random object created and used only once",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This code creates a java.util.Random object, uses it to generate one random number, and then discards\nthe Random object. This produces mediocre quality random numbers and is inefficient.\nIf possible, rewrite the code so that the Random object is created once and saved, and each time a new random number\nis required invoke a method on the existing Random object to obtain it.\n</p>\n\n<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random\nnumber; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead\n(and avoid allocating a new SecureRandom for each random number needed).\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS",
    "name": "Correctness - Creation of ScheduledThreadPoolExecutor with zero core threads",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29\">Javadoc</a>)\nA ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED",
    "name": "Style - Thread passed where Runnable expected",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> A Thread object is passed as a parameter to a method where\na Runnable is expected. This is rather unusual, and may indicate a logic error\nor cause unexpected behavior.\n   </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_UNSUPPORTED_METHOD",
    "name": "Style - Call to unsupported method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>All targets of this method invocation throw an UnsupportedOperationException.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_USELESS_SUBSTRING",
    "name": "Style - Invocation of substring(0), which returns the original value",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis code invokes substring(0) on a String, which returns the original value.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION",
    "name": "Bad practice - Don't use removeAll to clear a collection",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>,\nnot <code>c.removeAll(c)</code>. Calling  <code>c.removeAll(c)</code> to clear a collection\nis less clear, susceptible to errors from typos, less efficient and\nfor some collections, might throw a <code>ConcurrentModificationException</code>.\n    </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD",
    "name": "Correctness - Useless/vacuous call to EasyMock method",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This call doesn't pass any objects to the EasyMock method, so the call doesn't do anything.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DMI_VACUOUS_SELF_COLLECTION_CALL",
    "name": "Correctness - Vacuous call to collections",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This call doesn't make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should\nalways be true, and <code>c.retainAll(c)</code> should have no effect.\n    </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DM_BOOLEAN_CTOR",
    "name": "Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Creating new instances of <code>java.lang.Boolean</code> wastes\n  memory, since <code>Boolean</code> objects are immutable and there are\n  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>\n  method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_BOXED_PRIMITIVE_FOR_COMPARE",
    "name": "Performance - Boxing a primitive to compare",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A boxed primitive is created just to call compareTo method. It's more efficient to use static compare method\n  (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.\n  </p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DM_BOXED_PRIMITIVE_FOR_PARSING",
    "name": "Performance - Boxing/unboxing to parse a primitive",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A boxed primitive is created from a String, just to extract the unboxed primitive value.\n  It is more efficient to just call the static parseXXX method.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DM_BOXED_PRIMITIVE_TOSTRING",
    "name": "Performance - Method allocates a boxed primitive just to call toString",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static\n  form of toString which takes the primitive value. So,</p>\n  <table>\n     <tr><th>Replace...</th><th>With this...</th></tr>\n     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>\n     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>\n     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>\n     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>\n     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>\n     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>\n     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>\n  </table>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_CONVERT_CASE",
    "name": "I18n - Consider using Locale parameterized version of invoked method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> A String is being converted to upper or lowercase, using the platform's default encoding. This may\n      result in improper conversions when used with international characters. Use the </p>\n      <ul>\n    <li>String.toUpperCase( Locale l )</li>\n    <li>String.toLowerCase( Locale l )</li>\n    </ul>\n      <p>versions instead.</p>",
    "tags": [
      "i18n"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_DEFAULT_ENCODING",
    "name": "I18n - Reliance on default encoding",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.  </p>",
    "tags": [
      "i18n"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DM_EXIT",
    "name": "Bad practice - Method invokes System.exit(...)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> Invoking System.exit shuts down the entire Java virtual machine. This\n   should only been done when it is appropriate. Such calls make it\n   hard or impossible for your code to be invoked by other code.\n   Consider throwing a RuntimeException instead.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DM_FP_NUMBER_CTOR",
    "name": "Performance - Method invokes inefficient floating-point Number constructor; use static valueOf instead",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas\n      <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.\n      </p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_GC",
    "name": "Performance - Explicit garbage collection; extremely dubious except in benchmarking code",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Code explicitly invokes garbage collection.\n  Except for specific use in benchmarking, this is very dubious.</p>\n  <p>In the past, situations where people have explicitly invoked\n  the garbage collector in routines such as close or finalize methods\n  has led to huge performance black holes. Garbage collection\n   can be expensive. Any situation that forces hundreds or thousands\n   of garbage collections will bring the machine to a crawl.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_INVALID_MIN_MAX",
    "name": "Correctness - Incorrect combination of Math.max and Math.min",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of\n  the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result\n  (or NaN if the value is NaN).</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "DM_MONITOR_WAIT_ON_CONDITION",
    "name": "Multi-threading - Monitor wait() called on Condition",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This method calls <code>wait()</code> on a\n      <code>java.util.concurrent.locks.Condition</code> object.&nbsp;\n      Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>\n      methods defined by the <code>Condition</code> interface.\n      </p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DM_NEW_FOR_GETCLASS",
    "name": "Performance - Method allocates an object, only to get the class object",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This method allocates an object just to call getClass() on it, in order to\n  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_NEXTINT_VIA_NEXTDOUBLE",
    "name": "Performance - Use the nextInt method of Random rather than nextDouble to generate a random integer",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code>\nusing <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.\n</p>\n<p>The argument to nextInt must be positive. If, for example, you want to generate a random\nvalue from -99 to 0, use <code>-r.nextInt(100)</code>.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_NUMBER_CTOR",
    "name": "Performance - Method invokes inefficient Number constructor; use static valueOf instead",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas\n      <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Values between -128 and 127 are guaranteed to have corresponding cached instances\n      and using <code>valueOf</code> is approximately 3.5 times faster than using constructor.\n      For values outside the constant range the performance of both styles is the same.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of\n      <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.\n      </p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_RUN_FINALIZERS_ON_EXIT",
    "name": "Bad practice - Method invokes dangerous method runFinalizersOnExit",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> <em>Never call System.runFinalizersOnExit\nor Runtime.runFinalizersOnExit for any reason: they are among the most\ndangerous methods in the Java libraries.</em> -- Joshua Bloch</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DM_STRING_CTOR",
    "name": "Performance - Method invokes inefficient new String(String) constructor",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Using the <code>java.lang.String(String)</code> constructor wastes memory\n  because the object so constructed will be functionally indistinguishable\n  from the <code>String</code> passed as a parameter.&nbsp; Just use the\n  argument <code>String</code> directly.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_STRING_TOSTRING",
    "name": "Performance - Method invokes toString() method on a String",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Calling <code>String.toString()</code> is just a redundant operation.\n  Just use the String.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_STRING_VOID_CTOR",
    "name": "Performance - Method invokes inefficient new String() constructor",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Creating a new <code>java.lang.String</code> object using the\n  no-argument constructor wastes memory because the object so created will\n  be functionally indistinguishable from the empty string constant\n  <code>\"\"</code>.&nbsp; Java guarantees that identical string constants\n  will be represented by the same <code>String</code> object.&nbsp; Therefore,\n  you should just use the empty string constant directly.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "DM_USELESS_THREAD",
    "name": "Multi-threading - A thread was created using the default empty run method",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This method creates a thread without specifying a run method either by deriving from the Thread class, or\n  by passing a Runnable object. This thread, then, does nothing but waste time.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED",
    "name": "Malicious code - Classloaders should only be created inside doPrivileged block",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code creates a classloader,  which needs permission if a security manage is installed.\n  If this code might be invoked by code that does not\n  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "DP_DO_INSIDE_DO_PRIVILEDGED",
    "name": "Experimental - Method invoked that should be only be invoked inside a doPrivileged block",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>",
    "tags": [
      "experimental"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DP_DO_INSIDE_DO_PRIVILEGED",
    "name": "Malicious code - Method invoked that should be only be invoked inside a doPrivileged block",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_ARRAY_AND_NONARRAY",
    "name": "Correctness - equals() used to compare array and nonarray",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis method invokes the .equals(Object o) to compare an array and a reference that doesn't seem\nto be an array. If things being compared are of different types, they are guaranteed to be unequal\nand the comparison is almost certainly an error. Even if they are both arrays, the equals method\non arrays only determines of the two arrays are the same object.\nTo compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_BAD_ARRAY_COMPARE",
    "name": "Correctness - Invocation of equals() on an array, which is equivalent to ==",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis method invokes the .equals(Object o) method on an array. Since arrays do not override the equals\nmethod of Object, calling equals on an array is the same as comparing their addresses. To compare the\ncontents of the arrays, use <code>java.util.Arrays.equals(Object[], Object[])</code>.\nTo compare the addresses of the arrays, it would be\nless confusing to explicitly check pointer equality using <code>==</code>.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_INCOMPATIBLE_ARRAY_COMPARE",
    "name": "Correctness - equals(...) used to compare incompatible arrays",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis method invokes the .equals(Object o) to compare two arrays, but the arrays of\nof incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]).\nThey will never be equal. In addition, when equals(...) is used to compare arrays it\nonly checks to see if they are the same array, and ignores the contents of the arrays.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_NULL_ARG",
    "name": "Correctness - Call to equals(null)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method calls equals(Object), passing a null value as\nthe argument. According to the contract of the equals() method,\nthis call should always return <code>false</code>.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_UNRELATED_CLASS_AND_INTERFACE",
    "name": "Correctness - Call to equals() comparing unrelated class and interface",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis method calls equals(Object) on two references,  one of which is a class\nand the other an interface, where neither the class nor any of its\nnon-abstract subclasses implement the interface.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_UNRELATED_INTERFACES",
    "name": "Correctness - Call to equals() comparing different interface types",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method calls equals(Object) on two references of unrelated\ninterface types, where neither is a subtype of the other,\nand there are no known non-abstract classes which implement both interfaces.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_UNRELATED_TYPES",
    "name": "Correctness - Call to equals() comparing different types",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method calls equals(Object) on two references of different\nclass types and analysis suggests they will be to objects of different classes\nat runtime. Further, examination of the equals methods that would be invoked suggest that either\nthis call will always return false, or else the equals method is not be symmetric (which is\na property required by the contract\nfor equals in class Object).\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EC_UNRELATED_TYPES_USING_POINTER_EQUALITY",
    "name": "Correctness - Using pointer equality to compare different types",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method uses using pointer equality to compare two references that seem to be of\ndifferent types.  The result of this comparison will always be false at runtime.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EI_EXPOSE_REP",
    "name": "Malicious code - May expose internal representation by returning reference to mutable object",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> Returning a reference to a mutable object value stored in one of the object's fields\n  exposes the internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "EI_EXPOSE_REP2",
    "name": "Malicious code - May expose internal representation by incorporating reference to mutable object",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code stores a reference to an externally mutable object into the\n  internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "EI_EXPOSE_STATIC_REP2",
    "name": "Malicious code - May expose internal static state by storing a mutable object into a static field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code stores a reference to an externally mutable object into a static\n   field.\n   If unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "EQ_ABSTRACT_SELF",
    "name": "Bad practice - Abstract class defines covariant equals() method",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_ALWAYS_FALSE",
    "name": "Correctness - equals method always returns false",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means\nthat equals is not reflexive, one of the requirements of the equals method.</p>\n<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different\nsuperclass, you can use:</p>\n<pre><code>public boolean equals(Object o) {\n    return this == o;\n}\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_ALWAYS_TRUE",
    "name": "Correctness - equals method always returns true",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines an equals method that always returns true. This is imaginative, but not very smart.\nPlus, it means that the equals method is not symmetric.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS",
    "name": "Bad practice - Equals checks for incompatible operand",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This equals method is checking to see if the argument is some incompatible type\n(i.e., a class that is neither a supertype nor subtype of the class that defines\nthe equals method). For example, the Foo class might have an equals method\nthat looks like:\n</p>\n<pre><code>public boolean equals(Object o) {\n    if (o instanceof Foo)\n        return name.equals(((Foo)o).name);\n    else if (o instanceof String)\n        return name.equals(o);\n    else return false;\n}\n</code></pre>\n\n<p>This is considered bad practice, as it makes it very hard to implement an equals method that\nis symmetric and transitive. Without those properties, very unexpected behaviors are possible.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_COMPARETO_USE_OBJECT_EQUALS",
    "name": "Bad practice - Class defines compareTo(...) and uses Object.equals()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a <code>compareTo(...)</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>.\n    Generally, the value of compareTo should return zero if and only if\n    equals returns true. If this is violated, weird and unpredictable\n    failures will occur in classes such as PriorityQueue.\n    In Java 5 the PriorityQueue.remove method uses the compareTo method,\n    while in Java 6 it uses the equals method.</p>\n\n<p>From the JavaDoc for the compareTo method in the Comparable interface:\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition\nshould clearly indicate this fact. The recommended language\nis \"Note: this class has a natural ordering that is inconsistent with equals.\"\n</blockquote></p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_COMPARING_CLASS_NAMES",
    "name": "Correctness - equals method compares class names rather than class objects",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method checks to see if two objects are the same class by checking to see if the names\nof their classes are equal. You can have different classes with the same name if they are loaded by\ndifferent class loaders. Just check to see if the class objects are the same.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_DOESNT_OVERRIDE_EQUALS",
    "name": "Style - Class doesn't override equals in superclass",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This class extends a class that defines an equals method and adds fields, but doesn't\ndefine an equals method itself. Thus, equality on instances of this class will\nignore the identity of the subclass and the added fields. Be sure this is what is intended,\nand that you don't need to override the equals method. Even if you don't need to override\nthe equals method, consider overriding it anyway to document the fact\nthat the equals method for the subclass just return the result of\ninvoking super.equals(o).\n  </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_DONT_DEFINE_EQUALS_FOR_ENUM",
    "name": "Correctness - Covariant equals() method defined for enum",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines an enumeration, and equality on enumerations are defined\nusing object identity. Defining a covariant equals method for an enumeration\nvalue is exceptionally bad practice, since it would likely result\nin having two different enumeration values that compare as equals using\nthe covariant enum method, and as not equal when compared normally.\nDon't do it.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_GETCLASS_AND_CLASS_CONSTANT",
    "name": "Bad practice - equals method fails for subtypes",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class has an equals method that will be broken if it is inherited by subclasses.\nIt compares a class literal with the class of the argument (e.g., in class <code>Foo</code>\nit might check if <code>Foo.class == o.getClass()</code>).\nIt is better to check if <code>this.getClass() == o.getClass()</code>.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_OTHER_NO_OBJECT",
    "name": "Correctness - equals() method defined that doesn't override equals(Object)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines an <code>equals()</code>\n  method, that doesn't override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp; Instead, it\n  inherits an <code>equals(Object)</code> method from a superclass.\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_OTHER_USE_OBJECT",
    "name": "Correctness - equals() method defined that doesn't override Object.equals(Object)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines an <code>equals()</code>\n  method, that doesn't override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC",
    "name": "Correctness - equals method overrides equals in superclass and may not be symmetric",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines an equals method that overrides an equals method in a superclass. Both equals methods\nmethods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril,\nsince it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>).\nIf B is a subtype of A, and A's equals method checks that the argument is an instanceof A, and B's equals method\nchecks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these\nmethods is not symmetric.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_SELF_NO_OBJECT",
    "name": "Bad practice - Covariant equals() method defined",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_SELF_USE_OBJECT",
    "name": "Correctness - Covariant equals() method defined, Object.equals(Object) inherited",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines a covariant version of the <code>equals()</code>\n  method, but inherits the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "EQ_UNUSUAL",
    "name": "Style - Unusual equals method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This class doesn't do any of the patterns we recognize for checking that the type of the argument\nis compatible with the type of the <code>this</code> object. There might not be anything wrong with\nthis code, but it is worth reviewing.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "ES_COMPARING_PARAMETER_STRING_WITH_EQ",
    "name": "Bad practice - Comparison of String parameter using == or !=",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to\npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ES_COMPARING_STRINGS_WITH_EQ",
    "name": "Bad practice - Comparison of String objects using == or !=",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ESync_EMPTY_SYNC",
    "name": "Multi-threading - Empty synchronized block",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The code contains an empty synchronized block:</p>\n<pre><code>synchronized() {\n}\n</code></pre>\n<p>Empty synchronized blocks are far more subtle and hard to use correctly\nthan most people recognize, and empty synchronized blocks\nare almost never a better solution\nthan less contrived solutions.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "FB_MISSING_EXPECTED_WARNING",
    "name": "Correctness - Missing expected or desired warning from SpotBugs",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>SpotBugs didn't generate generated a warning that, according to a @ExpectedWarning annotated,\n            is expected or desired.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "FB_UNEXPECTED_WARNING",
    "name": "Correctness - Unexpected/undesired warning from SpotBugs",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>SpotBugs generated a warning that, according to a @NoWarning annotated,\n            is unexpected or undesired.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "FE_FLOATING_POINT_EQUALITY",
    "name": "Style - Test for floating point equality",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n    This operation compares two floating point values for equality.\n    Because floating point calculations may involve rounding,\n   calculated float and double values may not be accurate.\n    For values that must be precise, such as monetary values,\n   consider using a fixed-precision type such as BigDecimal.\n    For values that need not be precise, consider comparing for equality\n    within some range, for example:\n    <code>if ( Math.abs(x - y) &lt; .0000001 )</code>.\n   See the Java Language Specification, section 4.2.4.\n    </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER",
    "name": "Correctness - Doomed test for equality to NaN",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n    This code checks to see if a floating point value is equal to the special\n    Not A Number value (e.g., <code>if (x == Double.NaN)</code>). However,\n    because of the special semantics of <code>NaN</code>, no value\n    is equal to <code>Nan</code>, including <code>NaN</code>. Thus,\n    <code>x == Double.NaN</code> always evaluates to false.\n\n    To check to see if a value contained in <code>x</code>\n    is the special Not A Number value, use\n    <code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if\n    <code>x</code> is floating point precision).\n    </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "FI_EMPTY",
    "name": "Bad practice - Empty finalizer should be deleted",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> Empty <code>finalize()</code> methods are useless, so they should\n  be deleted.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "FI_EXPLICIT_INVOCATION",
    "name": "Bad practice - Explicit invocation of finalizer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method contains an explicit invocation of the <code>finalize()</code>\n  method on an object.&nbsp; Because finalizer methods are supposed to be\n  executed once, and only by the VM, this is a bad idea.</p>\n<p>If a connected set of objects beings finalizable, then the VM will invoke the\nfinalize method on all the finalizable object, possibly at the same time in different threads.\nThus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize\non objects referenced by X, because they may already be getting finalized in a separate thread.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "FI_FINALIZER_NULLS_FIELDS",
    "name": "Bad practice - Finalizer nulls fields",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,\n  and the object is going to be garbage collected anyway.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "FI_FINALIZER_ONLY_NULLS_FIELDS",
    "name": "Bad practice - Finalizer only nulls fields",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This finalizer does nothing except null out fields. This is completely pointless, and requires that\nthe object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize\nmethod.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "FI_MISSING_SUPER_CALL",
    "name": "Bad practice - Finalizer does not call superclass finalizer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This <code>finalize()</code> method does not make a call to its\n  superclass's <code>finalize()</code> method.&nbsp; So, any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Add a call to <code>super.finalize()</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "FI_NULLIFY_SUPER",
    "name": "Bad practice - Finalizer nullifies superclass finalizer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This empty <code>finalize()</code> method explicitly negates the\n  effect of any finalizer defined by its superclass.&nbsp; Any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Unless this is intended, delete this method.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "FI_PUBLIC_SHOULD_BE_PROTECTED",
    "name": "Malicious code - Finalizer should be protected, not public",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> A class's <code>finalize()</code> method should have protected access,\n   not public.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "FI_USELESS",
    "name": "Bad practice - Finalizer does nothing but call superclass finalizer",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The only thing this <code>finalize()</code> method does is call\n  the superclass's <code>finalize()</code> method, making it\n  redundant.&nbsp; Delete it.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "FL_MATH_USING_FLOAT_PRECISION",
    "name": "Correctness - Method performs math using floating point precision",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n   The method performs math operations using floating point precision.\n   Floating point precision is very imprecise. For example,\n   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "GC_UNCHECKED_TYPE_IN_GENERIC_CALL",
    "name": "Bad practice - Unchecked type in generic call",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This call to a generic collection method passes an argument\n    while compile type Object where a specific type from\n    the generic type parameters is expected.\n    Thus, neither the standard Java type system nor static analysis\n    can provide useful information on whether the\n    object being passed as a parameter is of an appropriate type.\n    </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "GC_UNRELATED_TYPES",
    "name": "Correctness - No relationship between generic parameter and method argument",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This call to a generic collection method contains an argument\n     with an incompatible class from that of the collection's parameter\n    (i.e., the type of the argument is neither a supertype nor a subtype\n        of the corresponding generic type argument).\n     Therefore, it is unlikely that the collection contains any objects\n    that are equal to the method argument used here.\n    Most likely, the wrong value is being passed to the method.</p>\n    <p>In general, instances of two unrelated classes are not equal.\n    For example, if the <code>Foo</code> and <code>Bar</code> classes\n    are not related by subtyping, then an instance of <code>Foo</code>\n        should not be equal to an instance of <code>Bar</code>.\n    Among other issues, doing so will likely result in an equals method\n    that is not symmetrical. For example, if you define the <code>Foo</code> class\n    so that a <code>Foo</code> can be equal to a <code>String</code>,\n    your equals method isn't symmetrical since a <code>String</code> can only be equal\n    to a <code>String</code>.\n    </p>\n    <p>In rare cases, people do define nonsymmetrical equals methods and still manage to make\n    their code work. Although none of the APIs document or guarantee it, it is typically\n    the case that if you check if a <code>Collection&lt;String&gt;</code> contains\n    a <code>Foo</code>, the equals method of argument (e.g., the equals method of the\n    <code>Foo</code> class) used to perform the equality checks.\n    </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HE_EQUALS_NO_HASHCODE",
    "name": "Bad practice - Class defines equals() but not hashCode()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>.&nbsp; Therefore, the class may violate the\n  invariant that equal objects must have equal hashcodes.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HE_EQUALS_USE_HASHCODE",
    "name": "Bad practice - Class defines equals() and uses Object.hashCode()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>, and inherits the implementation of\n  <code>hashCode()</code> from <code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre><code>public int hashCode() {\n    assert false : \"hashCode not designed\";\n    return 42; // any arbitrary constant will do\n}\n</code></pre>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HE_HASHCODE_NO_EQUALS",
    "name": "Bad practice - Class defines hashCode() but not equals()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a <code>hashCode()</code> method but not an\n  <code>equals()</code> method.&nbsp; Therefore, the class may\n  violate the invariant that equal objects must have equal hashcodes.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HE_HASHCODE_USE_OBJECT_EQUALS",
    "name": "Bad practice - Class defines hashCode() and uses Object.equals()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a <code>hashCode()</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>\n  (which defines equality by comparing object references).&nbsp; Although\n  this will probably satisfy the contract that equal objects must have\n  equal hashcodes, it is probably not what was intended by overriding\n  the <code>hashCode()</code> method.&nbsp; (Overriding <code>hashCode()</code>\n  implies that the object's identity is based on criteria more complicated\n  than simple reference equality.)</p>\n<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre><code>public int hashCode() {\n    assert false : \"hashCode not designed\";\n    return 42; // any arbitrary constant will do\n}\n</code></pre>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HE_INHERITS_EQUALS_USE_HASHCODE",
    "name": "Bad practice - Class inherits equals() and uses Object.hashCode()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class inherits <code>equals(Object)</code> from an abstract\n  superclass, and <code>hashCode()</code> from\n<code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n  <p>If you don't want to define a hashCode method, and/or don't\n   believe the object will ever be put into a HashMap/Hashtable,\n   define the <code>hashCode()</code> method\n   to throw <code>UnsupportedOperationException</code>.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS",
    "name": "Correctness - Signature declares use of unhashable class in hashed construct",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A method, field or class declares a generic signature where a non-hashable class\nis used in context where a hashable class is required.\nA class that declares an equals method but inherits a hashCode() method\nfrom Object is unhashable, since it doesn't fulfill the requirement that\nequal objects have equal hashCodes.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HE_USE_OF_UNHASHABLE_CLASS",
    "name": "Correctness - Use of class without a hashCode() method in a hashed data structure",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A class defines an equals(Object)  method but not a hashCode() method,\nand thus doesn't fulfill the requirement that equal objects have equal hashCodes.\nAn instance of this class is used in a hash data structure, making the need to\nfix this problem of highest importance.",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "HRS_REQUEST_PARAMETER_TO_COOKIE",
    "name": "Security - HTTP cookie formed from untrusted input",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>",
    "tags": [],
    "constantDebtMinutes": 60
  },
  {
    "key": "HRS_REQUEST_PARAMETER_TO_HTTP_HEADER",
    "name": "Security - HTTP Response splitting vulnerability",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>",
    "tags": [],
    "constantDebtMinutes": 60
  },
  {
    "key": "HSC_HUGE_SHARED_STRING_CONSTANT",
    "name": "Performance - Huge string constants is duplicated across multiple class files",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n    A large String constant is duplicated across multiple class files.\n    This is likely because a final field is initialized to a String constant, and the Java language\n    mandates that all references to a final field from other classes be inlined into\nthat classfile. See <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475\">JDK bug 6447475</a>\n    for a description of an occurrence of this bug in the JDK and how resolving it reduced\n    the size of the JDK by 1 megabyte.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD",
    "name": "Style - Potentially ambiguous invocation of either an inherited or outer method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nAn inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class.\nFor example, you invoke <code>foo(17)</code>, which is defined in both a superclass and in an outer method.\nBy the Java semantics,\nit will be resolved to invoke the inherited method, but this may not be what\nyou intend.\n</p>\n<p>If you really intend to invoke the inherited method,\ninvoke it by invoking the method on super (e.g., invoke super.foo(17)), and\nthus it will be clear to other readers of your code and to SpotBugs\nthat you want to invoke the inherited method, not the method in the outer class.\n</p>\n<p>If you call <code>this.foo(17)</code>, then the inherited method will be invoked. However, since SpotBugs only looks at\nclassfiles, it\ncan't tell the difference between an invocation of <code>this.foo(17)</code> and <code>foo(17)</code>, it will still\ncomplain about a potential ambiguous invocation.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ICAST_BAD_SHIFT_AMOUNT",
    "name": "Correctness - 32 bit int shifted by an amount not in the range -31..31",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code performs shift of a 32 bit int by a constant amount outside\nthe range -31..31.\nThe effect of this is to use the lower 5 bits of the integer\nvalue to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits,\nand shifting by 32 bits is the same as shifting by zero bits). This probably isn't what was expected,\nand it is at least confusing.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ICAST_IDIV_CAST_TO_DOUBLE",
    "name": "Style - Integral division result cast to double or float",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis code casts the result of an integral division (e.g., int or long division)\noperation to double or\nfloat.\nDoing division on integers truncates the result\nto the integer value closest to zero.  The fact that the result\nwas cast to double suggests that this precision should have been retained.\nWhat was probably meant was to cast one or both of the operands to\ndouble <em>before</em> performing the division.  Here is an example:\n</p>\n<pre><code>int x = 2;\nint y = 5;\n// Wrong: yields result 0.0\ndouble value1 = x / y;\n\n// Right: yields result 0.4\ndouble value2 = x / (double) y;\n</code></pre>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ICAST_INTEGER_MULTIPLY_CAST_TO_LONG",
    "name": "Style - Result of integer multiplication cast to long",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis code performs integer multiply and then converts the result to a long,\nas in:</p>\n<pre><code>long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }\n</code></pre>\n<p>\nIf the multiplication is done using long arithmetic, you can avoid\nthe possibility that the result will overflow. For example, you\ncould fix the above code to:</p>\n<pre><code>long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }\n</code></pre>\n<p>\nor\n</p>\n<pre><code>static final long MILLISECONDS_PER_DAY = 24L*3600*1000;\nlong convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }\n</code></pre>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ICAST_INT_2_LONG_AS_INSTANT",
    "name": "Correctness - int value converted to long and used as absolute time",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis code converts a 32-bit int value to a 64-bit long value, and then\npasses that value for a method parameter that requires an absolute time value.\nAn absolute time value is the number\nof milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT.\nFor example, the following method, intended to convert seconds since the epoch into a Date, is badly\nbroken:</p>\n<pre><code>Date getDate(int seconds) { return new Date(seconds * 1000); }\n</code></pre>\n<p>The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value.\nWhen a 32-bit value is converted to 64-bits and used to express an absolute time\nvalue, only dates in December 1969 and January 1970 can be represented.</p>\n\n<p>Correct implementations for the above method are:</p>\n<pre><code>// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL",
    "name": "Correctness - Integral value cast to double and then passed to Math.ceil",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis code converts an integral value (e.g., int or long)\nto a double precision\nfloating point number and then\npassing the result to the Math.ceil() function, which rounds a double to\nthe next higher integer value. This operation should always be a no-op,\nsince the converting an integer to a double should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.ceil was intended to be performed using double precision\nfloating point arithmetic.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND",
    "name": "Correctness - int value cast to float and then passed to Math.round",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis code converts an int value to a float precision\nfloating point number and then\npassing the result to the Math.round() function, which returns the int/long closest\nto the argument. This operation should always be a no-op,\nsince the converting an integer to a float should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.round was intended to be performed using\nfloating point arithmetic.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT",
    "name": "Style - Unsigned right shift cast to short/byte",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThe code performs an unsigned right shift, whose result is then\ncast to a short or byte, which discards the upper bits of the result.\nSince the upper bits are discarded, there may be no difference between\na signed and unsigned right shift (depending upon the size of the shift).\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "IC_INIT_CIRCULARITY",
    "name": "Style - Initialization circularity",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> A circularity was detected in the static initializers of the two\n  classes referenced by the bug instance.&nbsp; Many kinds of unexpected\n  behavior may arise from such circularity.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION",
    "name": "Bad practice - Superclass uses subclass during initialization",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> During the initialization of a class, the class makes an active use of a subclass.\nThat subclass will not yet be initialized at the time of this use.\nFor example, in the following code, <code>foo</code> will be null.</p>\n<pre><code>public class CircularClassInitialization {\n    static class InnerClassSingleton extends CircularClassInitialization {\n        static InnerClassSingleton singleton = new InnerClassSingleton();\n    }\n\n    static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n</code></pre>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IIL_ELEMENTS_GET_LENGTH_IN_LOOP",
    "name": "Performance - NodeList.getLength() called in a loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The method calls NodeList.getLength() inside the loop and NodeList was produced by getElementsByTagName call.\nThis NodeList doesn't store its length, but computes it every time in not very optimal way.\nConsider storing the length to the variable before the loop.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IIL_PATTERN_COMPILE_IN_LOOP",
    "name": "Performance - Method calls Pattern.compile in a loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The method calls Pattern.compile inside the loop passing the constant arguments.\nIf the Pattern should be used several times there's no reason to compile it for each loop iteration.\nMove this call outside of the loop or even into static final field.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT",
    "name": "Performance - Method compiles the regular expression in a loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The method creates the same regular expression inside the loop, so it will be compiled every iteration.\nIt would be more optimal to precompile this regular expression using Pattern.compile outside of the loop.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IIL_PREPARE_STATEMENT_IN_LOOP",
    "name": "Performance - Method calls prepareStatement in a loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The method calls Connection.prepareStatement inside the loop passing the constant arguments.\nIf the PreparedStatement should be executed several times there's no reason to recreate it for each loop iteration.\nMove this call outside of the loop.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IIO_INEFFICIENT_INDEX_OF",
    "name": "Performance - Inefficient use of String.indexOf(String)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code passes a constant string of length 1 to String.indexOf().\nIt is more efficient to use the integer implementations of String.indexOf().\nf. e. call <code>myString.indexOf('.')</code> instead of <code>myString.indexOf(\".\")</code></p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IIO_INEFFICIENT_LAST_INDEX_OF",
    "name": "Performance - Inefficient use of String.lastIndexOf(String)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code passes a constant string of length 1 to String.lastIndexOf().\nIt is more efficient to use the integer implementations of String.lastIndexOf().\nf. e. call <code>myString.lastIndexOf('.')</code> instead of <code>myString.lastIndexOf(\".\")</code></p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD",
    "name": "Correctness - JUnit assertion in run method will not be noticed by JUnit",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A JUnit assertion is performed in a run method. Failed JUnit assertions\njust result in exceptions being thrown.\nThus, if this exception occurs in a thread other than the thread that invokes\nthe test method, the exception will terminate the thread but not result\nin the test failing.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IJU_BAD_SUITE_METHOD",
    "name": "Correctness - TestCase declares a bad suite method",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Class is a JUnit TestCase and defines a suite() method.\nHowever, the suite method needs to be declared as either</p>\n<pre><code>public static junit.framework.Test suite()\n</code></pre>\n<p>\nor\n</p>\n<pre><code>public static junit.framework.TestSuite suite()\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IJU_NO_TESTS",
    "name": "Correctness - TestCase has no tests",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Class is a JUnit TestCase but has not implemented any test methods.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IJU_SETUP_NO_SUPER",
    "name": "Correctness - TestCase defines setUp that doesn't call super.setUp()",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call\nsuper.setUp(), but doesn't.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IJU_SUITE_NOT_STATIC",
    "name": "Correctness - TestCase implements a non-static suite method",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Class is a JUnit TestCase and implements the suite() method.\n The suite method should be declared as being static, but isn't.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IJU_TEARDOWN_NO_SUPER",
    "name": "Correctness - TestCase defines tearDown that doesn't call super.tearDown()",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call\nsuper.tearDown(), but doesn't.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IL_CONTAINER_ADDED_TO_ITSELF",
    "name": "Correctness - A collection is added to itself",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A collection is added to itself. As a result, computing the hashCode of this\nset will throw a StackOverflowException.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IL_INFINITE_LOOP",
    "name": "Correctness - An apparent infinite loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This loop doesn't seem to have a way to terminate (other than by perhaps\nthrowing an exception).</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IL_INFINITE_RECURSIVE_LOOP",
    "name": "Correctness - An apparent infinite recursive loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This method unconditionally invokes itself. This would seem to indicate\nan infinite recursive loop that will result in a stack overflow.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IMA_INEFFICIENT_MEMBER_ACCESS",
    "name": "Performance - Method accesses a private member variable of owning class",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This method of an inner class reads from or writes to a private member variable of the owning class,\n      or calls a private method of the owning class. The compiler must generate a special method to access this\n      private member, causing this to be less efficient. Relaxing the protection of the member variable or method\n      will allow the compiler to treat this as a normal access.\n      </p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IMSE_DONT_CATCH_IMSE",
    "name": "Bad practice - Dubious catching of IllegalMonitorStateException",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>IllegalMonitorStateException is generally only\n   thrown in case of a design flaw in your code (calling wait or\n   notify on an object you do not hold a lock on).</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IM_AVERAGE_COMPUTATION_COULD_OVERFLOW",
    "name": "Style - Computation of average could overflow",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>The code computes the average of two integers using either division or signed right shift,\nand then uses the result as the index of an array.\nIf the values being averaged are very large, this can overflow (resulting in the computation\nof a negative average).  Assuming that the result is intended to be nonnegative, you\ncan use an unsigned right shift instead. In other words, rather that using <code>(low+high)/2</code>,\nuse <code>(low+high) &gt;&gt;&gt; 1</code>\n</p>\n<p>This bug exists in many earlier implementations of binary search and merge sort.\nMartin Buchholz <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6412541\">found and fixed it</a>\nin the JDK libraries, and Joshua Bloch\n<a href=\"http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\">widely\npublicized the bug pattern</a>.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IM_BAD_CHECK_FOR_ODD",
    "name": "Style - Check for oddness that won't work for negative numbers",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThe code uses x % 2 == 1 to check to see if a value is odd, but this won't work\nfor negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check\nfor oddness, consider using x &amp; 1 == 1, or x % 2 != 0.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IM_MULTIPLYING_RESULT_OF_IREM",
    "name": "Correctness - Integer multiply of result of integer remainder",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code multiplies the result of an integer remaining by an integer constant.\nBe sure you don't have your operator precedence confused. For example\ni % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "INT_BAD_COMPARISON_WITH_INT_VALUE",
    "name": "Correctness - Bad comparison of int value with long constant",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code compares an int value with a long constant that is outside\nthe range of values that can be represented as an int value.\nThis comparison is vacuous and possibly to be incorrect.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE",
    "name": "Correctness - Bad comparison of nonnegative value with negative constant or zero",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code compares a value that is guaranteed to be non-negative with a negative constant or zero.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "INT_BAD_COMPARISON_WITH_SIGNED_BYTE",
    "name": "Correctness - Bad comparison of signed byte",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Signed bytes can only have a value in the range -128 to 127. Comparing\na signed byte with a value outside that range is vacuous and likely to be incorrect.\nTo convert a signed byte <code>b</code> to an unsigned value in the range 0..255,\nuse <code>0xff &amp; b</code>.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "INT_BAD_REM_BY_1",
    "name": "Style - Integer remainder modulo 1",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> Any expression (exp % 1) is guaranteed to always return zero.\nDid you mean (exp &amp; 1) or (exp % 2) instead?\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "INT_VACUOUS_BIT_OPERATION",
    "name": "Style - Vacuous bit mask operation on integer value",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This is an integer bit operation (and, or, or exclusive or) that doesn't do any useful work\n(e.g., <code>v & 0xffffffff</code>).\n\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "INT_VACUOUS_COMPARISON",
    "name": "Style - Vacuous comparison of integer value",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> There is an integer comparison that always returns\nthe same value (e.g., x &lt;= Integer.MAX_VALUE).\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "IO_APPENDING_TO_OBJECT_OUTPUT_STREAM",
    "name": "Correctness - Doomed attempt to append to an object output stream",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n     This code opens a file in append mode and then wraps the result in an object output stream.\n     This won't allow you to append to an existing object output stream stored in a file. If you want to be\n     able to append to an object output stream, you need to keep the object output stream open.\n      </p>\n      <p>The only situation in which opening a file in append mode and the writing an object output stream\n      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset\n      where the append started.\n      </p>\n\n      <p>\n      TODO: example.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN",
    "name": "Correctness - A parameter is dead upon entry to a method but overwritten",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe initial value of this parameter is ignored, and the parameter\nis overwritten here. This often indicates a mistaken belief that\nthe write to the parameter will be conveyed back to\nthe caller.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IS2_INCONSISTENT_SYNC",
    "name": "Multi-threading - Inconsistent synchronization",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ul>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> The class is <b>not</b> annotated as javax.annotation.concurrent.NotThreadSafe,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ul>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> You can select the nodes labeled \"Unsynchronized access\" to show the\n  code locations where the detector believed that a field was accessed\n  without synchronization.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ISC_INSTANTIATE_STATIC_CLASS",
    "name": "Bad practice - Needless instantiation of class that only supplies static methods",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class allocates an object that is based on a class that only supplies static methods. This object\ndoes not need to be created, just access the static methods directly using the class name as a qualifier.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IS_FIELD_NOT_GUARDED",
    "name": "Multi-threading - Field not guarded against concurrent access",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy,\nbut can be accessed in a way that seems to violate those annotations.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "IS_INCONSISTENT_SYNC",
    "name": "Multi-threading - Inconsistent synchronization",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ul>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ul>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ITA_INEFFICIENT_TO_ARRAY",
    "name": "Performance - Method uses toArray() with zero-length array argument",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method uses the toArray() method of a collection derived class, and passes\nin a zero-length prototype array argument.  It is more efficient to use\n<code>myCollection.toArray(new Foo[myCollection.size()])</code>\nIf the array passed in is big enough to store all of the\nelements of the collection, then it is populated and returned\ndirectly. This avoids the need to create a second array\n(by reflection) to return as the result.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "IT_NO_SUCH_ELEMENT",
    "name": "Bad practice - Iterator next() method can't throw NoSuchElementException",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;\n  However, its <code>next()</code> method is not capable of throwing\n  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>\n  method should be changed so it throws <code>NoSuchElementException</code>\n  if is called when there are no more elements to return.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION",
    "name": "Bad practice - Store of non serializable object into HttpSession",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\nThis code seems to be storing a non-serializable object into an HttpSession.\nIf this session is passivated or migrated, an error will result.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS",
    "name": "Bad practice - Fields of immutable classes should be final",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable,\n  and the rules for those annotations require that all fields are final.\n   .</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "JLM_JSR166_LOCK_MONITORENTER",
    "name": "Multi-threading - Synchronization performed on Lock",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method performs synchronization an object that implements\njava.util.concurrent.locks.Lock. Such an object is locked/unlocked\nusing\n<code>acquire()</code>/<code>release()</code> rather\nthan using the <code>synchronized (...)</code> construct.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "JLM_JSR166_UTILCONCURRENT_MONITORENTER",
    "name": "Multi-threading - Synchronization performed on util.concurrent instance",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method performs synchronization an object that is an instance of\na class from the java.util.concurrent package (or its subclasses). Instances\nof these classes have their own concurrency control mechanisms that are orthogonal to\nthe synchronization provided by the Java keyword <code>synchronized</code>. For example,\nsynchronizing on an <code>AtomicBoolean</code> will not prevent other threads\nfrom modifying the  <code>AtomicBoolean</code>.</p>\n<p>Such code may be correct, but should be carefully reviewed and documented,\nand may confuse people who have to maintain the code at a later date.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT",
    "name": "Multi-threading - Using monitor style wait methods on util.concurrent abstraction",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method calls\n<code>wait()</code>,\n<code>notify()</code> or\n<code>notifyAll()()</code>\non an object that also provides an\n<code>await()</code>,\n<code>signal()</code>,\n<code>signalAll()</code> method (such as util.concurrent Condition objects).\nThis probably isn't what you want, and even if you do want it, you should consider changing\nyour design, as other developers will find it exceptionally confusing.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE",
    "name": "Experimental - Potential lost logger changes due to weak reference in OpenJDK",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>OpenJDK introduces a potential incompatibility.\n In particular, the java.util.logging.Logger behavior has\n  changed. Instead of using strong references, it now uses weak references\n  internally. That's a reasonable change, but unfortunately some code relies on\n  the old behavior - when changing logger configuration, it simply drops the\n  logger reference. That means that the garbage collector is free to reclaim\n  that memory, which means that the logger configuration is lost. For example,\nconsider:\n</p>\n<pre><code>public static void initLogging() throws Exception {\n    Logger logger = Logger.getLogger(\"edu.umd.cs\");\n    logger.addHandler(new FileHandler()); // call to change logger configuration\n    logger.setUseParentHandlers(false); // another call to change logger configuration\n}\n</code></pre>\n<p>The logger reference is lost at the end of the method (it doesn't\nescape the method), so if you have a garbage collection cycle just\nafter the call to initLogging, the logger configuration is lost\n(because Logger only keeps weak references).</p>\n<pre><code>public static void main(String[] args) throws Exception {\n    initLogging(); // adds a file handler to the logger\n    System.gc(); // logger configuration lost\n    Logger.getLogger(\"edu.umd.cs\").info(\"Some message\"); // this isn't logged to the file as expected\n}\n</code></pre>\n<p><em>Ulf Ochsenfahrt and Eric Fellheimer</em></p>",
    "tags": [
      "experimental"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "LI_LAZY_INIT_INSTANCE",
    "name": "Multi-threading - Incorrect lazy initialization of instance field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains an unsynchronized lazy initialization of a non-volatile field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LI_LAZY_INIT_STATIC",
    "name": "Multi-threading - Incorrect lazy initialization of static field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains an unsynchronized lazy initialization of a non-volatile static field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "LI_LAZY_INIT_UPDATE_STATIC",
    "name": "Multi-threading - Incorrect lazy initialization and update of static field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains an unsynchronized lazy initialization of a static field.\nAfter the field is set, the object stored into that location is further updated or accessed.\nThe setting of the field is visible to other threads as soon as it is set. If the\nfurther accesses in the method that set the field serve to initialize the object, then\nyou have a <em>very serious</em> multithreading bug, unless something else prevents\nany other thread from accessing the stored object until it is fully initialized.\n</p>\n<p>Even if you feel confident that the method is never called by multiple\nthreads, it might be better to not set the static field until the value\nyou are setting it to is fully populated/initialized.",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ME_ENUM_FIELD_SETTER",
    "name": "Bad practice - Public enum method unconditionally sets its field",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code\n  or by accident from another package. Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world.\n  Consider removing this method or declaring it package-private.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ME_MUTABLE_ENUM_FIELD",
    "name": "Bad practice - Enum field is public and mutable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package.\n  Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world.\n  Consider declaring this field final and/or package-private.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "MF_CLASS_MASKS_FIELD",
    "name": "Correctness - Class defines field that masks a superclass field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines a field with the same name as a visible\ninstance field in a superclass.  This is confusing, and\nmay indicate an error if methods update or access one of\nthe fields when they wanted the other.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "MF_METHOD_MASKS_FIELD",
    "name": "Correctness - Method defines a variable that obscures a field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method defines a local variable with the same name as a field\nin this class or a superclass.  This may cause the method to\nread an uninitialized value from the field, leave the field uninitialized,\nor both.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD",
    "name": "Multi-threading - Synchronization on field in futile attempt to guard that field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method synchronizes on a field in what appears to be an attempt\nto guard against simultaneous updates to that field. But guarding a field\ngets a lock on the referenced object, not on the field. This may not\nprovide the mutual exclusion you need, and other threads might\nbe obtaining locks on the referenced objects (for other purposes). An example\nof this pattern would be:</p>\n<pre><code>private Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n}\n</code></pre>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ML_SYNC_ON_UPDATED_FIELD",
    "name": "Multi-threading - Method synchronizes on an updated field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method synchronizes on an object\n   referenced from a mutable field.\n   This is unlikely to have useful semantics, since different\nthreads may be synchronizing on different objects.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "MSF_MUTABLE_SERVLET_FIELD",
    "name": "Multi-threading - Mutable servlet field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A web server generally only creates one instance of servlet or JSP class (i.e., treats\nthe class as a Singleton),\nand will\nhave multiple threads invoke methods on that instance to service multiple\nsimultaneous requests.\nThus, having a mutable instance field generally creates race conditions.",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "MS_CANNOT_BE_FINAL",
    "name": "Malicious code - Field isn't final and can't be protected from malicious code",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n   Unfortunately, the way the field is used doesn't allow\n   any easy fix to this problem.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MS_EXPOSE_REP",
    "name": "Malicious code - Public static method may expose internal representation by returning array",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> A public static method returns a reference to\n   an array that is part of the static state of the class.\n   Any code that calls this method can freely modify\n   the underlying array.\n   One fix is to return a copy of the array.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MS_FINAL_PKGPROTECT",
    "name": "Malicious code - Field should be both final and package protected",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n   A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made package protected and/or made final\n   to avoid\n        this vulnerability.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MS_MUTABLE_ARRAY",
    "name": "Malicious code - Field is a mutable array",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> A final static field references an array\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the array.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MS_MUTABLE_COLLECTION",
    "name": "Malicious code - Field is a mutable collection",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>A mutable collection instance is assigned to a final static field,\n   thus can be changed by malicious code or by accident from another package.\n   Consider wrapping this field into Collections.unmodifiableSet/List/Map/etc.\n   to avoid this vulnerability.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "MS_MUTABLE_COLLECTION_PKGPROTECT",
    "name": "Malicious code - Field is a mutable collection which should be package protected",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>A mutable collection instance is assigned to a final static field,\n   thus can be changed by malicious code or by accident from another package.\n   The field could be made package protected to avoid this vulnerability.\n   Alternatively you may wrap this field into Collections.unmodifiableSet/List/Map/etc.\n   to avoid this vulnerability.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "MS_MUTABLE_HASHTABLE",
    "name": "Malicious code - Field is a mutable Hashtable",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>A final static field references a Hashtable\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the Hashtable.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MS_OOI_PKGPROTECT",
    "name": "Malicious code - Field should be moved out of an interface and made package protected",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n A final static field that is\ndefined in an interface references a mutable\n   object such as an array or hashtable.\n   This mutable object could\n   be changed by malicious code or\n        by accident from another package.\n   To solve this, the field needs to be moved to a class\n   and made package protected\n   to avoid\n        this vulnerability.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "MS_PKGPROTECT",
    "name": "Malicious code - Field should be package protected",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> A mutable static field could be changed by malicious code or\n   by accident.\n   The field could be made package protected to avoid\n   this vulnerability.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MS_SHOULD_BE_FINAL",
    "name": "Malicious code - Field isn't final but should be",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MS_SHOULD_BE_REFACTORED_TO_BE_FINAL",
    "name": "Malicious code - Field isn't final but should be refactored to be so",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nThis static field public but not final, and\ncould be changed by malicious code or\nby accident from another package.\nThe field could be made final to avoid\nthis vulnerability. However, the static initializer contains more than one write\nto the field, so doing so will require some refactoring.\n</p>",
    "tags": [
      "malicious-code"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "MTIA_SUSPECT_SERVLET_INSTANCE_FIELD",
    "name": "Style - Class extends Servlet class and uses instance variables",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n    This class extends from a Servlet class, and uses an instance member variable. Since only\n    one instance of a Servlet class is created by the J2EE framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables.\n    </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "MTIA_SUSPECT_STRUTS_INSTANCE_FIELD",
    "name": "Style - Class extends Struts Action class and uses instance variables",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n    This class extends from a Struts Action class, and uses an instance member variable. Since only\n    one instance of a struts Action class is created by the Struts framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables. Only instance fields that are written outside of a monitor\n    are reported.\n    </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "MWN_MISMATCHED_NOTIFY",
    "name": "Multi-threading - Mismatched notify()",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock\non the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "MWN_MISMATCHED_WAIT",
    "name": "Multi-threading - Mismatched wait()",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method calls Object.wait() without obviously holding a lock\non the object.&nbsp;  Calling wait() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NM_BAD_EQUAL",
    "name": "Correctness - Class defines equal(Object); should it be equals(Object)?",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines a method <code>equal(Object)</code>.&nbsp; This method does\nnot override the <code>equals(Object)</code> method in <code>java.lang.Object</code>,\nwhich is probably what was intended.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NM_CLASS_NAMING_CONVENTION",
    "name": "Bad practice - Class names should start with an upper case letter",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_CLASS_NOT_EXCEPTION",
    "name": "Bad practice - Class is not derived from an Exception, even though it is named as such",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class is not derived from another exception, but ends with 'Exception'. This will\nbe confusing to users of this class.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_CONFUSING",
    "name": "Bad practice - Confusing method names",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The referenced methods have names that differ only by capitalization.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_FIELD_NAMING_CONVENTION",
    "name": "Bad practice - Field names should start with a lower case letter",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\nNames of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER",
    "name": "Bad practice - Use of identifier that is a keyword in later versions of Java",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed\nin order to compile it in later versions of Java.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER",
    "name": "Bad practice - Use of identifier that is a keyword in later versions of Java",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>This identifier is used as a keyword in later versions of Java. This code, and\nany code that references this API,\nwill need to be changed in order to compile it in later versions of Java.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_LCASE_HASHCODE",
    "name": "Correctness - Class defines hashcode(); should it be hashCode()?",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines a method called <code>hashcode()</code>.&nbsp; This method\n  does not override the <code>hashCode()</code> method in <code>java.lang.Object</code>,\n  which is probably what was intended.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NM_LCASE_TOSTRING",
    "name": "Correctness - Class defines tostring(); should it be toString()?",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class defines a method called <code>tostring()</code>.&nbsp; This method\n  does not override the <code>toString()</code> method in <code>java.lang.Object</code>,\n  which is probably what was intended.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NM_METHOD_CONSTRUCTOR_CONFUSION",
    "name": "Correctness - Apparent method/constructor confusion",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.\n      If it was intended to be a constructor, remove the declaration of a void return value.\n    If you had accidentally defined this method, realized the mistake, defined a proper constructor\n    but can't get rid of this method due to backwards compatibility, deprecate the method.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NM_METHOD_NAMING_CONVENTION",
    "name": "Bad practice - Method names should start with a lower case letter",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\nMethods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_SAME_SIMPLE_NAME_AS_INTERFACE",
    "name": "Bad practice - Class names shouldn't shadow simple name of implemented interface",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class/interface has a simple name that is identical to that of an implemented/extended interface, except\nthat the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).\nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidentally define methods that do not override methods in their superclasses.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_SAME_SIMPLE_NAME_AS_SUPERCLASS",
    "name": "Bad practice - Class names shouldn't shadow simple name of superclass",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class has a simple name that is identical to that of its superclass, except\nthat its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).\nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidentally define methods that do not override methods in their superclasses.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NM_VERY_CONFUSING",
    "name": "Correctness - Very confusing method names",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The referenced methods have names that differ only by capitalization.\nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "NM_VERY_CONFUSING_INTENTIONAL",
    "name": "Bad practice - Very confusing method names (but perhaps intentional)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The referenced methods have names that differ only by capitalization.\nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other. From the existence of other methods, it\nseems that the existence of both of these methods is intentional, but is sure is confusing.\nYou should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NM_WRONG_PACKAGE",
    "name": "Correctness - Method doesn't override method in superclass due to wrong package for parameter",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n<pre><code>import alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n}\n</code></pre>\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the\n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NM_WRONG_PACKAGE_INTENTIONAL",
    "name": "Bad practice - Method doesn't override method in superclass due to wrong package for parameter",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n<pre><code>import alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n    public int f(alpha.Foo x) { return 27; }\n}\n</code></pre>\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the\n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>\n\n<p>In this case, the subclass does define a method with a signature identical to the method in the superclass,\nso this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider\nremoving or deprecating the method with the similar but not identical signature.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NN_NAKED_NOTIFY",
    "name": "Multi-threading - Naked notify",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A call to <code>notify()</code> or <code>notifyAll()</code>\n  was made without any (apparent) accompanying\n  modification to mutable object state.&nbsp; In general, calling a notify\n  method on a monitor is done because some condition another thread is\n  waiting for has become true.&nbsp; However, for the condition to be meaningful,\n  it must involve a heap object that is visible to both threads.</p>\n\n  <p> This bug does not necessarily indicate an error, since the change to\n  mutable object state may have taken place in a method which then called\n  the method containing the notification.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NO_NOTIFY_NOT_NOTIFYALL",
    "name": "Multi-threading - Using notify() rather than notifyAll()",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;\n  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>\n  only wakes up one thread, meaning that the thread woken up might not be the\n  one waiting for the condition that the caller just satisfied.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_ALWAYS_NULL",
    "name": "Correctness - Null pointer dereference",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A null pointer is dereferenced here.&nbsp; This will lead to a\n<code>NullPointerException</code> when the code is executed.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_ALWAYS_NULL_EXCEPTION",
    "name": "Correctness - Null pointer dereference in method on exception path",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A pointer which is null on an exception path is dereferenced here.&nbsp;\nThis will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;\nNote that because SpotBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that SpotBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_ARGUMENT_MIGHT_BE_NULL",
    "name": "Correctness - Method does not check for null argument",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n    A parameter to this method has been identified as a value that should\n    always be checked to see whether or not it is null, but it is being dereferenced\n    without a preceding null check.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_BOOLEAN_RETURN_NULL",
    "name": "Bad practice - Method with Boolean return type returns explicit null",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\n    A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.\n    This method can be invoked as though it returned a value of type boolean, and\n    the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,\n    this will result in a NullPointerException.\n       </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_CLONE_COULD_RETURN_NULL",
    "name": "Bad practice - Clone method may return null",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\n    This clone method seems to return null in some circumstances, but clone is never\n    allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError\n    instead.\n      </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_CLOSING_NULL",
    "name": "Correctness - close() invoked on a value that is always null",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> close() is being invoked on a value that is always null. If this statement is executed,\na null pointer exception will occur. But the big risk here you never close\nsomething that should be closed.",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_DEREFERENCE_OF_READLINE_VALUE",
    "name": "Style - Dereference of the result of readLine() without nullcheck",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT",
    "name": "Bad practice - equals() method does not check for null argument",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\n      This implementation of equals(Object) violates the contract defined\n      by java.lang.Object.equals() because it does not check for null\n      being passed as the argument.  All equals() methods should return\n      false if passed a null value.\n      </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_GUARANTEED_DEREF",
    "name": "Correctness - Null value is guaranteed to be dereferenced",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n              There is a statement or branch that if executed guarantees that\n              a value is null at this point, and that\n              value that is guaranteed to be dereferenced\n              (except on forward paths involving runtime exceptions).\n              </p>\n        <p>Note that a check such as\n            <code>if (x == null) throw new NullPointerException();</code>\n            is treated as a dereference of <code>x</code>.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH",
    "name": "Correctness - Value is null and guaranteed to be dereferenced on exception path",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n              There is a statement or branch on an exception path\n                that if executed guarantees that\n              a value is null at this point, and that\n              value that is guaranteed to be dereferenced\n              (except on forward paths involving runtime exceptions).\n              </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_IMMEDIATE_DEREFERENCE_OF_READLINE",
    "name": "Style - Immediate dereference of the result of readLine()",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_LOAD_OF_KNOWN_NULL_VALUE",
    "name": "Style - Load of known null value",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The variable referenced at this point is known to be null due to an earlier\n   check against null. Although this is valid, it might be a mistake (perhaps you\nintended to refer to a different variable, or perhaps the earlier check to see if the\nvariable is null should have been a check to see if it was non-null).\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_METHOD_PARAMETER_RELAXING_ANNOTATION",
    "name": "Style - Method tightens nullness annotation on parameter",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter\n    that is marked as @Nullable, you shouldn't override that method in a subclass with a method where that parameter is @Nonnull.\n    Doing so violates the contract that the method should handle a null parameter.\n        </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION",
    "name": "Style - Method tightens nullness annotation on parameter",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter\n    that is marked as @Nullable, you shouldn't override that method in a subclass with a method where that parameter is @Nonnull.\n    Doing so violates the contract that the method should handle a null parameter.\n        </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "NP_METHOD_RETURN_RELAXING_ANNOTATION",
    "name": "Style - Method relaxes nullness annotation on return value",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes is annotated\n    as returning a @Nonnull value,\n    you shouldn't override that method in a subclass with a method annotated as returning a @Nullable or @CheckForNull value.\n    Doing so violates the contract that the method shouldn't return null.\n        </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR",
    "name": "Correctness - Non-null field is not initialized",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The field is marked as non-null, but isn't written to by the constructor.\n    The field might be initialized elsewhere during constructor, or might always\n    be initialized before use.\n       </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "NP_NONNULL_PARAM_VIOLATION",
    "name": "Correctness - Method call passes null to a non-null parameter",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This method passes a null value as the parameter of a method which\n    must be non-null. Either this parameter has been explicitly marked\n    as @Nonnull, or analysis has determined that this parameter is\n    always dereferenced.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NP_NONNULL_RETURN_VIOLATION",
    "name": "Correctness - Method may return null, but is declared @Nonnull",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This method may return a null value, but the method (or a superclass method\n      which it overrides) is declared to return @Nonnull.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_NULL_INSTANCEOF",
    "name": "Correctness - A known null value is checked to see if it is an instance of a type",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NP_NULL_ON_SOME_PATH",
    "name": "Correctness - Possible null pointer dereference",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of SpotBugs.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_NULL_ON_SOME_PATH_EXCEPTION",
    "name": "Correctness - Possible null pointer dereference in method on exception path",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A reference value which is null on some exception control path is\ndereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>\nwhen the code is executed.&nbsp;\nNote that because SpotBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that SpotBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE",
    "name": "Style - Possible null pointer dereference due to return value of called method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The return value from a method is dereferenced without a null check,\nand the return value of that method is one that should generally be checked\nfor null.  This may lead to a <code>NullPointerException</code> when the code is executed.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE",
    "name": "Style - Possible null pointer dereference on branch that might be infeasible",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of SpotBugs.\nDue to the fact that this value had been previously tested for nullness,\nthis is a definite possibility.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_NULL_PARAM_DEREF",
    "name": "Correctness - Method call passes null for non-null parameter",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This method call passes a null value for a non-null method parameter.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS",
    "name": "Correctness - Method call passes null for non-null parameter",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      A possibly-null value is passed at a call site where all known\n      target methods require the parameter to be non-null.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "NP_NULL_PARAM_DEREF_NONVIRTUAL",
    "name": "Correctness - Non-virtual method call passes null for non-null parameter",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      A possibly-null value is passed to a non-null method parameter.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_OPTIONAL_RETURN_NULL",
    "name": "Correctness - Method with Optional return type returns explicit null",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n    The usage of Optional return type (java.util.Optional or com.google.common.base.Optional)\n    always means that explicit null returns were not desired by design.\n    Returning a null value in such case is a contract violation and will most likely break client code.\n       </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE",
    "name": "Style - Parameter must be non-null but is marked as nullable",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This parameter is always used in a way that requires it to be non-null,\nbut the parameter is explicitly annotated as being Nullable. Either the use\nof the parameter or the annotation is wrong.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_STORE_INTO_NONNULL_FIELD",
    "name": "Correctness - Store of null value into field annotated @Nonnull",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A value that could be null is stored into a field that has been annotated as @Nonnull. </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_SYNC_AND_NULL_CHECK_FIELD",
    "name": "Multi-threading - Synchronize and null check on the same field.",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>Since the field is synchronized on, it seems not likely to be null.\nIf it is null and then synchronized on a NullPointerException will be\nthrown and the check would be pointless. Better to synchronize on\nanother field.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_TOSTRING_COULD_RETURN_NULL",
    "name": "Bad practice - toString method may return null",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\n    This toString method seems to return null in some circumstances. A liberal reading of the\n    spec could be interpreted as allowing this, but it is probably a bad idea and could cause\n    other code to break. Return the empty string or some other appropriate string rather than null.\n      </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_UNWRITTEN_FIELD",
    "name": "Correctness - Read of unwritten field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The program is dereferencing a field that does not seem to ever have a non-null value written to it.\nUnless the field is initialized via some mechanism not seen by the analysis,\ndereferencing this value will generate a null pointer exception.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD",
    "name": "Style - Read of unwritten public or protected field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The program is dereferencing a public or protected\nfield that does not seem to ever have a non-null value written to it.\nUnless the field is initialized via some mechanism not seen by the analysis,\ndereferencing this value will generate a null pointer exception.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NS_DANGEROUS_NON_SHORT_CIRCUIT",
    "name": "Style - Potentially dangerous use of non-short-circuit logic",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||). In addition,\nit seem possible that, depending on the value of the left hand side, you might not\nwant to evaluate the right hand side (because it would have side effects, could cause an exception\nor could be expensive.</p>\n<p>\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n</p>\n\n<p>See <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2\">the Java\nLanguage Specification</a> for details.\n\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "NS_NON_SHORT_CIRCUIT",
    "name": "Style - Questionable use of non-short-circuit logic",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||).\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n\n<p>See <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2\">the Java\nLanguage Specification</a> for details.\n\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "OBL_UNSATISFIED_OBLIGATION",
    "name": "Experimental - Method may fail to clean up stream or resource",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n          This method may fail to clean up (close, dispose of) a stream,\n          database object, or other\n          resource requiring an explicit cleanup operation.\n          </p>\n\n          <p>\n          In general, if a method opens a stream or other resource,\n          the method should use a try/finally block to ensure that\n          the stream or resource is cleaned up before the method\n          returns.\n          </p>\n\n          <p>\n          This bug pattern is essentially the same as the\n          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE\n          bug patterns, but is based on a different\n          (and hopefully better) static analysis technique.\n          We are interested is getting feedback about the\n          usefulness of this bug pattern.\n          For sending feedback, check:\n          </p>\n          <ul>\n            <li><a href=\"https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md\">contributing guideline</a></li>\n            <li><a href=\"https://github.com/spotbugs/discuss/issues?q=\">malinglist</a></li>\n          </ul>\n\n          <p>\n          In particular,\n          the false-positive suppression heuristics for this\n          bug pattern have not been extensively tuned, so\n          reports about false positives are helpful to us.\n          </p>\n\n          <p>\n          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for\n          a description of the analysis technique.\n          </p>",
    "tags": [
      "experimental"
    ],
    "constantDebtMinutes": 180
  },
  {
    "key": "OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE",
    "name": "Experimental - Method may fail to clean up stream or resource on checked exception",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n          This method may fail to clean up (close, dispose of) a stream,\n          database object, or other\n          resource requiring an explicit cleanup operation.\n          </p>\n\n          <p>\n          In general, if a method opens a stream or other resource,\n          the method should use a try/finally block to ensure that\n          the stream or resource is cleaned up before the method\n          returns.\n          </p>\n\n          <p>\n          This bug pattern is essentially the same as the\n          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE\n          bug patterns, but is based on a different\n          (and hopefully better) static analysis technique.\n          We are interested is getting feedback about the\n          usefulness of this bug pattern.\n          For sending feedback, check:\n          </p>\n          <ul>\n            <li><a href=\"https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md\">contributing guideline</a></li>\n            <li><a href=\"https://github.com/spotbugs/discuss/issues?q=\">malinglist</a></li>\n          </ul>\n\n          <p>\n          In particular,\n          the false-positive suppression heuristics for this\n          bug pattern have not been extensively tuned, so\n          reports about false positives are helpful to us.\n          </p>\n\n          <p>\n          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for\n          a description of the analysis technique.\n          </p>",
    "tags": [
      "experimental"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ODR_OPEN_DATABASE_RESOURCE",
    "name": "Bad practice - Method may fail to close database resource",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH",
    "name": "Bad practice - Method may fail to close database resource on exception",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all exception paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "OS_OPEN_STREAM",
    "name": "Bad practice - Method may fail to close stream",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it,\nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "OS_OPEN_STREAM_EXCEPTION_PATH",
    "name": "Bad practice - Method may fail to close stream on exception",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nit on all possible exception paths out of the method.&nbsp;\nThis may result in a file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "PS_PUBLIC_SEMAPHORES",
    "name": "Style - Class exposes synchronization and semaphores in its public interface",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this\n    reference). Client classes that use this class, may, in addition, use an instance of this class\n    as a synchronizing object. Because two classes are using the same object for synchronization,\n    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on\n    a public reference. Consider using a internal private member variable to control synchronization.\n    </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "PT_ABSOLUTE_PATH_TRAVERSAL",
    "name": "Security - Absolute path traversal in servlet",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,\nbut it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/36.html\">http://cwe.mitre.org/data/definitions/36.html</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of absolute path traversal.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn't report. If you are concerned about absolute path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "PT_RELATIVE_PATH_TRAVERSAL",
    "name": "Security - Relative path traversal in servlet",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/23.html\">http://cwe.mitre.org/data/definitions/23.html</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of relative path traversal.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn't report. If you are concerned about relative path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>",
    "tags": [
      "cwe"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "PZLA_PREFER_ZERO_LENGTH_ARRAYS",
    "name": "Style - Consider returning a zero length array rather than null",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> It is often a better design to\nreturn a length zero array rather than a null reference to indicate that there\nare no results (i.e., an empty list of results).\nThis way, no explicit check for null is needed by clients of the method.</p>\n\n<p>On the other hand, using null to indicate\n\"there is no answer to this question\" is probably appropriate.\nFor example, <code>File.listFiles()</code> returns an empty list\nif given a directory containing no files, and returns null if the file\nis not a directory.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS",
    "name": "Bad practice - Don't reuse entry objects in iterators",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The entrySet() method is allowed to return a view of the\n     underlying Map in which an Iterator and Map.Entry. This clever\n     idea was used in several Map implementations, but introduces the possibility\n     of nasty coding mistakes. If a map <code>m</code> returns\n     such an iterator for an entrySet, then\n     <code>c.addAll(m.entrySet())</code> will go badly wrong. All of\n     the Map implementations in OpenJDK 1.7 have been rewritten to avoid this,\n     you should to.\n    </p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT",
    "name": "Correctness - Method assigns boolean literal in boolean expression",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This method assigns a literal boolean value (true or false) to a boolean variable inside\n      an if or while expression. Most probably this was supposed to be a boolean comparison using\n      ==, not an assignment using =.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "QF_QUESTIONABLE_FOR_LOOP",
    "name": "Style - Complicated, subtle or wrong increment in for-loop",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>Are you sure this for loop is incrementing the correct variable?\n   It appears that another variable is being initialized and checked\n   by the for loop.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RANGE_ARRAY_INDEX",
    "name": "Correctness - Array index is out of bounds",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p> Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "RANGE_ARRAY_LENGTH",
    "name": "Correctness - Array length is out of bounds",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p> Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "RANGE_ARRAY_OFFSET",
    "name": "Correctness - Array offset is out of bounds",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p> Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "RANGE_STRING_INDEX",
    "name": "Correctness - String index is out of bounds",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "<p> String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime. </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "RCN_REDUNDANT_CHECKED_NULL_COMPARISON",
    "name": "Experimental - Redundant comparison to null of previously checked value",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a redundant comparison of a reference value\nto null. Two types of redundant comparison are reported:\n</p>\n<ul>\n<li> Both values compared are definitely null</li>\n<li> One value is definitely null and the other is definitely not null</li>\n</ul>\n\n<p> This particular warning generally indicates that a\nvalue known not to be null was checked against null.\nWhile the check is not necessary, it may simply be a case\nof defensive programming.</p>",
    "tags": [
      "experimental"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE",
    "name": "Style - Redundant comparison of non-null value to null",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a reference known to be non-null with another reference\nknown to be null.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES",
    "name": "Style - Redundant comparison of two null values",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a redundant comparison of two references known to\nboth be definitely null.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE",
    "name": "Style - Redundant nullcheck of value known to be non-null",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a redundant check of a known non-null value against\nthe constant null.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE",
    "name": "Style - Redundant nullcheck of value known to be null",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a redundant check of a known null value against\nthe constant null.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE",
    "name": "Correctness - Nullcheck of value previously dereferenced",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A value is checked here to see whether it is null, but this value can't\nbe null because it was previously dereferenced and if it were null a null pointer\nexception would have occurred at the earlier dereference.\nEssentially, this code and the previous dereference\ndisagree as to whether this value is allowed to be null. Either the check is redundant\nor the previous dereference is erroneous.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RC_REF_COMPARISON",
    "name": "Correctness - Suspicious reference comparison",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RC_REF_COMPARISON_BAD_PRACTICE",
    "name": "Bad practice - Suspicious reference comparison to constant",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method compares a reference value to a constant using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN",
    "name": "Bad practice - Suspicious reference comparison of Boolean values",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method compares two Boolean values using the == or != operator.\nNormally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE),\nbut it is possible to create other Boolean objects using the <code>new Boolean(b)</code>\nconstructor. It is best to avoid such objects, but if they do exist,\nthen checking Boolean objects for equality using == or != will give results\nthan are different than you would get using <code>.equals(...)</code>.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "REC_CATCH_EXCEPTION",
    "name": "Style - Exception is caught when Exception is not thrown",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n  This method uses a try-catch block that catches Exception objects, but Exception is not\n  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to\n  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception\n  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,\n  masking potential bugs.\n  </p>\n  <p>A better approach is to either explicitly catch the specific exceptions that are thrown,\n  or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:</p>\n<pre><code>try {\n    ...\n} catch (RuntimeException e) {\n    throw e;\n} catch (Exception e) {\n    ... deal with all non-runtime exceptions ...\n}\n</code></pre>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION",
    "name": "Correctness - Invalid syntax for regular expression",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code here uses a regular expression that is invalid according to the syntax\nfor regular expressions. This statement will throw a PatternSyntaxException when\nexecuted.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION",
    "name": "Correctness - File.separator used for regular expression",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe code here uses <code>File.separator</code>\nwhere a regular expression is required. This will fail on Windows\nplatforms, where the <code>File.separator</code> is a backslash, which is interpreted in a\nregular expression as an escape character. Among other options, you can just use\n<code>File.separatorChar=='\\\\' ? \"\\\\\\\\\" : File.separator</code> instead of\n<code>File.separator</code>\n\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RE_POSSIBLE_UNINTENDED_PATTERN",
    "name": "Correctness - \".\" or \"|\" used for regular expression",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nA String function is being invoked and \".\" or \"|\" is being passed\nto a parameter that takes a regular expression as an argument. Is this what you intended?\nFor example\n</p>\n<ul>\n<li>s.replaceAll(\".\", \"/\") will return a String in which <em>every</em> character has been replaced by a '/' character</li>\n<li>s.split(\".\") <em>always</em> returns a zero length array of String</li>\n<li>\"ab|cd\".replaceAll(\"|\", \"/\") will return \"/a/b/|/c/d/\"</li>\n<li>\"ab|cd\".split(\"|\") will return array with six (!) elements: [, a, b, |, c, d]</li>\n</ul>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RI_REDUNDANT_INTERFACES",
    "name": "Style - Class implements same interface as superclass",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n    This class declares that it implements an interface that is also implemented by a superclass.\n    This is redundant because once a superclass implements an interface, all subclasses by default also\n    implement this interface. It may point out that the inheritance hierarchy has changed since\n    this class was created, and consideration should be given to the ownership of\n    the interface's implementation.\n    </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RR_NOT_CHECKED",
    "name": "Bad practice - Method ignores results of InputStream.read()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method ignores the return value of one of the variants of\n  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were read than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  reads from input streams usually do read the full amount of data requested,\n  causing the program to fail only sporadically.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RS_READOBJECT_SYNC",
    "name": "Multi-threading - Class's readObject() method is synchronized",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This serializable class defines a <code>readObject()</code> which is\n  synchronized.&nbsp; By definition, an object created by deserialization\n  is only reachable by one thread, and thus there is no need for\n  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>\n  method itself is causing the object to become visible to another thread,\n  that is an example of very dubious coding style.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RU_INVOKE_RUN",
    "name": "Multi-threading - Invokes run on a thread (did you mean to start it instead?)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method explicitly invokes <code>run()</code> on an object.&nbsp;\n  In general, classes implement the <code>Runnable</code> interface because\n  they are going to have their <code>run()</code> method invoked in a new thread,\n  in which case <code>Thread.start()</code> is the right method to call.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_01_TO_INT",
    "name": "Correctness - Random value from 0 to 1 is coerced to the integer 0",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>A random value from 0 to 1 is being coerced to the integer value 0. You probably\nwant to multiply the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_ABSOLUTE_VALUE_OF_HASHCODE",
    "name": "Correctness - Bad attempt to compute absolute value of signed 32-bit hashcode",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code generates a hashcode and then computes\nthe absolute value of that hashcode.  If the hashcode\nis <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since\n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>\n<p>One out of 2^32 strings have a hashCode of Integer.MIN_VALUE,\nincluding \"polygenelubricants\" \"GydZG_\" and \"\"DESIGNING WORKHOUSES\".\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_ABSOLUTE_VALUE_OF_RANDOM_INT",
    "name": "Correctness - Bad attempt to compute absolute value of signed random integer",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code generates a random signed integer and then computes\nthe absolute value of that random integer.  If the number returned by the random number\ngenerator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since\n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>). (Same problem arises for long values as well).\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE",
    "name": "Correctness - Code checks for specific values returned by compareTo",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code invoked a compareTo or compare method, and checks to see if the return value is a specific value,\nsuch as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific\nnon-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them\nwill return other values.",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RV_CHECK_FOR_POSITIVE_INDEXOF",
    "name": "Style - Method checks to see if result of String.indexOf is positive",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.\n   It is much more typical to check to see if the result is negative or non-negative. It is\n   positive only if the substring checked for occurs at some place other than at the beginning of\n   the String.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_DONT_JUST_NULL_CHECK_READLINE",
    "name": "Style - Method discards result of readLine after checking if it is non-null",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The value returned by readLine is discarded after checking to see if the return\nvalue is non-null. In almost all situations, if the result is non-null, you will want\nto use that non-null value. Calling readLine again will give you a different line.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_EXCEPTION_NOT_THROWN",
    "name": "Correctness - Exception created and dropped rather than thrown",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This code creates an exception (or error) object, but doesn't do anything with it. For example,\nsomething like </p>\n<pre><code>if (x &lt; 0) {\n    new IllegalArgumentException(\"x must be nonnegative\");\n}\n</code></pre>\n<p>It was probably the intent of the programmer to throw the created exception:</p>\n<pre><code>if (x &lt; 0) {\n    throw new IllegalArgumentException(\"x must be nonnegative\");\n}\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_NEGATING_RESULT_OF_COMPARETO",
    "name": "Bad practice - Negating the result of compareTo()/compare()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This code negatives the return value of a compareTo or compare method.\nThis is a questionable or bad programming practice, since if the return\nvalue is Integer.MIN_VALUE, negating the return value won't\nnegate the sign of the result. You can achieve the same intended result\nby reversing the order of the operands rather than by negating the results.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RV_REM_OF_HASHCODE",
    "name": "Style - Remainder of hashCode could be negative",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code computes a hashCode, and then computes\nthe remainder of that value modulo another value. Since the hashCode\ncan be negative, the result of the remainder operation\ncan also be negative. </p>\n<p> Assuming you want to ensure that the result of your computation is nonnegative,\nyou may need to change your code.\nIf you know the divisor is a power of 2,\nyou can use a bitwise and operator instead (i.e., instead of\nusing <code>x.hashCode()%n</code>, use <code>x.hashCode()&amp;(n-1)</code>).\nThis is probably faster than computing the remainder as well.\nIf you don't know that the divisor is a power of 2, take the absolute\nvalue of the result of the remainder operation (i.e., use\n<code>Math.abs(x.hashCode()%n)</code>).\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_REM_OF_RANDOM_INT",
    "name": "Style - Remainder of 32-bit signed random integer",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This code generates a random signed integer and then computes\nthe remainder of that value modulo another value. Since the random\nnumber can be negative, the result of the remainder operation\ncan also be negative. Be sure this is intended, and strongly\nconsider using the Random.nextInt(int) method instead.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "RV_RETURN_VALUE_IGNORED",
    "name": "Correctness - Method ignores return value",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<pre><code>String dateString = getHeaderField(name);\ndateString.trim();\n</code></pre>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<pre><code>String dateString = getHeaderField(name);\ndateString = dateString.trim();\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE",
    "name": "Bad practice - Method ignores exceptional return value",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method returns a value that is not checked. The return value should be checked\nsince it can indicate an unusual or unexpected function execution. For\nexample, the <code>File.delete()</code> method returns false\nif the file could not be successfully deleted (rather than\nthrowing an Exception).\nIf you don't check the result, you won't notice if the method invocation\nsignals unexpected behavior by returning an atypical return value.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RV_RETURN_VALUE_IGNORED_INFERRED",
    "name": "Style - Method ignores return value, is this OK?",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>This code calls a method and ignores the return value. The return value\nis the same type as the type the method is invoked on, and from our analysis it looks\nlike the return value might be important (e.g., like ignoring the\nreturn value of <code>String.toLowerCase()</code>).\n</p>\n<p>We are guessing that ignoring the return value might be a bad idea just from\na simple analysis of the body of the method. You can use a @CheckReturnValue annotation\nto instruct SpotBugs as to whether ignoring the return value of this method\nis important or acceptable.\n</p>\n<p>Please investigate this closely to decide whether it is OK to ignore the return value.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT",
    "name": "Style - Return value of method without side effect is ignored",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>This code calls a method and ignores the return value. However our analysis shows that\nthe method (including its implementations in subclasses if any) does not produce any effect\nother than return value. Thus this call can be removed.\n</p>\n<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.\nCommon false-positive cases include:</p>\n<p>- The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.</p>\n<p>- The method is called to trigger the class loading which may have a side effect.</p>\n<p>- The method is called just to get some exception.</p>\n<p>If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation\nto instruct SpotBugs that ignoring the return value of this method is acceptable.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED",
    "name": "Multi-threading - Return value of putIfAbsent ignored, value passed to putIfAbsent reused",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The <code>putIfAbsent</code> method is typically used to ensure that a\n        single value is associated with a given key (the first value for which put\n        if absent succeeds).\n        If you ignore the return value and retain a reference to the value passed in,\n        you run the risk of retaining a value that is not the one that is associated with the key in the map.\n        If it matters which one you use and you use the one that isn't stored in the map,\n        your program will behave incorrectly.",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "RpC_REPEATED_CONDITIONAL_TEST",
    "name": "Correctness - Repeated conditional tests",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>The code contains a conditional test is performed twice, one right after the other\n(e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else\n(e.g., <code>x == 0 || y == 0</code>).\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SA_FIELD_DOUBLE_ASSIGNMENT",
    "name": "Style - Double assignment of field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a double assignment of a field; e.g.\n</p>\n<pre><code>int x,y;\npublic void foo() {\n    x = x = 17;\n}\n</code></pre>\n<p>Assigning to a field twice is useless, and may indicate a logic error or typo.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SA_FIELD_SELF_ASSIGNMENT",
    "name": "Correctness - Self assignment of field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains a self assignment of a field; e.g.\n</p>\n<pre><code>int x;\npublic void foo() {\n    x = x;\n}\n</code></pre>\n<p>Such assignments are useless, and may indicate a logic error or typo.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SA_FIELD_SELF_COMPARISON",
    "name": "Correctness - Self comparison of field with itself",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method compares a field with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SA_FIELD_SELF_COMPUTATION",
    "name": "Correctness - Nonsensical self computation involving a field (e.g., x & x)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method performs a nonsensical computation of a field with another\nreference to the same field (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SA_LOCAL_DOUBLE_ASSIGNMENT",
    "name": "Style - Double assignment of local variable",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a double assignment of a local variable; e.g.\n</p>\n<pre><code>public void foo() {\n    int x,y;\n    x = x = 17;\n}\n</code></pre>\n<p>Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SA_LOCAL_SELF_ASSIGNMENT",
    "name": "Style - Self assignment of local variable",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a self assignment of a local variable; e.g.</p>\n<pre><code>public void foo() {\n    int x = 3;\n    x = x;\n}\n</code></pre>\n<p>\nSuch assignments are useless, and may indicate a logic error or typo.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD",
    "name": "Correctness - Self assignment of local rather than assignment to field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains a self assignment of a local variable, and there\nis a field with an identical name.\nassignment appears to have been ; e.g.</p>\n<pre><code>    int foo;\n    public void setFoo(int foo) {\n        foo = foo;\n    }\n</code></pre>\n<p>The assignment is useless. Did you mean to assign to the field instead?</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SA_LOCAL_SELF_COMPARISON",
    "name": "Correctness - Self comparison of value with itself",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method compares a local variable with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SA_LOCAL_SELF_COMPUTATION",
    "name": "Correctness - Nonsensical self computation involving a variable (e.g., x & x)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method performs a nonsensical computation of a local variable with another\nreference to the same variable (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SBSC_USE_STRINGBUFFER_CONCATENATION",
    "name": "Performance - Method concatenates strings using + in a loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The method seems to be building a String using concatenation in a loop.\nIn each iteration, the String is converted to a StringBuffer/StringBuilder,\n   appended to, and converted back to a String.\n   This can lead to a cost quadratic in the number of iterations,\n   as the growing string is recopied in each iteration. </p>\n\n<p>Better performance can be obtained by using\na StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>\n\n<p> For example:</p>\n<pre><code>// This is bad\nString s = \"\";\nfor (int i = 0; i &lt; field.length; ++i) {\n    s = s + field[i];\n}\n\n// This is better\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i &lt; field.length; ++i) {\n    buf.append(field[i]);\n}\nString s = buf.toString();\n</code></pre>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SC_START_IN_CTOR",
    "name": "Multi-threading - Constructor invokes Thread.start()",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The constructor starts a thread. This is likely to be wrong if\n   the class is ever extended/subclassed, since the thread will be started\n   before the subclass constructor is started.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_BAD_FIELD",
    "name": "Bad practice - Non-transient non-serializable instance field in serializable class",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This Serializable class defines a non-primitive instance field which is neither transient,\nSerializable, or <code>java.lang.Object</code>, and does not appear to implement\nthe <code>Externalizable</code> interface or the\n<code>readObject()</code> and <code>writeObject()</code> methods.&nbsp;\nObjects of this class will not be deserialized correctly if a non-Serializable\nobject is stored in this field.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_BAD_FIELD_INNER_CLASS",
    "name": "Bad practice - Non-serializable class has a serializable inner class",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This Serializable class is an inner class of a non-serializable class.\nThus, attempts to serialize it will also attempt to associate instance of the outer\nclass with which it is associated, leading to a runtime error.\n</p>\n<p>If possible, making the inner class a static inner class should solve the\nproblem. Making the outer class serializable might also work, but that would\nmean serializing an instance of the inner class would always also serialize the instance\nof the outer class, which it often not what you really want.",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_BAD_FIELD_STORE",
    "name": "Bad practice - Non-serializable value stored into instance field of a serializable class",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> A non-serializable value is stored into a non-transient field\nof a serializable class.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_COMPARATOR_SHOULD_BE_SERIALIZABLE",
    "name": "Bad practice - Comparator doesn't implement Serializable",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class implements the <code>Comparator</code> interface. You\nshould consider whether or not it should also implement the <code>Serializable</code>\ninterface. If a comparator is used to construct an ordered collection\nsuch as a <code>TreeMap</code>, then the <code>TreeMap</code>\nwill be serializable only if the comparator is also serializable.\nAs most comparators have little or no state, making them serializable\nis generally easy and good defensive programming.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_INNER_CLASS",
    "name": "Bad practice - Serializable inner class",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This Serializable class is an inner class.  Any attempt to serialize\nit will also serialize the associated outer instance. The outer instance is serializable,\nso this won't fail, but it might serialize a lot more data than intended.\nIf possible, making the inner class a static inner class (also known as a nested class) should solve the\nproblem.",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_METHOD_MUST_BE_PRIVATE",
    "name": "Correctness - Method must be private in order for serialization to work",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class implements the <code>Serializable</code> interface, and defines a method\n  for custom serialization/deserialization. But since that method isn't declared private,\n  it will be silently ignored by the serialization/deserialization API.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_NONFINAL_SERIALVERSIONID",
    "name": "Bad practice - serialVersionUID isn't final",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;\n  The field should be made final\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SE_NONLONG_SERIALVERSIONID",
    "name": "Bad practice - serialVersionUID isn't long",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;\n  The field should be made long\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SE_NONSTATIC_SERIALVERSIONID",
    "name": "Bad practice - serialVersionUID isn't static",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;\n  The field should be made static\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SE_NO_SERIALVERSIONID",
    "name": "Bad practice - Class is Serializable, but doesn't define serialVersionUID",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class implements the <code>Serializable</code> interface, but does\n  not define a <code>serialVersionUID</code> field.&nbsp;\n  A change as simple as adding a reference to a .class object\n    will add synthetic fields to the class,\n   which will unfortunately change the implicit\n   serialVersionUID (e.g., adding a reference to <code>String.class</code>\n   will generate a static field <code>class$java$lang$String</code>).\n   Also, different source code to bytecode compilers may use different\n   naming conventions for synthetic variables generated for\n   references to class objects or inner classes.\n   To ensure interoperability of Serializable across versions,\n   consider adding an explicit serialVersionUID.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_NO_SUITABLE_CONSTRUCTOR",
    "name": "Bad practice - Class is Serializable but its superclass doesn't define a void constructor",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class implements the <code>Serializable</code> interface\n   and its superclass does not. When such an object is deserialized,\n   the fields of the superclass need to be initialized by\n   invoking the void constructor of the superclass.\n   Since the superclass does not have one,\n   serialization and deserialization will fail at runtime.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION",
    "name": "Bad practice - Class is Externalizable but doesn't define a void constructor",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class implements the <code>Externalizable</code> interface, but does\n  not define a void constructor. When Externalizable objects are deserialized,\n   they first need to be constructed by invoking the void\n   constructor. Since this class does not have one,\n   serialization and deserialization will fail at runtime.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_PRIVATE_READ_RESOLVE_NOT_INHERITED",
    "name": "Style - Private readResolve method not inherited by subclasses",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This class defines a private readResolve method. Since it is private, it won't be inherited by subclasses.\nThis might be intentional and OK, but should be reviewed to ensure it is what is intended.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "SE_READ_RESOLVE_IS_STATIC",
    "name": "Correctness - The readResolve method must not be declared as a static method.",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must not be declared as a static method.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SE_READ_RESOLVE_MUST_RETURN_OBJECT",
    "name": "Bad practice - The readResolve method must be declared with a return type of Object.",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must be declared to have a return type of Object.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_TRANSIENT_FIELD_NOT_RESTORED",
    "name": "Bad practice - Transient field that isn't set by deserialization.",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any\ndeserialized instance of the class.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS",
    "name": "Style - Transient field of class that isn't Serializable.",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> The field is marked as transient, but the class isn't Serializable, so marking it as transient\nhas absolutely no effect.\nThis may be leftover marking from a previous version of the code in which the class was transient, or\nit may indicate a misunderstanding of how serialization works.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH",
    "name": "Correctness - Dead store due to switch statement fall through",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that\n    you forgot to put a break or return at the end of the previous case.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW",
    "name": "Correctness - Dead store due to switch statement fall through to throw",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A value stored in the previous switch case is ignored here due to a switch fall through to a place where\n    an exception is thrown. It is likely that\n    you forgot to put a break or return at the end of the previous case.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SF_SWITCH_FALLTHROUGH",
    "name": "Style - Switch statement found where one case falls through to the next case",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a switch statement where one case branch will fall through to the next case.\n  Usually you need to end this case with a break or return.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SF_SWITCH_NO_DEFAULT",
    "name": "Style - Switch statement found where default case is missing",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a switch statement where default case is missing.\n  Usually you need to provide a default case.</p>\n  <p>Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered if\nthe default case is at the end of the switch statement and the switch statement doesn't contain break statements for other\ncases.",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SIC_INNER_SHOULD_BE_STATIC",
    "name": "Performance - Should be a static inner class",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n   made static.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SIC_INNER_SHOULD_BE_STATIC_ANON",
    "name": "Performance - Could be refactored into a named static inner class",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since anonymous inner\nclasses cannot be marked as static, doing this will require refactoring\nthe inner class so that it is a named inner class.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS",
    "name": "Performance - Could be refactored into a static inner class",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it except during construction of the\ninner object.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since the reference to the\n   outer object is required during construction of the inner instance,\n   the inner class will need to be refactored so as to\n   pass a reference to the outer instance to the constructor\n   for the inner class.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SIC_THREADLOCAL_DEADLY_EMBRACE",
    "name": "Correctness - Deadly embrace of non-static inner class and thread local",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class is an inner class, but should probably be a static inner class.\n  As it is, there is a serious danger of a deadly embrace between the inner class\n  and the thread local in the outer class. Because the inner class isn't static,\n  it retains a reference to the outer class.\n  If the thread local contains a reference to an instance of the inner\n  class, the inner and outer instance will both be reachable\n  and not eligible for garbage collection.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SIO_SUPERFLUOUS_INSTANCEOF",
    "name": "Correctness - Unnecessary type check done using instanceof operator",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Type check performed using the instanceof operator where it can be statically determined whether the object\nis of the type requested. </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SI_INSTANCE_BEFORE_FINALS_ASSIGNED",
    "name": "Bad practice - Static initializer creates instance before all static final fields assigned",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> The class's static initializer creates an instance of the class\nbefore all of the static final fields are assigned.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SKIPPED_CLASS_TOO_BIG",
    "name": "Experimental - Class too big for analysis",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>This class is bigger than can be effectively handled, and was not fully analyzed for errors.\n</p>",
    "tags": [
      "experimental"
    ],
    "constantDebtMinutes": 180
  },
  {
    "key": "SP_SPIN_ON_FIELD",
    "name": "Multi-threading - Method spins on field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method spins in a loop which reads a field.&nbsp; The compiler\n  may legally hoist the read out of the loop, turning the code into an\n  infinite loop.&nbsp; The class should be changed so it uses proper\n  synchronization (including wait and notify calls).</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SQL_BAD_PREPARED_STATEMENT_ACCESS",
    "name": "Correctness - Method attempts to access a prepared statement parameter with index 0",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A call to a setXXX method of a prepared statement was made where the\nparameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SQL_BAD_RESULTSET_ACCESS",
    "name": "Correctness - Method attempts to access a result set field with index 0",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE",
    "name": "Security - Nonconstant string passed to execute or addBatch method on an SQL statement",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The method invokes the execute or addBatch method on an SQL statement with a String that seems\nto be dynamically generated. Consider using\na prepared statement instead. It is more efficient and less vulnerable to\nSQL injection attacks.\n</p>",
    "tags": [
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING",
    "name": "Security - A prepared statement is generated from a nonconstant String",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>The code creates an SQL prepared statement from a nonconstant String.\nIf unchecked, tainted data from a user is used in building this String, SQL injection could\nbe used to make the prepared statement do something unexpected and undesirable.\n</p>",
    "tags": [
      "injection",
      "owasp-a1"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SR_NOT_CHECKED",
    "name": "Bad practice - Method ignores results of InputStream.skip()",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p> This method ignores the return value of\n  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were skipped than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  skips from input streams usually do skip the full amount of data requested,\n  causing the program to fail only sporadically. With Buffered streams, however,\n  skip() will only skip data in the buffer, and will routinely fail to skip the\n  requested number of bytes.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SS_SHOULD_BE_STATIC",
    "name": "Performance - Unread field: should this field be static?",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class contains an instance final field that\n   is initialized to a compile-time static value.\n   Consider making the field static.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE",
    "name": "Multi-threading - Call to static Calendar",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.\nThe detector has found a call to an instance of Calendar that has been obtained via a static\nfield. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE",
    "name": "Multi-threading - Call to static DateFormat",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.\nThe detector has found a call to an instance of DateFormat that has been obtained via a static\nfield. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "STCAL_STATIC_CALENDAR_INSTANCE",
    "name": "Multi-threading - Static Calendar field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.\nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see\nrandom ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE",
    "name": "Multi-threading - Static DateFormat",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.\nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication.</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "STI_INTERRUPTED_ON_CURRENTTHREAD",
    "name": "Correctness - Unneeded use of currentThread() call, to call interrupted()",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a\nstatic method, is more simple and clear to use Thread.interrupted().\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "STI_INTERRUPTED_ON_UNKNOWNTHREAD",
    "name": "Correctness - Static Thread.interrupted() method invoked on thread instance",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is\nnot the current thread. As the interrupted() method is static, the interrupted method will be called on a different\nobject than the one the author intended.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD",
    "name": "Style - Write to static field from instance method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This instance method writes to a static field. This is tricky to get\ncorrect if multiple instances are being manipulated,\nand generally bad practice.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "SWL_SLEEP_WITH_LOCK_HELD",
    "name": "Multi-threading - Method calls Thread.sleep() with a lock held",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This method calls Thread.sleep() with a lock held.  This may result\n      in very poor performance and scalability, or a deadlock, since other threads may\n      be waiting to acquire the lock.  It is a much better idea to call\n      wait() on the lock, which releases the lock and allows other threads\n      to run.\n      </p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "SW_SWING_METHODS_INVOKED_IN_SWING_THREAD",
    "name": "Bad practice - Certain swing methods needs to be invoked in Swing thread",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>(<a href=\"http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html\">From JDC Tech Tip</a>): The Swing methods\nshow(), setVisible(), and pack() will create the associated peer for the frame.\nWith the creation of the peer, the system creates the event dispatch thread.\nThis makes things problematic because the event dispatch thread could be notifying\nlisteners while pack and validate are still processing. This situation could result in\ntwo threads going through the Swing component-based GUI -- it's a serious flaw that\ncould result in deadlocks or other related threading issues. A pack call causes\ncomponents to be realized. As they are being realized (that is, not necessarily\nvisible), they could trigger listener notification on the event dispatch thread.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "TLW_TWO_LOCK_NOTIFY",
    "name": "Multi-threading - Notify with two locks held",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> The code calls notify() or notifyAll() while two locks\n  are held. If this notification is intended to wake up a wait()\n  that is holding the same locks, it may deadlock, since the wait\n  will only give up one lock and the notify will be unable to get both locks,\n  and thus the notify will not succeed.\n   &nbsp; If there is also a warning about a two lock wait, the\n   probably of a bug is quite high.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TLW_TWO_LOCK_WAIT",
    "name": "Multi-threading - Wait with two locks held",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> Waiting on a monitor while two locks are held may cause\n  deadlock.\n   &nbsp;\n   Performing a wait only releases the lock on the object\n   being waited on, not any other locks.\n   &nbsp;\nThis not necessarily a bug, but is worth examining\n  closely.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED",
    "name": "Correctness - Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n        A value specified as carrying a type qualifier annotation is\n        consumed in a location or locations requiring that the value not\n        carry that annotation.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n        </p>\n\n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.\n        </p>\n<pre><code>public @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS",
    "name": "Correctness - Comparing values with incompatible type qualifiers",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n        A value specified as carrying a type qualifier annotation is\n        compared with a value that doesn't ever carry that qualifier.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is compared with a value that where the same type qualifier specifies when=NEVER.\n        </p>\n\n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.\n        </p>\n<pre><code>public boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n    return value1.equals(value2);\n}\n</code></pre>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK",
    "name": "Style - Value required to have type qualifier, but marked as unknown",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but\n    there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.\n    Either the usage or the annotation is incorrect.\n      </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK",
    "name": "Style - Value required to not have type qualifier, but marked as unknown",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but\n    there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.\n    Either the usage or the annotation is incorrect.\n      </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK",
    "name": "Correctness - Value that might not carry a type qualifier is always used in a way requires that type qualifier",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      A value that is annotated as possibility not being an instance of\n    the values denoted by the type qualifier, and the value is guaranteed to be used\n    in a way that requires values denoted by that type qualifier.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK",
    "name": "Correctness - Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      A value that is annotated as possibility being an instance of\n    the values denoted by the type qualifier, and the value is guaranteed to be used\n    in a way that prohibits values denoted by that type qualifier.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED",
    "name": "Correctness - Value annotated as never carrying a type qualifier used where value carrying that qualifier is required",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n        A value specified as not carrying a type qualifier annotation is guaranteed\n        to be consumed in a location or locations requiring that the value does\n        carry that annotation.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=NEVER\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n        </p>\n\n        <p>\n        TODO: example\n        </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED",
    "name": "Correctness - Value without a type qualifier used where a value is required to have that qualifier",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n        A value is being used in a way that requires the value be annotation with a type qualifier.\n    The type qualifier is strict, so the tool rejects any values that do not have\n    the appropriate annotation.\n        </p>\n\n        <p>\n        To coerce a value to have a strict annotation, define an identity function where the return value is annotated\n    with the strict annotation.\n    This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.\n        </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UCF_USELESS_CONTROL_FLOW",
    "name": "Style - Useless control flow",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a useless control flow statement, where\ncontrol flow continues onto the same place regardless of whether or not\nthe branch is taken. For example,\nthis is caused by having an empty statement\nblock for an <code>if</code> statement:</p>\n<pre><code>if (argv.length == 0) {\n    // TODO: handle this case\n}\n</code></pre>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "UCF_USELESS_CONTROL_FLOW_NEXT_LINE",
    "name": "Style - Useless control flow to next line",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This method contains a useless control flow statement in which control\nflow follows to the same or following line regardless of whether or not\nthe branch is taken.\nOften, this is caused by inadvertently using an empty statement as the\nbody of an <code>if</code> statement, e.g.:</p>\n<pre><code>if (argv.length == 1);\n    System.out.println(\"Hello, \" + argv[0]);\n</code></pre>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UC_USELESS_CONDITION",
    "name": "Style - Condition has no effect",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>This condition always produces the same result as the value of the involved variable that was narrowed before.\nProbably something else was meant or the condition can be removed.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "UC_USELESS_CONDITION_TYPE",
    "name": "Style - Condition has no effect due to the variable type",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>This condition always produces the same result due to the type range of the involved variable.\nProbably something else was meant or the condition can be removed.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 15
  },
  {
    "key": "UC_USELESS_OBJECT",
    "name": "Style - Useless object created",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>Our analysis shows that this object is useless.\nIt's created and modified, but its value never go outside of the method or produce any side-effect.\nEither there is a mistake and object was intended to be used or it can be removed.</p>\n<p>This analysis rarely produces false-positives. Common false-positive cases include:</p>\n<p>- This object used to implicitly throw some obscure exception.</p>\n<p>- This object used as a stub to generalize the code.</p>\n<p>- This object used to hold strong references to weak/soft-referenced objects.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "UC_USELESS_OBJECT_STACK",
    "name": "Style - Useless object created on stack",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>This object is created just to perform some modifications which don't have any side-effect.\nProbably something else was meant or the object can be removed.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "UC_USELESS_VOID_METHOD",
    "name": "Style - Useless non-empty void method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>Our analysis shows that this non-empty void method does not actually perform any useful work.\nPlease check it: probably there's a mistake in its code or its body can be fully removed.\n</p>\n<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.\nCommon false-positive cases include:</p>\n<ul>\n<li>The method is intended to trigger loading of some class which may have a side effect.</li>\n<li>The method is intended to implicitly throw some obscure exception.</li>\n</ul>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UG_SYNC_SET_UNSYNC_GET",
    "name": "Multi-threading - Unsynchronized get method, synchronized set method",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class contains similarly-named get and set\n  methods where the set method is synchronized and the get method is not.&nbsp;\n  This may result in incorrect behavior at runtime, as callers of the get\n  method will not necessarily see a consistent state for the object.&nbsp;\n  The get method should be made synchronized.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UI_INHERITANCE_UNSAFE_GETRESOURCE",
    "name": "Bad practice - Usage of GetResource may be unsafe if class is extended",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>Calling <code>this.getClass().getResource(...)</code> could give\nresults other than expected if this class is extended by a class in\nanother package.</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UL_UNRELEASED_LOCK",
    "name": "Multi-threading - Method does not release lock on all paths",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre><code>Lock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n</code></pre>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UL_UNRELEASED_LOCK_EXCEPTION_PATH",
    "name": "Multi-threading - Method does not release lock on all exception paths",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all exception paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre><code>Lock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n</code></pre>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",
    "name": "Correctness - Uncallable method defined in anonymous class",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This anonymous class defined a method that is not directly invoked and does not override\na method in a superclass. Since methods in other classes cannot directly invoke methods\ndeclared in an anonymous class, it seems that this method is uncallable. The method\nmight simply be dead code, but it is also possible that the method is intended to\noverride a method declared in a superclass, and due to an typo or other error the method does not,\nin fact, override the method it is intended to.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UM_UNNECESSARY_MATH",
    "name": "Performance - Method calls static Math class method on a constant value",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method uses a static method from java.lang.Math on a constant value. This method's\nresult in this case, can be determined statically, and is faster and sometimes more accurate to\njust use the constant. Methods detected are:\n</p>\n<table>\n<tr>\n   <th>Method</th> <th>Parameter</th>\n</tr>\n<tr>\n   <td>abs</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>acos</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>asin</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan2</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cbrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>ceil</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>cos</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cosh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>exp</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>expm1</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>floor</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>log</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>log10</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>rint</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>round</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>sin</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sinh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sqrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>tan</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>tanh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>toDegrees</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>toRadians</td> <td>0.0</td>\n</tr>\n</table>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UPM_UNCALLED_PRIVATE_METHOD",
    "name": "Performance - Private method is never called",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This private method is never called. Although it is\npossible that the method will be invoked through reflection,\nit is more likely that the method is never used, and should be\nremoved.\n</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "URF_UNREAD_FIELD",
    "name": "Performance - Unread field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This field is never read.&nbsp; Consider removing it from the class.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD",
    "name": "Style - Unread public/protected field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This field is never read.&nbsp;\nThe field is public or protected, so perhaps\n    it is intended to be used with classes not seen as part of the analysis. If not,\nconsider removing it from the class.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UR_UNINIT_READ",
    "name": "Correctness - Uninitialized read of field in constructor",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This constructor reads a field which has not yet been assigned a value.&nbsp;\n  This is often caused when the programmer mistakenly uses the field instead\n  of one of the constructor's parameters.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR",
    "name": "Correctness - Uninitialized read of field method called from constructor of superclass",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method is invoked in the constructor of the superclass. At this point,\n    the fields of the class have not yet initialized.</p>\n<p>To make this more concrete, consider the following classes:</p>\n<pre><code>abstract class A {\n    int hashCode;\n    abstract Object getValue();\n\n    A() {\n        hashCode = getValue().hashCode();\n    }\n}\n\nclass B extends A {\n    Object value;\n\n    B(Object v) {\n        this.value = v;\n    }\n\n    Object getValue() {\n        return value;\n    }\n}\n</code></pre>\n<p>When a <code>B</code> is constructed,\nthe constructor for the <code>A</code> class is invoked\n<em>before</em> the constructor for <code>B</code> sets <code>value</code>.\nThus, when the constructor for <code>A</code> invokes <code>getValue</code>,\nan uninitialized value is read for <code>value</code>.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "USM_USELESS_ABSTRACT_METHOD",
    "name": "Style - Abstract Method is already defined in implemented interface",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      This abstract method is already defined in an interface that is implemented by this abstract\n      class. This method can be removed, as it provides no additional value.\n      </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "USM_USELESS_SUBCLASS_METHOD",
    "name": "Style - Method superfluously delegates to parent class method",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      This derived method merely calls the same superclass method passing in the exact parameters\n      received. This method can be removed, as it provides no additional value.\n      </p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UUF_UNUSED_FIELD",
    "name": "Performance - Unused field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This field is never used.&nbsp; Consider removing it from the class.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD",
    "name": "Style - Unused public or protected field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This field is never used.&nbsp;\nThe field is public or protected, so perhaps\n    it is intended to be used with classes not seen as part of the analysis. If not,\nconsider removing it from the class.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR",
    "name": "Style - Field not initialized in constructor but dereferenced without null check",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> This field is never initialized within any constructor, and is therefore could be null after\nthe object is constructed. Elsewhere, it is loaded and dereferenced without a null check.\nThis could be a either an error or a questionable design, since\nit means a null pointer exception will be generated if that field is dereferenced\nbefore being initialized.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UWF_NULL_FIELD",
    "name": "Correctness - Field only ever set to null",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> All writes to this field are of the constant value null, and thus\nall reads of the field will return null.\nCheck for errors, or remove it if it is useless.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "UWF_UNWRITTEN_FIELD",
    "name": "Correctness - Unwritten field",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This field is never written.&nbsp; All reads of it will return the default\nvalue. Check for errors (should it have been initialized?), or remove it if it is useless.</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD",
    "name": "Style - Unwritten public or protected field",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p> No writes were seen to this public/protected field.&nbsp; All reads of it will return the default\nvalue. Check for errors (should it have been initialized?), or remove it if it is useless.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "UW_UNCOND_WAIT",
    "name": "Multi-threading - Unconditional wait",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains a call to <code>java.lang.Object.wait()</code> which\n  is not guarded by conditional control flow.&nbsp; The code should\n    verify that condition it intends to wait for is not already satisfied\n    before calling wait; any previous notifications will be ignored.\n  </p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_ARG_MISMATCH",
    "name": "Correctness - Number of format-string arguments does not correspond to number of placeholders",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nA format-string method with a variable number of arguments is called,\nbut the number of arguments passed does not match with the number of\n% placeholders in the format string.  This is probably not what the\nauthor intended.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_BAD_ARGUMENT",
    "name": "Correctness - Format string placeholder incompatible with passed argument",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe format string placeholder is incompatible with the corresponding\nargument. For example,\n<code>\n  System.out.println(\"%d\\n\", \"hello\");\n</code>\n<p>The %d placeholder requires a numeric argument, but a string value is\npassed instead.\nA runtime exception will occur when\nthis statement is executed.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_BAD_CONVERSION",
    "name": "Correctness - The type of a supplied argument doesn't match format specifier",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nOne of the arguments is incompatible with the corresponding format string specifier.\nAs a result, this will generate a runtime exception when executed.\nFor example, <code>String.format(\"%d\", \"1\")</code> will generate an exception, since\nthe String \"1\" is incompatible with the format specifier %d.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY",
    "name": "Correctness - Array formatted in useless way using format string",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nOne of the arguments being formatted with a format string is an array. This will be formatted\nusing a fairly useless format, such as [I@304282, which doesn't actually show the contents\nof the array.\nConsider wrapping the array using <code>Arrays.asList(...)</code> before handling it off to a formatted.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN",
    "name": "Style - Non-Boolean argument formatted using %b format specifier",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\nAn argument not of type Boolean is being formatted with a %b format specifier. This won't throw an\nexception; instead, it will print true for any non-null value, and false for null.\nThis feature of format strings is strange, and may not be what you intended.\n</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED",
    "name": "Correctness - MessageFormat supplied where printf style format expected",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nA method is called that expects a Java printf format string and a list of arguments.\nHowever, the format string doesn't contain any format specifiers (e.g., %s) but\ndoes contain message format elements (e.g., {0}).  It is likely\nthat the code is supplying a MessageFormat string when a printf-style format string\nis required. At runtime, all of the arguments will be ignored\nand the format string will be returned exactly as provided without any formatting.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 30
  },
  {
    "key": "VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED",
    "name": "Correctness - More arguments are passed than are actually used in the format string",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nA format-string method with a variable number of arguments is called,\nbut more arguments are passed than are actually used by the format string.\nThis won't cause a runtime exception, but the code may be silently omitting\ninformation that was intended to be included in the formatted string.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_ILLEGAL",
    "name": "Correctness - Illegal format string",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe format string is syntactically invalid,\nand a runtime exception will occur when\nthis statement is executed.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_MISSING_ARGUMENT",
    "name": "Correctness - Format string references missing argument",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nNot enough arguments are passed to satisfy a placeholder in the format string.\nA runtime exception will occur when\nthis statement is executed.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT",
    "name": "Correctness - No previous argument for format string",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThe format string specifies a relative index to request that the argument for the previous format specifier\nbe reused. However, there is no previous argument.\nFor example,\n</p>\n<p><code>formatter.format(\"%&lt;s %s\", \"a\", \"b\")</code>\n</p>\n<p>would throw a MissingFormatArgumentException when executed.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VA_FORMAT_STRING_USES_NEWLINE",
    "name": "Bad practice - Format string should use %n rather than \\n",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "<p>\nThis format string includes a newline character (\\n). In format strings, it is generally\n preferable to use %n, which will produce the platform-specific line separator.\n</p>",
    "tags": [
      "bad-practice"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG",
    "name": "Correctness - Primitive array passed to function expecting a variable number of object arguments",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\nThis code passes a primitive array to a function that takes a variable number of object arguments.\nThis creates an array of length one to hold the primitive array and passes it to the function.\n</p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 300
  },
  {
    "key": "VO_VOLATILE_INCREMENT",
    "name": "Multi-threading - An increment to a volatile field isn't atomic",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This code increments a volatile field. Increments of volatile fields aren't\natomic. If more than one thread is incrementing the field at the same time,\nincrements could be lost.\n</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VO_VOLATILE_REFERENCE_TO_ARRAY",
    "name": "Multi-threading - A volatile reference to an array doesn't treat the array elements as volatile",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>This declares a volatile reference to an array, which might not be what\nyou want. With a volatile reference to an array, reads and writes of\nthe reference to the array are treated as volatile, but the array elements\nare non-volatile. To get volatile array elements, you will need to use\none of the atomic array classes in java.util.concurrent (provided\nin Java 5.0).</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "VR_UNRESOLVABLE_REFERENCE",
    "name": "Correctness - Class makes reference to unresolvable class or method",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n      This class makes a reference to a class or method that can not be\n    resolved using against the libraries it is being analyzed with.\n      </p>",
    "tags": [
      "correctness"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WA_AWAIT_NOT_IN_LOOP",
    "name": "Multi-threading - Condition.await() not in loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains a call to <code>java.util.concurrent.await()</code>\n   (or variants)\n  which is not in a loop.&nbsp; If the object is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "WA_NOT_IN_LOOP",
    "name": "Multi-threading - Wait not in loop",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method contains a call to <code>java.lang.Object.wait()</code>\n  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL",
    "name": "Multi-threading - Synchronization on getClass rather than class literal",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p>\n     This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed,\n     subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.\n     For example, consider this code from java.awt.Label:</p>\n<pre><code>private static final String base = \"label\";\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (getClass()) {\n        return base + nameCounter++;\n    }\n}\n</code></pre>\n     <p>Subclasses of <code>Label</code> won't synchronize on the same subclass, giving rise to a datarace.\n     Instead, this code should be synchronizing on <code>Label.class</code></p>\n<pre><code>private static final String base = \"label\";\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (Label.class) {\n        return base + nameCounter++;\n    }\n}\n</code></pre>\n      <p>Bug pattern contributed by Jason Mehrens</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "WMI_WRONG_MAP_ITERATOR",
    "name": "Performance - Inefficient use of keySet iterator instead of entrySet iterator",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This method accesses the value of a Map entry, using a key that was retrieved from\na keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the\nMap.get(key) lookup.</p>",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "WS_WRITEOBJECT_SYNC",
    "name": "Multi-threading - Class's writeObject() method is synchronized but nothing else is",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "<p> This class has a <code>writeObject()</code> method which is synchronized;\n  however, no other method of the class is synchronized.</p>",
    "tags": [
      "multi-threading"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "XFB_XML_FACTORY_BYPASS",
    "name": "Style - Method directly allocates a specific implementation of xml interfaces",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "<p>\n      This method allocates a specific implementation of an xml interface. It is preferable to use\n      the supplied factory classes to create these objects so that the implementation can be\n      changed at runtime. See\n      </p>\n      <ul>\n         <li>javax.xml.parsers.DocumentBuilderFactory</li>\n         <li>javax.xml.parsers.SAXParserFactory</li>\n         <li>javax.xml.transform.TransformerFactory</li>\n         <li>org.w3c.dom.Document.create<i>XXXX</i></li>\n      </ul>\n      <p>for details.</p>",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 60
  },
  {
    "key": "XSS_REQUEST_PARAMETER_TO_SEND_ERROR",
    "name": "Security - Servlet reflected cross site scripting vulnerability in error page",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows\nfor a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>",
    "tags": [
      "owasp-a3"
    ],
    "constantDebtMinutes": 180
  },
  {
    "key": "XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER",
    "name": "Security - Servlet reflected cross site scripting vulnerability",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "<p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>",
    "tags": [
      "owasp-a3"
    ],
    "constantDebtMinutes": 180
  }
]